# Generated by Django 4.1.7 on 2023-06-30 08:54

from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions


class Migration(migrations.Migration):
    dependencies = [
        ("species", "0003_taxonsurveymethod"),
        ("occurrence", "0003_alter_samplingsizeunit_unit"),
        ("activity", "0001_initial"),
        ("population_data", "0006_certainty"),
    ]

    operations = [
        migrations.CreateModel(
            name="AnnualPopulation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year", models.PositiveIntegerField()),
                ("total", models.IntegerField()),
                ("adult_male", models.IntegerField(blank=True, null=True)),
                ("adult_female", models.IntegerField(blank=True, null=True)),
                ("juvenile_male", models.IntegerField(blank=True, null=True)),
                ("juvenile_female", models.IntegerField(blank=True, null=True)),
                ("area_covered", models.FloatField(default=0.0)),
                ("sampling_effort", models.FloatField(default=0.0)),
                ("group", models.IntegerField(blank=True, null=True)),
                ("note", models.TextField(blank=True, null=True)),
                ("sub_adult_total", models.IntegerField(blank=True, null=True)),
                ("sub_adult_male", models.IntegerField(blank=True, null=True)),
                ("sub_adult_female", models.IntegerField(blank=True, null=True)),
                ("juvenile_total", models.IntegerField(blank=True, null=True)),
                ("pride", models.IntegerField(blank=True, null=True)),
                (
                    "certainty",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="population_data.certainty",
                    ),
                ),
                (
                    "count_method",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="population_data.countmethod",
                    ),
                ),
                (
                    "month",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="population_data.month",
                    ),
                ),
            ],
            options={
                "verbose_name": "Annual Population",
                "verbose_name_plural": "Annual Populations",
                "db_table": "annual_population",
            },
        ),
        migrations.CreateModel(
            name="AnnualPopulationPerActivity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year", models.PositiveIntegerField()),
                ("total", models.IntegerField()),
                ("adult_male", models.IntegerField(blank=True, null=True)),
                ("adult_female", models.IntegerField(blank=True, null=True)),
                ("juvenile_male", models.IntegerField(blank=True, null=True)),
                ("juvenile_female", models.IntegerField(blank=True, null=True)),
                ("area_covered", models.FloatField(default=0.0)),
                ("sampling_effort", models.FloatField(default=0.0)),
                ("group", models.IntegerField(blank=True, null=True)),
                ("note", models.TextField(blank=True, null=True)),
                ("founder_population", models.BooleanField(blank=True, null=True)),
                (
                    "reintroduction_source",
                    models.CharField(blank=True, max_length=250, null=True),
                ),
                ("permit_number", models.IntegerField(blank=True, null=True)),
                (
                    "activity_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="activity.activitytype",
                    ),
                ),
                (
                    "certainty",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="population_data.certainty",
                    ),
                ),
                (
                    "count_method",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="population_data.countmethod",
                    ),
                ),
                (
                    "month",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="population_data.month",
                    ),
                ),
            ],
            options={
                "verbose_name": "Population count per activity",
                "verbose_name_plural": "Population count per activities",
                "db_table": "annual_population_per_activity",
            },
        ),
        migrations.CreateModel(
            name="OpenCloseSystem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(default="", max_length=250, unique=True)),
            ],
            options={
                "verbose_name": "Open Close System",
                "verbose_name_plural": "Open Close System",
                "db_table": "open_close_system",
            },
        ),
        migrations.RemoveField(
            model_name="populationcountperactivity",
            name="activity_type",
        ),
        migrations.RemoveField(
            model_name="populationcountperactivity",
            name="month",
        ),
        migrations.RemoveField(
            model_name="populationcountperactivity",
            name="owned_species",
        ),
        migrations.DeleteModel(
            name="PopulationCount",
        ),
        migrations.DeleteModel(
            name="PopulationCountPerActivity",
        ),
        migrations.AddField(
            model_name="annualpopulationperactivity",
            name="open_close_system",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="population_data.openclosesystem",
            ),
        ),
        migrations.AddField(
            model_name="annualpopulationperactivity",
            name="owned_species",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="species.ownedspecies"
            ),
        ),
        migrations.AddField(
            model_name="annualpopulationperactivity",
            name="sampling_size_unit",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="occurrence.samplingsizeunit",
            ),
        ),
        migrations.AddField(
            model_name="annualpopulationperactivity",
            name="survey_method",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="occurrence.surveymethod",
            ),
        ),
        migrations.AddField(
            model_name="annualpopulation",
            name="open_close_system",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="population_data.openclosesystem",
            ),
        ),
        migrations.AddField(
            model_name="annualpopulation",
            name="owned_species",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="species.ownedspecies"
            ),
        ),
        migrations.AddField(
            model_name="annualpopulation",
            name="sampling_size_unit",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="occurrence.samplingsizeunit",
            ),
        ),
        migrations.AddField(
            model_name="annualpopulation",
            name="survey_method",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="occurrence.surveymethod",
            ),
        ),
        migrations.AddConstraint(
            model_name="annualpopulationperactivity",
            constraint=models.UniqueConstraint(
                fields=("year", "owned_species", "activity_type"),
                name="unique_population_count_per_activity",
            ),
        ),
        migrations.AddConstraint(
            model_name="annualpopulation",
            constraint=models.UniqueConstraint(
                fields=("year", "owned_species"), name="unique_population_count"
            ),
        ),
        migrations.AddConstraint(
            model_name="annualpopulation",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "total__gte",
                        django.db.models.expressions.CombinedExpression(
                            models.F("adult_male"), "+", models.F("adult_female")
                        ),
                    )
                ),
                name="Adult male and adult female must not be greater than total",
            ),
        ),
    ]
