{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"IDS SAWPS","text":""},{"location":"#sanbi-wps","title":"SANBI WPS","text":"<p>Welcome to SANBI WPS. The SANBI Wildlife Protection System is a platform to track the population levels of endangered wildlife.</p> <p></p>"},{"location":"#introduction-to-and-aim-of-the-sawps","title":"Introduction to and AIM of the SAWPS","text":"<p>Welcome to the SAWPS platform Documentation site. SAWPS is a Global Environment Facility (GEF)-funded project. SAWPS is a coordinated system of wildlife trade monitoring with centralised/shared information for priority species (rhino, lion, leopard, cheetah, and elephant). The system will eventually be able to house information for other species as well. Currently, permits for legal trade, information about illegal trade seizures, and other law enforcement processes, and provincial-level monitoring data for key species (e.g., population counts and population information such as births, deaths, translocations, etc.) are captured at a provincial and sometimes national level. In addition, private wildlife owners maintain their own information systems about wildlife on their land, and some non-governmental organisations maintain their own information systems for specific species, SAWPS is expected to provide valuable data and information on a national level about the impacts of legal and illegal trade in the species and the current status of the distribution and abundance of the species. The data will then be interrogated and analysed by users of the system to inform national and international permitting and listing or reporting processes (e.g., the Threatened or Protected Species list under NEMBA, the CITES listings, hunting quotas, etc.).</p> <p>The aim of SAWPS is to have a system for centralised population-level monitoring of traded wildlife where information from provinces and private landowners is made available to key users (primarily to the Scientific Authority and other relevant decision makers) under strict access and security controls.</p>"},{"location":"#sanbi-the-scientific-authority","title":"SANBI the Scientific authority","text":"<p>SANBI is the body mandated by the National Environmental Management Biodiversity Act of 2004 (No. 10 of 2004) to champion the exploration, conservation, sustainable use, appreciation, and enjoyment of South Africa\u2019s exceptionally rich biodiversity for all South Africans. This includes giving effect to international agreements, and cooperative governance arrangements directed at ensuring the country\u2019s rich and varied biodiversity is conserved for future generations. SANBI also manages the technical unit for the Scientific Authority of South Africa (SAoSA).</p> <p>The SANBI technical unit, which provides advice and analysis on various species, recognises that is consumes a significant amount of its time and effort trying to obtain data from a variety of sector stakeholders \u2013 which could be better spent on more strategic, value-adding activities, and that it would be more efficient if they could access the required data from a central location. This has led SANBI to initiate the SAWPS project to develop a national digital platform for population-level monitoring of traded wildlife as part of its responsibility for Component 1 of the Global Environmental Facility-funded project titled \u2018Strengthening institutions, information management and monitoring to reduce the rate of illegal wildlife trade in South Africa.</p>"},{"location":"#scope-of-project","title":"Scope of Project","text":"<p>The focus of the project is therefore on monitoring population levels for charismatic species such as the lion, elephant, leopard, and rhino. The system is designed with scalability in mind such that alter iterations will be able to cater for data pertaining to other fauna and flora species as and when these become required. Part of this is to create a robust, information rich platform for visualisation of data at the level of administrative units.</p> <p></p>"},{"location":"#overview-to-the-sawps-platform-functionality","title":"Overview to the SAWPS platform functionality","text":""},{"location":"#contributing","title":"Contributing","text":"<p>We would love to collaborate with you! But first, please read our contributor guidelines which describe how to report issues, plan and contribute feature additions etc.</p>"},{"location":"#code-of-conduct","title":"Code of Conduct","text":"<p>Our community in this project is aligned with our Code of Conduct - please be sure to read and abide by that document in all interactions with out community.</p>"},{"location":"#diversity-statement","title":"Diversity Statement","text":"<p>This project welcomes and encourages participation by everyone.</p> <p>No matter how you identify yourself or how others perceive you: we welcome you. We welcome contributions from everyone as long as they interact constructively with our community.</p> <p>While much of the work for our project is technical in nature, we value and encourage contributions from those with expertise in other areas, and welcome them into our community.</p>"},{"location":"#project-partners","title":"Project Partners","text":"<p>The work is funded by the South African National Biodiversity Institute</p> <p>This project is implemented by Kartoza under contract to IDS.</p> Project Badges"},{"location":"about/","title":"IDS SAWPS","text":""},{"location":"about/#about","title":"About","text":""},{"location":"about/#license","title":"License","text":"<p>Published under AGPL-3. See the full license text.</p>"},{"location":"about/#contributors","title":"Contributors","text":"Contributor GitHub Handle Tim Sutton timlinux Dimas Ciputra dimasciput Leon Greyling lgkgh Faneva Andriamiadantsoa Fanevanjanahary Danang Massandy danangmassandy Tinashe Chiraya tinashechiraya Ketan Bamniya ketankartoza Amy Ternent amyburness Luna Asefaw LunaAsefaw Jeremy Prior Jeremy-Prior <p>For more information about contributing, click here.</p>"},{"location":"about/#project-fundersbackers","title":"Project Funders/Backers","text":"<p>This project was conceptualized and initially funded by South African National Biodiversity Institute.</p>"},{"location":"about/#development","title":"Development","text":"<p>Another fine project contributed to by: Kartoza under contract to IDS.</p>"},{"location":"about/code-of-conduct/","title":"IDS SAWPS","text":""},{"location":"about/code-of-conduct/#contributor-covenant-code-of-conduct","title":"Contributor Covenant Code of Conduct","text":""},{"location":"about/code-of-conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"about/code-of-conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behaviour that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behaviour by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"about/code-of-conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behaviour and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behaviour.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"about/code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"about/code-of-conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behaviour may be reported by contacting the project team. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident.  Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"about/code-of-conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p>"},{"location":"about/contributing/","title":"IDS SAWPS","text":""},{"location":"about/contributing/#contributing-to-sanbi-wps","title":"Contributing to SANBI WPS","text":"<p>First off, thanks for taking the time to contribute! \ud83c\udf89 \ud83d\ude18 \u2728</p> <p>The following is a set of guidelines for contributing to this project. These are mostly guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request.</p>"},{"location":"about/contributing/#reporting-bugs","title":"Reporting Bugs","text":"<p>Bugs are tracked as GitHub issues. Search the list and try reproduce on your local machine with a clean profile before you create an issue.  When you create an issue, please provide the following information by filling in the template.</p> <p>Explain the problem and include additional details to help maintainers reproduce the problem:</p> <ul> <li>Use a clear and descriptive title for the issue to identify the problem.</li> <li>Describe the exact steps which reproduce the problem in as many details   as possible. Don't just say what you did, but explain how you did it. For   example, if you moved the cursor to the end of a line, explain if you used a   mouse or a keyboard.</li> <li>Provide specific examples to demonstrate the steps. Include links to   files or GitHub projects, or copy/pasteable snippets, which you use in those   examples. If you're providing snippets on the issue, use Markdown code blocks.</li> <li>Describe the behavior you observed after following the steps and point   out what exactly is the problem with that behavior.</li> <li>Explain which behavior you expected to see instead and why.</li> <li>Include screenshots and animated GIFs which show you following the   described steps and clearly demonstrate the problem.</li> </ul>"},{"location":"about/contributing/#suggesting-enhancements","title":"Suggesting Enhancements","text":"<p>In case you want to suggest an enhancement, please follow this guideline to help maintainers and the community understand your suggestion. Before creating suggestions, please check issue list if there's already a request.</p> <p>Create an issue and provide the following information:</p> <ul> <li>Use a clear and descriptive title for the issue to identify the   suggestion.</li> <li>Provide a step-by-step description of the suggested enhancement in as   many details as possible.</li> <li>Provide specific examples to demonstrate the steps. Include   copy/pasteable snippets which you use in those examples, as Markdown code   blocks.</li> <li>Include screenshots and animated GIFs which helps demonstrate the steps   or point out the part of SANBI WPS which the suggestion is related to.</li> <li>Explain why this enhancement would be useful to most SANBI WPS users.</li> <li>List some other text editors or applications where this enhancement   exists.</li> </ul>"},{"location":"about/contributing/#first-code-contribution","title":"First Code Contribution","text":"<p>Unsure where to begin contributing? You can start by looking through these <code>document</code>, <code>good first issue</code> and <code>help wanted</code> issues:</p> <ul> <li>document issues: issues which should be reviewed or improved.</li> <li>good first issues: issues which should only require a few lines of code,   and a test or two.</li> <li>help wanted issues: issues which should be a bit more involved than   beginner issues.</li> </ul>"},{"location":"about/contributing/#pull-requests","title":"Pull Requests","text":""},{"location":"about/contributing/#development-workflow","title":"Development workFlow","text":"<ul> <li>Set up your development environment</li> <li>Make change from a right branch</li> <li>Be sure the code passes tests</li> <li>Make a pull request</li> </ul>"},{"location":"about/contributing/#development-environment","title":"Development environment","text":"<ul> <li>Prepare your machine and it's packages installed.</li> <li>Checkout our repository</li> <li>Install dependencies by <code>pip install -r REQUIREMENTS-dev.txt</code></li> </ul>"},{"location":"about/contributing/#make-changes","title":"Make changes","text":""},{"location":"about/contributing/#checkout-a-branch","title":"Checkout a branch","text":"<ul> <li>master: PR Base branch.</li> <li>production: lastest release branch with distribution files. Never make a PR on this.</li> <li>gh-pages: API docs, examples and demo</li> </ul>"},{"location":"about/contributing/#check-code-style","title":"Check Code Style","text":"<p>Run the pylance extension and make sure all the tests pass.</p>"},{"location":"about/contributing/#test","title":"Test","text":"<p>Run <code>TODO</code> and verify all the tests pass. If you are adding new commands or features, they must include tests. If you are changing functionality, update the tests if you need to.</p>"},{"location":"about/contributing/#commit","title":"Commit","text":"<p>Follow our commit message conventions.</p>"},{"location":"about/contributing/#yes-pull-request","title":"Yes! Pull request","text":"<p>Make your pull request, then describe your changes.</p>"},{"location":"about/contributing/#title","title":"Title","text":"<p>Follow other PR title format on below. </p><pre><code>    &lt;Type&gt;: Short Description (fix #111)\n    &lt;Type&gt;: Short Description (fix #123, #111, #122)\n    &lt;Type&gt;: Short Description (ref #111)\n</code></pre> <ul> <li>capitalize first letter of Type</li> <li>use present tense: 'change' not 'changed' or 'changes'</li> </ul>"},{"location":"about/contributing/#description","title":"Description","text":"<p>If it has related issues, add links to the issues(like <code>#123</code>) in the description. Fill in the Pull Request Template by check your case.</p>"},{"location":"about/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>This project and everyone participating in it is governed by the Code of Conduct. By participating, you are expected to uphold this code. Please report unacceptable behaviour to tim@kartoza.com.</p> <p>This guide is based on atom contributing guide, CocoaPods and ESLint</p>"},{"location":"about/license/","title":"License","text":"<pre><code>                GNU AFFERO GENERAL PUBLIC LICENSE\n                   Version 3, 19 November 2007\n</code></pre> <p>Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/  Everyone is permitted to copy and distribute verbatim copies  of this license document, but changing it is not allowed.</p> <pre><code>                        Preamble\n</code></pre> <p>The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works.  By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users.</p> <p>When we speak of free software, we are referring to freedom, not price.  Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software.</p> <p>A secondary benefit of defending all users' freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate.  Many developers of free software are heartened and encouraged by the resulting cooperation.  However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public.</p> <p>The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community.  It requires the operator of a network server to provide the source code of the modified version running there to the users of that server.  Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version.</p> <p>An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals.  This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p> <pre><code>                   TERMS AND CONDITIONS\n</code></pre> <ol> <li>Definitions.</li> </ol> <p>\"This License\" refers to version 3 of the GNU Affero General Public License.</p> <p>\"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\"The Program\" refers to any copyrightable work licensed under this License.  Each licensee is addressed as \"you\".  \"Licensees\" and \"recipients\" may be individuals or organizations.</p> <p>To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy.  The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work.</p> <p>A \"covered work\" means either the unmodified Program or a work based on the Program.</p> <p>To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy.  Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies.  Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License.  If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p> <ol> <li>Source Code.</li> </ol> <p>The \"source code\" for a work means the preferred form of the work for making modifications to it.  \"Object code\" means any non-source form of a work.</p> <p>A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form.  A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities.  However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work.  For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p> <ol> <li>Basic Permissions.</li> </ol> <p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met.  This License explicitly affirms your unlimited permission to run the unmodified Program.  The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work.  This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force.  You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright.  Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below.  Sublicensing is not allowed; section 10 makes it unnecessary.</p> <ol> <li>Protecting Users' Legal Rights From Anti-Circumvention Law.</li> </ol> <p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.</p> <ol> <li>Conveying Verbatim Copies.</li> </ol> <p>You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p> <ol> <li>Conveying Modified Source Versions.</li> </ol> <p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <pre><code>a) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n\"keep intact all notices\".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.\n</code></pre> <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit.  Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p> <ol> <li>Conveying Non-Source Forms.</li> </ol> <p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <pre><code>a) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.\n</code></pre> <p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling.  In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage.  For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product.  A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source.  The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information.  But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed.  Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p> <ol> <li>Additional Terms.</li> </ol> <p>\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law.  If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it.  (Additional permissions may be written to require their own removal in certain cases when you modify the work.)  You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <pre><code>a) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.\n</code></pre> <p>All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10.  If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term.  If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p> <ol> <li>Termination.</li> </ol> <p>You may not propagate or modify a covered work except as expressly provided under this License.  Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License.  If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p> <ol> <li>Acceptance Not Required for Having Copies.</li> </ol> <p>You are not required to accept this License in order to receive or run a copy of the Program.  Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance.  However, nothing other than this License grants you permission to propagate or modify any covered work.  These actions infringe copyright if you do not accept this License.  Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p> <ol> <li>Automatic Licensing of Downstream Recipients.</li> </ol> <p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License.  You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations.  If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License.  For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p> <ol> <li>Patents.</li> </ol> <p>A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based.  The work thus licensed is called the contributor's \"contributor version\".</p> <p>A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version.  For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement).  To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients.  \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License.  You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p> <ol> <li>No Surrender of Others' Freedom.</li> </ol> <p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License.  If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all.  For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p> <ol> <li>Remote Network Interaction; Use with the GNU General Public License.</li> </ol> <p>Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software.  This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph.</p> <p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work.  The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License.</p> <ol> <li>Revised Versions of this License.</li> </ol> <p>The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time.  Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number.  If the Program specifies that a certain numbered version of the GNU Affero General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation.  If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions.  However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p> <ol> <li>Disclaimer of Warranty.</li> </ol> <p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p> <ol> <li>Limitation of Liability.</li> </ol> <p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p> <ol> <li>Interpretation of Sections 15 and 16.</li> </ol> <p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p> <pre><code>                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs\n</code></pre> <p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program.  It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.</p> <pre><code>&lt;one line to give the program's name and a brief idea of what it does.&gt;\nCopyright (C) &lt;year&gt;  &lt;name of author&gt;\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as published\nby the Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source.  For example, if your program is a web application, its interface could display a \"Source\" link that leads users to an archive of the code.  There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements.</p> <p>You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see https://www.gnu.org/licenses/.</p>"},{"location":"administrator/","title":"IDS SAWPS","text":""},{"location":"administrator/#for-administrators","title":"For Administrators","text":"<p>This is the homepage for all administrator related documentation.</p> <p>The content is divided into two sections:</p> <ul> <li>The administrator guide, which describes common workflows for system administrators in a tutorial format.</li> <li>The administrator manual, which describes each page of the admin user interface and what the various options on that page do.</li> </ul>"},{"location":"administrator/guide/","title":"IDS SAWPS","text":""},{"location":"administrator/guide/#administrator-guide","title":"Administrator Guide","text":"<p>Welcome to the SAWPS administrator guide. In this section of the documentation, we aim to show administrators common workflows for managing the platform effectively. Here is a brief overview of the content provided here:</p> <ul> <li>Accessing the Administration Site: This section contains a quick description on how administrators can access the administration site of the SAWPS platform.</li> <li>Managing Organisations: This section describes how administrators can manage organisations (i.e. members, data, reminders, etc ) on the SAWPS platform.</li> <li>Managing Users: This section describes how administrators can manage users ( i.e. their associated organisations, their permissions, etc.) on the SAWPS platform.</li> <li>Managing Taxa: This section describes how administrators can manage taxa ( i.e. add, remove, modify, etc.) on the SAWPS platform.</li> <li>Managing Uploaded Data: This section describes how administrators can manage uploaded data ( e.g. properties, their permissions, etc.) on the SAWPS platform.</li> <li>Managing Lookup Tables: This section describes how administrators can manage the values in the look-up tables (i.e. add/edit/delete the options available in dropdown menus using the pencil icons) on the backend so these values are reflected in the front-end and backend dropdown menus.</li> </ul> <p>Disclaimer: The workflows described in the guide demonstrate the necessary workflows for an administrator. If there is a page on the administration site that you would like to edit but has not been described in the guide, please do not edit it until you have been in contact with the development team.</p>"},{"location":"administrator/guide/access-admin-site/","title":"IDS SAWPS","text":""},{"location":"administrator/guide/access-admin-site/#accessing-the-administration-site","title":"Accessing the Administration Site","text":"<p>This section contains explains how administrators can access the administration site of the SAWPS platform to then move forward with administration tasks. To acquire an administrative user role, users can utilise the contact page page to make a request for the necessary permissions.</p>"},{"location":"administrator/guide/access-admin-site/#access-from-the-sawps-platform","title":"Access from the SAWPS Platform","text":"<p>After logging in to the SAWPS platform using an administrative account, you can click on 1\ufe0f\u20e3 the profile menu dropdown and then click on 2\ufe0f\u20e3 the <code>Django Admin</code> link to be redirected to the administration page.</p> <p></p> <p>A helpful hint is to right-click and open the administration page in a new tab, but that is up to you as the administrator.</p> <p>When you are first redirected to the landing page, you will be greeted by the landing page where you can see 1\ufe0f\u20e3 a summary of your most recent actions on the administration site. There is also 2\ufe0f\u20e3 the navigation bar, where you can see a welcome message along with the first name that you gave on your SAWPS profile, a link to <code>VIEW SITE</code>, a link to <code>CHANGE PASSWORD</code>, and a link to <code>LOG OUT</code>.</p> <p></p>"},{"location":"administrator/guide/access-admin-site/#navigation-bar-links","title":"Navigation bar links","text":"<p>If the you click on the <code>View SITE</code> link, you will be redirected back to the landing page of the SAWPS platform.</p> <p></p> <p>Clicking on the <code>CHANGE PASSWORD</code> link will redirect you to a page where you can change your password that you use to access the platform. The new password must adhere to the criteria specified on the page.</p> <p></p> <p>If you click on the <code>LOG OUT</code> link, you will be logged out of both the administration site and the SAWPS platform, and you will be redirected to the logout page. If you click on 1\ufe0f\u20e3 the <code>Log in again</code> link, you will be redirected to the <code>LOGIN</code> page of the SAWPS platform where you will need to enter your account details and authentication one-time pin.</p> <p></p>"},{"location":"administrator/guide/access-admin-site/#what-next","title":"What next?","text":"<p>Now that you have access to the administration site, you can move forward with Managing Organisations, Managing Users, Managing Taxa, and Managing Uploaded Data.</p>"},{"location":"administrator/guide/manage-lookup-tables/","title":"IDS SAWPS","text":""},{"location":"administrator/guide/manage-lookup-tables/#managing-lookup-tables","title":"Managing Lookup Tables","text":"<p>This section describes how administrators can manage the values in the look-up tables (i.e. add/edit/delete the options available in dropdown menus) on the backend so these values are reflected in the front-end and backend dropdown menus.</p>"},{"location":"administrator/guide/manage-lookup-tables/#where-to-manage-lookup-tables","title":"Where to Manage Lookup Tables","text":"<p>When you are adding/managing/deleting records on the administration site you will see a little yellow pencil (Similar to \u270f\ufe0f). If you click on the yellow pencil, a popup window will open with a form you can edit to manage a specific lookup table.</p> <p></p>"},{"location":"administrator/guide/manage-lookup-tables/#how-to-manage-lookup-tables","title":"How to Manage Lookup Tables","text":"<p>On the popup that opens you will be able to edit the record within the lookup table.</p> <p>The <code>Sort id</code> field is used to specify the order in which the records appear in the various dropdown menus. If you do not have a preferred order for the records you can leave the field blank (this will automatically sort the records in ascending alphabetical order) but if you would like a specific order you must specify a numeric value in the field (e.g. High would be 1, medium would be 2, and low would be 3).</p> <p></p> <p>Once you have made your changes you can click on 1\ufe0f\u20e3 the <code>Save</code> button.</p> <p></p>"},{"location":"administrator/guide/manage-lookup-tables/#lookup-tables-that-you-can-edit","title":"Lookup tables that you can edit","text":"<p>On the landing page of the administration site you will see links to the various lookup tables. The tables that you can edit are as follows:</p> <ul> <li>Survey Methods</li> <li>Open Close System (must also update template)</li> <li>Population Estimate Category (must also update template)</li> <li>Population Status (must also update template)</li> <li>Sampling Effort Coverage (must also update template)</li> <li>Property Types</li> <li>Taxa (Read through manage taxa for more in-depth information)</li> <li>Titles</li> </ul>"},{"location":"administrator/guide/manage-lookup-tables/#lookup-tables-that-you-should-not-edit","title":"Lookup tables that you should not edit","text":"<p>The tables that should not be edited/touched without a core developer present to guide you are:</p> <ul> <li>Activities</li> <li>Everything under Front-end heading</li> <li>Provinces</li> <li>Parcel Types</li> </ul>"},{"location":"administrator/guide/manage-organisations/","title":"IDS SAWPS","text":""},{"location":"administrator/guide/manage-organisations/#managing-organisations","title":"Managing Organisations","text":"<p>This documentation guides administrators through managing organisations on the SAWPS platform. Management of organisations includes (but is not limited to) adding/removing members from organisations, managing organisation data, and managing notifications/reminders for the organisation.</p>"},{"location":"administrator/guide/manage-organisations/#where-to-manage-organisations","title":"Where to Manage Organisations?","text":"<p>After you have logged into the administration site, scroll down on the landing page until you see 1\ufe0f\u20e3 the STAKEHOLDER section. In this section you will see 2\ufe0f\u20e3 the four links to the various pages required to manage organisations.</p> <p></p>"},{"location":"administrator/guide/manage-organisations/#organisation-representatives","title":"Organisation Representatives","text":"<p>If you clicked on the <code>Organisation representative</code> link on the landing page, you will be redirected to a page that has 1\ufe0f\u20e3 a list of the platform's organisation representatives and their respective organisations. The organisation representatives are the managers of their respective organisations and can manage their organisation.</p> <p></p>"},{"location":"administrator/guide/manage-organisations/#searching-for-representatives","title":"Searching for Representative(s)","text":"<p>If you do not see the representative you would like to see in the list due to the length of the list, you can utilise the <code>Search</code> functionality. To do so, click on 1\ufe0f\u20e3 the <code>Search</code> field and type a few characters (i.e. letters in the representative's name), and then click on 2\ufe0f\u20e3 the <code>Search</code> button to filter the list of representatives.</p> <p></p> <p>If the representative you are looking for is still not there, then you will need to follow the steps below to add them.</p>"},{"location":"administrator/guide/manage-organisations/#adding-organisation-representatives","title":"Adding Organisation Representative(s)","text":"<p>If you would like to add another registered user as an organisation representative, you can click on 1\ufe0f\u20e3 the <code>ADD ORGANISATION REPRESENTATIVE</code> button.</p> <p></p> <p>When you click on the <code>ADD ORGANISATION REPRESENTATIVE</code> button, you will be redirected to the <code>Add Organisation representative</code> page. You can then click on 1\ufe0f\u20e3 the <code>Organisation</code> dropdown menu, you will be shown a list of all the current organisations on the platform and you should choose your desired organisation. Having specified an organisation, you can then click on 2\ufe0f\u20e3 the <code>User</code> dropdown menu and select the registered user that you would like to be an organisation manager.</p> <p></p> <p>Note: If the organisation or user is not available in the dropdown menus, then you should follow either the add organisation or add user instructions.</p> <p>Once you have chosen an organisation and a user you have three options to proceed forward:</p> <p></p> <ul> <li><code>Save and add another</code>: Which will allow you to save the current organisation manager and move forward with adding a new one.</li> <li><code>Save and continue editing</code>: Which will allow you to save the current organisation manager and then edit the current manager.</li> <li><code>SAVE</code>: Allows you to save and then redirects you back to the <code>Organisation representative</code> page and displays a success message.         </li> </ul>"},{"location":"administrator/guide/manage-organisations/#managing-organisation-representatives","title":"Managing Organisation Representative(s)","text":"<p>If you would like to change any details regarding an organisation representative (e.g. their organisation or the user acting as a representative), you can click on 1\ufe0f\u20e3 their name in the list on the <code>Organisation representatives</code> page.</p> <p></p> <p>This will redirect you to the <code>Change Organisation Representative</code> page. On this page you can change the representative's organisation using 1\ufe0f\u20e3 the <code>Organisation</code> dropdown menu, or change the representative for the organisation using 2\ufe0f\u20e3 the <code>User</code> dropdown menu.</p> <p></p> <p>Once you have made your necessary changes you can click on 1\ufe0f\u20e3 any one of the three save options or click on 2\ufe0f\u20e3 the <code>Delete</code> button to remove the Organisation representative.</p> <p></p> <p>The three save options will have different actions:</p> <ul> <li><code>Save and add another</code>: Which will allow you to save the current organisation manager and move forward with adding a new one.</li> <li><code>Save and continue editing</code>: Which will allow you to save the current organisation manager and then edit the current manager.</li> <li><code>SAVE</code>: Allows you to save and then redirects you back to the <code>Organisation representative</code> page and displays a success message.         </li> </ul> <p>If you clicked on the <code>Delete</code> button, you will be redirected to a page where you can either 1\ufe0f\u20e3 confirm deleting the representative or 2\ufe0f\u20e3 cancel and return to the list of representatives.</p> <p></p> <p>If you confirm the deletion of the representative then you will be redirected back to the <code>Organisation representative</code> page and shown a success message.</p> <p></p>"},{"location":"administrator/guide/manage-organisations/#deleting-representatives","title":"Deleting Representative(s)","text":"<p>If you would like to delete a representative, or multiple representatives, you can do so from the <code>Organisation representative</code> page. First you select the representative(s) you would like to remove by checking 1\ufe0f\u20e3 the boxes next to their name(s).</p> <p>Note: Clicking on the topmost checkbox will select all of the representatives.</p> <p></p> <p>Then you click on 1\ufe0f\u20e3 the <code>Action</code> dropdown menu, select 2\ufe0f\u20e3 the <code>Delete selected Organisation representatives</code> option, and then click on 3\ufe0f\u20e3 the <code>Go</code> button.</p> <p></p> <p>This will redirect you to a page where you can either 1\ufe0f\u20e3 confirm deleting the representative(s) or 2\ufe0f\u20e3 cancel and return to the list of representatives. Depending on the number of representatives you are deleting the Summary and Objects will automatically be updated.</p> <p></p> <p>If you confirm the deletion of the representative then you will be redirected back to the <code>Organisation representatives</code> page and shown a success message.</p> <p></p>"},{"location":"administrator/guide/manage-organisations/#organisation-users","title":"Organisation Users","text":"<p>If you clicked on the <code>Organisation users</code> link on the landing page, you will be redirected to a page that has 1\ufe0f\u20e3 a list of the platform's organisation users and their respective organisations. The organisation users are users who are registered on the platform and are part of one, or more, organisation(s).</p> <p></p>"},{"location":"administrator/guide/manage-organisations/#search-for-organisation-users","title":"Search for Organisation User(s)","text":"<p>If you do not see the user you would like to see in the list due to the length of the list, you can utilise the <code>Search</code> functionality. To do so, click on 1\ufe0f\u20e3 the <code>Search</code> field and type a few characters (i.e. letters in the user's name), and then click on 2\ufe0f\u20e3 the <code>Search</code> button to filter the list of users.</p> <p></p> <p>If the user you are looking for is still not there, then you will need to follow the steps below to add them.</p>"},{"location":"administrator/guide/manage-organisations/#add-organisation-users","title":"Add Organisation User(s)","text":"<p>If you would like to add another registered user as an organisation representative, you can click on 1\ufe0f\u20e3 the <code>ADD ORGANISATION USER</code> button.</p> <p></p> <p>When you click on the <code>ADD ORGANISATION USER</code> button, you will be redirected to the <code>Add Organisation user</code> page. You can then click on 1\ufe0f\u20e3 the <code>Organisation</code> dropdown menu, you will be shown a list of all the current organisations on the platform and you should choose your desired organisation. Having specified an organisation, you can then click on 2\ufe0f\u20e3 the <code>User</code> dropdown menu and select the registered user that you would like to be part of the organisation.</p> <p></p> <p>Note: If the organisation or user is not available in the dropdown menus, then you should follow either the add organisation or add user instructions.</p> <p>Once you have chosen an organisation and a user you have three options to proceed forward:</p> <p></p> <ul> <li><code>Save and add another</code>: Which will allow you to save the current organisation user and move forward with adding a new one.</li> <li><code>Save and continue editing</code>: Which will allow you to save the current organisation user and then edit the current user.</li> <li><code>SAVE</code>: Allows you to save and then redirects you back to the <code>Organisation user</code> page and displays a success message.         </li> </ul>"},{"location":"administrator/guide/manage-organisations/#manage-organisation-users","title":"Manage Organisation User(s)","text":"<p>If you would like to change any details regarding an organisation user (e.g. their organisation or the user associated with the organisation), you can click on 1\ufe0f\u20e3 their name in the list on the <code>Organisation user</code> page.</p> <p></p> <p>This will redirect you to the <code>Change Organisation user</code> page. On this page you can change the user's organisation using 1\ufe0f\u20e3 the <code>Organisation</code> dropdown menu, or change the organisation user using 2\ufe0f\u20e3 the <code>User</code> dropdown menu.</p> <p></p> <p>Once you have made your necessary changes you can click on 1\ufe0f\u20e3 any one of the three save options or click on 2\ufe0f\u20e3 the <code>Delete</code> button to remove the Organisation user.</p> <p></p> <p>The three save options will have different actions:</p> <ul> <li><code>Save and add another</code>: Which will allow you to save the current organisation user and move forward with adding a new one.</li> <li><code>Save and continue editing</code>: Which will allow you to save the current organisation user and then edit the current user.</li> <li><code>SAVE</code>: Allows you to save and then redirects you back to the <code>Organisation user</code> page and displays a success message.         </li> </ul> <p>If you clicked on the <code>Delete</code> button, you will be redirected to a page where you can either 1\ufe0f\u20e3 confirm deleting the user or 2\ufe0f\u20e3 cancel and return to the list of users.</p> <p></p> <p>If you confirm the deletion of the user then you will be redirected back to the <code>Organisation user</code> page and shown a success message.</p> <p></p>"},{"location":"administrator/guide/manage-organisations/#delete-organisation-users","title":"Delete Organisation User(s)","text":"<p>If you would like to delete a user, or multiple users, you can do so from the <code>Organisation user</code> page. First you select the user(s) you would like to remove by checking 1\ufe0f\u20e3 the boxes next to their name(s).</p> <p>Note: Clicking on the topmost checkbox will select all of the users.</p> <p></p> <p>Then you click on 1\ufe0f\u20e3 the <code>Action</code> dropdown menu, select 2\ufe0f\u20e3 the <code>Delete selected Organisation users</code> option, and then click on 3\ufe0f\u20e3 the <code>Go</code> button.</p> <p></p> <p>This will redirect you to a page where you can either 1\ufe0f\u20e3 confirm deleting the user(s) or 2\ufe0f\u20e3 cancel and return to the list of users. Depending on the number of users you are deleting the Summary and Objects will automatically be updated.</p> <p></p> <p>If you confirm the deletion of the user then you will be redirected back to the <code>Organisation users</code> page and shown a success message.</p> <p></p>"},{"location":"administrator/guide/manage-organisations/#organisation-invites","title":"Organisation Invites","text":"<p>If you clicked on the <code>Organisation Invites</code> link on the landing page, you will be redirected to a page that has 1\ufe0f\u20e3 a list of the platform's organisation invites and their respective organisations. The organisation invites are invitations to join the platform, sent from the platform by organisation representatives (or other administrative users) to non-registered users.</p> <p></p>"},{"location":"administrator/guide/manage-organisations/#search-for-organisation-invites","title":"Search for Organisation Invite(s)","text":"<p>To view whether the invited user(s) has(have) joined the platform or not, you can utilise the <code>Search</code> functionality. Start by clicking on 1\ufe0f\u20e3 the <code>Search</code> field and start typing a few characters (i.e. letters in the invitee's email address), and then click on 2\ufe0f\u20e3 the <code>Search</code> button to filter the list of invitations.</p> <p></p> <p>If the invitee you are looking for is still not there, then you will need to follow the steps below to add them.</p>"},{"location":"administrator/guide/manage-organisations/#add-organisation-invites","title":"Add Organisation Invite(s)","text":"<p>To create an invite to an organisation, click on 1\ufe0f\u20e3 the <code>ADD ORGANISATIONINVITES</code> button.</p> <p></p> <p>This will redirect you to the <code>Add OrganisationInvites</code> page, where you should enter the invitee's email address, the organisation you would like them to be a part of, their user role, and what you would like to assign them as within the organisation (e.g. manager or member). When creating an invitation you should leave the <code>Joined</code> field as the default <code>No</code>.</p> <p></p> <p>Note: If the organisation is not available in the dropdown menus, then you should follow the add organisation instructions.</p> <p>Once you have filled in the fields, you have three options to proceed forward:</p> <p></p> <ul> <li><code>Save and add another</code>: Which will allow you to save the current organisation invitation and move forward with adding a new one.</li> <li><code>Save and continue editing</code>: Which will allow you to save the current organisation invitation and then edit the current invitation.</li> <li><code>SAVE</code>: Allows you to save and then redirects you back to the <code>OrganisationInvites</code> page and displays a success message.         </li> </ul>"},{"location":"administrator/guide/manage-organisations/#manage-organisation-invites","title":"Manage Organisation Invite(s)","text":"<p>To make changes to an existing organisation invitation, you can click on 1\ufe0f\u20e3 the email address associated with the invitation.</p> <p></p> <p>This will redirect you to a <code>Change OrganisationInvites</code> page where you can edit the information previously used to populate the invitation, or you can delete the invitation.</p> <p></p> <p>Once you have made your necessary changes you can click on 1\ufe0f\u20e3 any one of the three save options or click on 2\ufe0f\u20e3 the <code>Delete</code> button to remove the Organisation invitation.</p> <p></p> <p>The three save options will have different actions:</p> <ul> <li><code>Save and add another</code>: Which will allow you to save the current organisation invitation and move forward with adding a new one.</li> <li><code>Save and continue editing</code>: Which will allow you to save the current organisation invitation and then edit the current invitation.</li> <li><code>SAVE</code>: Allows you to save and then redirects you back to the <code>OrganisationInvites</code> page and displays a success message.         </li> </ul> <p>If you clicked on the <code>Delete</code> button, you will be redirected to a page where you can either 1\ufe0f\u20e3 confirm deleting the invitation or 2\ufe0f\u20e3 cancel and return to the list of invitations.</p> <p></p> <p>If you confirm the deletion of the invitation then you will be redirected back to the <code>OrganisationInvites</code> page and shown a success message.</p> <p></p>"},{"location":"administrator/guide/manage-organisations/#delete-organisation-invites","title":"Delete Organisation Invite(s)","text":"<p>If you would like to delete a invitation, or multiple invitations, you can do so from the <code>OrganisationInvites</code> page. First you select the invitation(s) you would like to remove by checking 1\ufe0f\u20e3 the boxes next to their email address(es).</p> <p>Note: Clicking on the topmost checkbox will select all of the invitations.</p> <p></p> <p>Then you click on 1\ufe0f\u20e3 the <code>Action</code> dropdown menu, select 2\ufe0f\u20e3 the <code>Delete selected OrganisationInvites</code> option, and then click on 3\ufe0f\u20e3 the <code>Go</code> button.</p> <p></p> <p>This will redirect you to a page where you can either 1\ufe0f\u20e3 confirm deleting the invitation(s) or 2\ufe0f\u20e3 cancel and return to the list of invitations. Depending on the number of invitations you are deleting the Summary and Objects will automatically be updated.</p> <p></p> <p>If you confirm the deletion of the invitation then you will be redirected back to the <code>OrganisationInvites</code> page and shown a success message.</p> <p></p>"},{"location":"administrator/guide/manage-organisations/#organisations","title":"Organisations","text":"<p>If you clicked on the <code>Organisations</code> link on the landing page, you will be redirected to a page that has 1\ufe0f\u20e3 a list of the platform's organisation representatives and their respective organisations. The organisation representatives are the managers of their respective organisations and can manage their organisation.</p> <p></p>"},{"location":"administrator/guide/manage-organisations/#searching-for-organisations","title":"Searching for Organisation(s)","text":"<p>If you do not see the organisation you would like to see in the list due to the length of the list, you can utilise the <code>Search</code> functionality. To do so, click on 1\ufe0f\u20e3 the <code>Search</code> field and type a few characters (i.e. letters in the organisation's name), and then click on 2\ufe0f\u20e3 the <code>Search</code> button to filter the list of organisations.</p> <p></p> <p>If the organisation you are looking for is still not there, then you will need to follow the steps below to add it.</p>"},{"location":"administrator/guide/manage-organisations/#add-organisations","title":"Add Organisation(s)","text":"<p>If you would like to add another organisation, you can click on 1\ufe0f\u20e3 the <code>ADD ORGANISATION</code> button.</p> <p></p> <p>When you click on the <code>ADD ORGANISATION</code> button, you will be redirected to the <code>Add Organisation</code> page. You can then specify the details of the new organisation. These main details you need to include are:</p> <ul> <li><code>Name</code>: This will be the name of the new organisation.</li> <li><code>National</code>: In this dropdown menu you need to specify <code>Yes</code> or <code>No</code>.</li> <li>If the organisation is a national organisation select <code>Yes</code>.</li> <li>If the organisation is only found in a particular province, then select <code>No</code>.</li> <li><code>Province</code>: If you specified <code>Yes</code> for the <code>National</code> field you can ignore this field, however if you specified <code>No</code> for the <code>National</code> field, you will need to select the province from the dropdown list.</li> <li>The three checkboxes are the data permissions you can specify for data uploaded to the new organisation.</li> </ul> <p></p> <p>Disclaimer: Some fields in the image above may not be present for you on the administration page.</p> <p>Once you have provided the details for your organisation you have three options to move forward:</p> <p></p> <ul> <li><code>Save and add another</code>: Which will allow you to save the current organisation and move forward with adding a new one.</li> <li><code>Save and continue editing</code>: Which will allow you to save the current organisation and then edit the current organisation.</li> <li><code>SAVE</code>: Allows you to save and then redirects you back to the <code>Organisation</code> page and displays a success message.         </li> </ul>"},{"location":"administrator/guide/manage-organisations/#managing-organisations_1","title":"Managing Organisation(s)","text":"<p>To make changes to an existing organisation, you can click on 1\ufe0f\u20e3 the name of the organisation.</p> <p></p> <p>This will redirect you to a <code>Change Organisation</code> page where you can edit the information previously used to populate the invitation, or you can delete the invitation.</p> <p></p> <p>Disclaimer: Some fields in the image above may not be present for you on the administration page.</p> <p>Once you have made your necessary changes you can click on 1\ufe0f\u20e3 any one of the three save options or click on 2\ufe0f\u20e3 the <code>Delete</code> button to remove the Organisation invitation.</p> <p></p> <p>The three save options will have different actions:</p> <ul> <li><code>Save and add another</code>: Which will allow you to save the current organisation invitation and move forward with adding a new one.</li> <li><code>Save and continue editing</code>: Which will allow you to save the current organisation invitation and then edit the current invitation.</li> <li><code>SAVE</code>: Allows you to save and then redirects you back to the <code>Organisations</code> page and displays a success message.         </li> </ul> <p>If you clicked on the <code>Delete</code> button, you will be redirected to a page where you can either 1\ufe0f\u20e3 confirm deleting the invitation or 2\ufe0f\u20e3 cancel and return to the list of invitations.</p> <p></p> <p>If you confirm the deletion of the invitation then you will be redirected back to the <code>Organisations</code> page and shown a success message.</p> <p></p>"},{"location":"administrator/guide/manage-organisations/#removing-organisations","title":"Removing Organisation(s)","text":"<p>If you would like to delete an organisation, or multiple organisations, you can do so from the <code>Organisations</code> page. First you select the organisation(s) you would like to remove by checking 1\ufe0f\u20e3 the boxes next to the organisation(s) name(s).</p> <p>Note: Clicking on the topmost checkbox will select all of the organisations.</p> <p></p> <p>Then you click on 1\ufe0f\u20e3 the <code>Action</code> dropdown menu, select 2\ufe0f\u20e3 the <code>Delete selected Organisations</code> option, and then click on 3\ufe0f\u20e3 the <code>Go</code> button.</p> <p></p> <p>This will redirect you to a page where you can either 1\ufe0f\u20e3 confirm deleting the organisation(s) or 2\ufe0f\u20e3 cancel and return to the list of organisations. Depending on the number of organisations you are deleting the Summary and Objects will automatically be updated.</p> <p></p> <p>If you confirm the deletion of the organisation(s) then you will be redirected back to the <code>Organisations</code> page and shown a success message.</p> <p></p>"},{"location":"administrator/guide/manage-organisations/#alternative-way-to-add-organisations","title":"Alternative way to add Organisation(s)","text":"<p>If you are on the <code>Add Organisation representative</code> page and the organisation you would like to choose is not available in the <code>Organisation</code> dropdown menu, you can click on 1\ufe0f\u20e3 the green plus.</p> <p>Note: The logic in this workflow (i.e. clicking on the green plus and then adding a new user) is also applicable on the <code>Add Organisation User</code> page.</p> <p></p> <p>This will cause a popup window to open, where you can specify the details of the new organisation you are adding and then click on 1\ufe0f\u20e3 the <code>SAVE</code> button. For more information regarding populating this form, follow the add organisations instructions.</p> <p></p>"},{"location":"administrator/guide/manage-organisations/#alternative-way-to-add-users","title":"Alternative way to add User(s)","text":"<p>If you are on the <code>Add Organisation representative</code> page and the user you would like to choose is not available in the <code>User</code> dropdown menu, you can click on 1\ufe0f\u20e3 the green plus.</p> <p>Note: The logic in this workflow (i.e. clicking on the green plus and then adding a new organisation) is also applicable on the <code>Add Organisation User</code> and <code>Add OrganisationInvites</code>pages.</p> <p></p> <p>This will cause a popup window to open, where you can specify the details of the new user you are adding and then click on 1\ufe0f\u20e3 the <code>SAVE</code> button. For more information regarding populating this form, read through the Adding User(s) section in the managing users documentation.</p> <p></p>"},{"location":"administrator/guide/manage-taxa/","title":"IDS SAWPS","text":""},{"location":"administrator/guide/manage-taxa/#managing-taxa","title":"Managing Taxa","text":"<p>This sections describes how administrators can manage taxa ( i.e. add, remove, modify, etc.) on the SAWPS platform.</p>"},{"location":"administrator/guide/manage-taxa/#where-to-manage-taxa","title":"Where to Manage Taxa","text":"<p>After you have logged into the administration site, scroll down on the landing page until you see 1\ufe0f\u20e3 the SPECIES section. In this section you will see 2\ufe0f\u20e3 the two links to the various pages required to manage taxa.</p> <p></p>"},{"location":"administrator/guide/manage-taxa/#taxa","title":"Taxa","text":"<p>If you clicked on the <code>Taxa</code> link on the landing page, you will be redirected to a page that has 1\ufe0f\u20e3 a list of the platform's taxa and their respective common names.</p> <p></p>"},{"location":"administrator/guide/manage-taxa/#search-for-taxontaxa","title":"Search for Taxon/Taxa","text":"<p>If you do not see the taxon you would like to see in the list due to the length of the list, you can utilise the <code>Search</code> functionality. To do so, click on 1\ufe0f\u20e3 the <code>Search</code> field and type a few characters (i.e. letters in the taxon's scientific name), and then click on 2\ufe0f\u20e3 the <code>Search</code> button to filter the list of taxa.</p> <p></p> <p>Before adding a taxon please ensure that you have double-checked that the taxon is not already present on the platform. If the taxon you are looking for is still not there, then you will need to follow the steps below to add it.</p>"},{"location":"administrator/guide/manage-taxa/#add-taxontaxa","title":"Add Taxon/Taxa","text":"<p>Adding a new species to the platform requires several steps of adding the various levels of the taxonomic hierarchy. Many of the higher levels of taxonomic rank (e.g. Kingdom) should already be present on the platform but some of the lower levels (e.g. Species) will need to be added as time progresses.</p> <p>Before adding a taxon please ensure that you have double-checked that the taxon is not already present on the platform. If the taxon already exists on the platform, an error message will be displayed.</p> <p></p> <p>To add a new species you will always work your way down the taxon hierarchy from Kingdom down to Species. Any time you add a new species you will always need to check that all of the necessary higher taxonomic levels are present. The steps start with adding a new Kingdom (or just making sure the Kingdom is present on the platform).</p>"},{"location":"administrator/guide/manage-taxa/#adding-a-kingdom","title":"Adding a Kingdom","text":"<p>If you would like to add another sanctioned Kingdom, you can click on 1\ufe0f\u20e3 the <code>ADD TAXON</code> button.</p> <p></p> <p>When you click on the <code>ADD TAXON</code> button, you will be redirected to the <code>Add Taxon</code> page. You should fill in 1\ufe0f\u20e3 the information relating to the taxon, namely:</p> <ul> <li>Scientific Name: Specify the Kingdom's Latin Name (e.g. Animalia or Plantae).</li> <li>Taxon Rank: Select <code>Kingdom</code> from the dropdown list.</li> </ul> <p>You need not specify any other fields for a kingdom.</p> <p></p> <p>Once you have filled in the information, you have three options to proceed forward:</p> <p></p> <ul> <li><code>Save and add another</code>: Which will allow you to save the taxon and move forward with adding a new one.</li> <li><code>Save and continue editing</code>: Which will allow you to save the taxon and then edit the taxon.</li> <li><code>SAVE</code>: Allows you to save and then redirects you back to the <code>Taxa</code> page and displays a success message.         </li> </ul>"},{"location":"administrator/guide/manage-taxa/#adding-other-levels","title":"Adding Other Levels","text":"<p>Note: Always check that the parent level for the taxon you are adding is present on the platform (use the search functionality) before you try to add it (i.e. work your way down the taxonomic hierarchy from Phylum down to Genus).</p> <p>If you would like to add another sanctioned Phylum, Class, Order, Family, or Genus you can click on 1\ufe0f\u20e3 the <code>ADD TAXON</code> button.</p> <p></p> <p>When you click on the <code>ADD TAXON</code> button, you will be redirected to the <code>Add Taxon</code> page. You should fill in 1\ufe0f\u20e3 the information relating to the taxon, namely:</p> <ul> <li>Scientific Name: Specify the Phylum, Class, Order, Family, or Genus Latin Name (e.g. Phylum = Chordata or Class = Carnivora).</li> <li>Taxon rank: Select the relevant taxon rank (i.e. the same word as the taxon so if you are adding a Phylum uou should choose Phylum in the dropdown menu).</li> <li>Parent: Select the taxon level that would be the parent for the current taxon level (e.g. Phylum's parent is Kingdom, Class's parent is Phylum, Order's parent is Class, Family's parent is Order, or Genus' parent is Family)</li> </ul> <p>You need not specify any other fields for these taxon levels.</p> <p></p> <p>Once you have filled in the information, you have three options to proceed forward:</p> <p></p> <ul> <li><code>Save and add another</code>: Which will allow you to save the taxon and move forward with adding a new one.</li> <li><code>Save and continue editing</code>: Which will allow you to save the taxon and then edit the taxon.</li> <li><code>SAVE</code>: Allows you to save and then redirects you back to the <code>Taxa</code> page and displays a success message.         </li> </ul>"},{"location":"administrator/guide/manage-taxa/#adding-a-new-species","title":"Adding a new Species","text":"<p>Note: Always check that the Genus in the level above the Species you are adding is present on the platform (use the search functionality).</p> <p>If you would like to add another sanctioned Species, you can click on 1\ufe0f\u20e3 the <code>ADD TAXON</code> button.</p> <p></p> <p>When you click on the <code>ADD TAXON</code> button, you will be redirected to the <code>Add Taxon</code> page. You should fill in 1\ufe0f\u20e3 the information relating to the taxon, namely:</p> <ul> <li>Scientific Name: You need to specify the fill scientific name of the species.</li> <li>Common name verbatim: You need to specify the full common name of the species.</li> <li>Colour Variant: choose an option from the dropdown menu.</li> <li>Infraspecific epithet: This is the third word in the scientific name for subspecies.</li> <li>Taxon rank: Specify <code>Species</code></li> <li>Parent: Specify <code>Genus</code></li> </ul> <p>After you have filled in that information you can move on to managing 2\ufe0f\u20e3 the settings for the species, namely:</p> <ul> <li>Show on front page checkbox: Toggling this changes whether or not the species' graph is displayed on the landing page of the platform.</li> <li>Is selected checkbox: Toggling this changes whether or not the species is selected.</li> <li>Front page order: Adjusting this will change where on the landing page of the platform the species appears.</li> <li>Colour: This will change the colour of the graphs and choropleth map display (i.e. the colours for the various intervals of the species' count)</li> <li>Graph icon: Set this to be the icon above the graphs for the species (e.g. a lion for the lions graph).</li> </ul> <p></p> <p>Once you have filled in the information, you have three options to proceed forward:</p> <p></p> <ul> <li><code>Save and add another</code>: Which will allow you to save the species and move forward with adding a new one.</li> <li><code>Save and continue editing</code>: Which will allow you to save the species and then edit the species.</li> <li><code>SAVE</code>: Allows you to save and then redirects you back to the <code>Taxa</code> page and displays a success message.         </li> </ul>"},{"location":"administrator/guide/manage-taxa/#manage-taxontaxa","title":"Manage Taxon/Taxa","text":"<p>If you would like to change any details regarding a taxon, you can click on 1\ufe0f\u20e3 the scientific name in the list on the <code>Taxon</code> page.</p> <p></p> <p>This will redirect you to the <code>Change Taxon</code> page. On this page you can change:</p> <ul> <li>Scientific Name: You need to specify the fill scientific name of the species.</li> <li>Common name verbatim: You need to specify the full common name of the species.</li> <li>Colour Variant: choose an option from the dropdown menu.</li> <li>Infraspecific epithet: This is the third word in the scientific name for subspecies.</li> <li>Taxon rank: Specify <code>Species</code></li> <li>Parent: Specify <code>Genus</code></li> <li>Show on front page checkbox: Toggling this changes whether or not the species' graph is displayed on the landing page of the platform.</li> <li>Is selected checkbox: Toggling this changes whether or not the species is selected.</li> <li>Front page order: Adjusting this will change where on the landing page of the platform the species appears.</li> <li>Colour: This will change the colour of the graphs and choropleth map display (i.e. the colours for the various intervals of the species' count)</li> <li>Graph icon: Set this to be the icon above the graphs for the species (e.g. a lion for the lions graph).</li> </ul> <p>Note: Not all of the above points are applicable to every taxon. Only edit them if they are applicable to the specific taxon using the logic laid out in the Add Taxon/Taxa section and subsections.</p> <p></p> <p>Once you have made your necessary changes you can click on 1\ufe0f\u20e3 any one of the three save options or click on 2\ufe0f\u20e3 the <code>Delete</code> button to remove the taxon.</p> <p></p> <p>The three save options will have different actions:</p> <ul> <li><code>Save and add another</code>: Which will allow you to save the current taxon and move forward with adding a new one.</li> <li><code>Save and continue editing</code>: Which will allow you to save the current taxon and then edit the current taxon.</li> <li><code>SAVE</code>: Allows you to save and then redirects you back to the <code>Taxa</code> page and displays a success message.         </li> </ul> <p>If you clicked on the <code>Delete</code> button, you will be redirected to a page where you can either 1\ufe0f\u20e3 confirm deleting the taxon or 2\ufe0f\u20e3 cancel and return to the list of taxa.</p> <p></p> <p>If you confirm the deletion of the taxon then you will be redirected back to the <code>Taxa</code> page and shown a success message.</p> <p></p>"},{"location":"administrator/guide/manage-taxa/#delete-taxontaxa","title":"Delete Taxon/Taxa","text":"<p>If you would like to delete a taxon, or multiple taxa, you can do so from the <code>Taxa</code> page. First you select the taxon/taxa you would like to remove by checking 1\ufe0f\u20e3 the boxes next to the scientific name(s).</p> <p>Note: Clicking on the topmost checkbox will select all of the taxa.</p> <p></p> <p>Then you click on 1\ufe0f\u20e3 the <code>Action</code> dropdown menu, select 2\ufe0f\u20e3 the <code>Delete selected taxa</code> option, and then click on 3\ufe0f\u20e3 the <code>Go</code> button.</p> <p></p> <p>This will redirect you to a page where you can either 1\ufe0f\u20e3 confirm deleting the taxon/taxa or 2\ufe0f\u20e3 cancel and return to the list of taxa. Depending on the number of taxa you are deleting the Summary and Objects will automatically be updated.</p> <p></p> <p>If you confirm the deletion of the taxon/taxa then you will be redirected back to the <code>Taxa</code> page and shown a success message.</p> <p></p>"},{"location":"administrator/guide/manage-taxa/#taxon-ranks","title":"Taxon Ranks","text":"<p>If you clicked on the <code>Taxon Ranks</code> link on the landing page, you will be redirected to a page that has 1\ufe0f\u20e3 a list of the platform's taxon ranks.</p> <p></p>"},{"location":"administrator/guide/manage-taxa/#search-for-taxon-ranks","title":"Search for Taxon Rank(s)","text":"<p>If you do not see the taxon rank you would like to see in the list due to the length of the list, you can utilise the <code>Search</code> functionality. To do so, click on 1\ufe0f\u20e3 the <code>Search</code> field and type a few characters (i.e. letters in the taxon rank's name), and then click on 2\ufe0f\u20e3 the <code>Search</code> button to filter the list of taxon ranks.</p> <p></p> <p>If the taxon rank you are looking for is still not there, then you will need to follow the steps below to add it.</p>"},{"location":"administrator/guide/manage-taxa/#add-taxon-ranks","title":"Add Taxon Rank(s)","text":"<p>Note: You should not need to add a <code>Taxon Rank</code> unless one has been deleted previously.</p> <p>If you would like to add another sanctioned taxon rank, you can click on 1\ufe0f\u20e3 the <code>ADD TAXON RANK</code> button.</p> <p></p> <p>When you click on the <code>ADD TAXON RANK</code> button, you will be redirected to the <code>Add Taxon Rank</code> page. You should fill in 1\ufe0f\u20e3 the taxon rank name:</p> <p></p> <p>Once you have filled in the taxon rank name, you have three options to proceed forward:</p> <p></p> <ul> <li><code>Save and add another</code>: Which will allow you to save the current taxon rank and move forward with adding a new one.</li> <li><code>Save and continue editing</code>: Which will allow you to save the current taxon rank and then edit the current manager.</li> <li><code>SAVE</code>: Allows you to save and then redirects you back to the <code>Taxon Ranks</code> page and displays a success message.         </li> </ul>"},{"location":"administrator/guide/manage-taxa/#manage-taxon-ranks","title":"Manage Taxon Rank(s)","text":"<p>Note: You should not need to manage any <code>Taxon Rank</code> unless one has been changed incorrectly previously.</p> <p>If you would like to change any details regarding a taxon rank, you can click on 1\ufe0f\u20e3 the taxon rank's ID in the list on the <code>Taxon Rank</code> page.</p> <p></p> <p>This will redirect you to the <code>Change Taxon Ranks</code> page. On this page you can change the taxon rank's name.</p> <p></p> <p>Once you have made your necessary changes you can click on 1\ufe0f\u20e3 any one of the three save options or click on 2\ufe0f\u20e3 the <code>Delete</code> button to remove the taxon rank.</p> <p></p> <p>The three save options will have different actions:</p> <ul> <li><code>Save and add another</code>: Which will allow you to save the current taxon rank and move forward with adding a new one.</li> <li><code>Save and continue editing</code>: Which will allow you to save the current taxon rank and then edit the current taxon rank.</li> <li><code>SAVE</code>: Allows you to save and then redirects you back to the <code>Taxon Ranks</code> page and displays a success message.         </li> </ul> <p>If you clicked on the <code>Delete</code> button, you will be redirected to a page where you can either 1\ufe0f\u20e3 confirm deleting the taxon rank or 2\ufe0f\u20e3 cancel and return to the list of taxon ranks.</p> <p></p> <p>If you confirm the deletion of the taxon rank then you will be redirected back to the <code>Taxon Ranks</code> page and shown a success message.</p> <p></p>"},{"location":"administrator/guide/manage-taxa/#delete-taxon-ranks","title":"Delete Taxon Rank(s)","text":"<p>Note: You should not need to delete any <code>Taxon Rank</code>.</p> <p>If you would like to delete a taxon rank, or multiple taxon ranks, you can do so from the <code>Taxon Ranks</code> page. First you select the taxon rank(s) you would like to remove by checking 1\ufe0f\u20e3 the boxes next to the taxon rank ID(s).</p> <p>Note: Clicking on the topmost checkbox will select all of the taxon ranks.</p> <p></p> <p>Then you click on 1\ufe0f\u20e3 the <code>Action</code> dropdown menu, select 2\ufe0f\u20e3 the <code>Delete selected taxon ranks</code> option, and then click on 3\ufe0f\u20e3 the <code>Go</code> button.</p> <p></p> <p>This will redirect you to a page where you can either 1\ufe0f\u20e3 confirm deleting the taxon rank(s) or 2\ufe0f\u20e3 cancel and return to the list of taxon ranks. Depending on the number of taxon ranks you are deleting the Summary and Objects will automatically be updated.</p> <p></p> <p>If you confirm the deletion of the taxon rank(s) then you will be redirected back to the <code>Taxon Ranks</code> page and shown a success message.</p> <p></p>"},{"location":"administrator/guide/manage-upload-data/","title":"IDS SAWPS","text":""},{"location":"administrator/guide/manage-upload-data/#managing-uploaded-data","title":"Managing Uploaded Data","text":"<p>This sections describes how administrators can manage the uploaded data (e.g. properties, their permissions, etc.) on the SAWPS platform.</p>"},{"location":"administrator/guide/manage-upload-data/#where-to-manage-uploaded-data","title":"Where to Manage Uploaded Data","text":"<p>There are two sections on the administration site which relate to managing uploaded data. The Property and the Population Data sections.</p>"},{"location":"administrator/guide/manage-upload-data/#property","title":"Property","text":"<p>After you have logged into the administration site, scroll down on the landing page until you see 1\ufe0f\u20e3 the PROPERTY section. In this section you will see 2\ufe0f\u20e3 the two links to the various pages required to manage properties.</p> <p></p>"},{"location":"administrator/guide/manage-upload-data/#parcels-page","title":"Parcels Page","text":"<p>If you clicked on the <code>Parcels</code> link on the landing page, you will be redirected to a page that has 1\ufe0f\u20e3 a list of all of the parcels on the platform along with their respective SG numbers.</p> <p></p>"},{"location":"administrator/guide/manage-upload-data/#search-parcels","title":"Search Parcels","text":"<p>If you do not see the parcel you would like to see in the list due to the length of the list, you can utilise the <code>Search</code> functionality. To do so, click on 1\ufe0f\u20e3 the <code>Search</code> field and type a few characters (i.e. letters or numbers in the parcel's SG Number), and then click on 2\ufe0f\u20e3 the <code>Search</code> button to filter the list of parcels.</p> <p></p> <p>If the parcel you are looking for is still not there, then you can follow the steps below to add it.</p>"},{"location":"administrator/guide/manage-upload-data/#add-parcels","title":"Add Parcels","text":"<p>Note: Do not add parcels here unless it is absolutely necessary and you have the exact information for the parcel.</p> <p>If you would like to add a parcel, you can click on 1\ufe0f\u20e3 the <code>ADD PARCEL</code> button.</p> <p></p> <p>When you click on the <code>ADD PARCEL</code> button, you will be redirected to the <code>Add Parcel</code> page. You should fill in 1\ufe0f\u20e3 the information relating to the parcel, namely:</p> <ul> <li>SG number: This is the Surveyor General (SG) number/identifier given to the parcel.</li> <li>Year: The date on which you are adding the parcel, or on which the parcel should have been added.</li> <li>Property: Select a property from the dropdown menu containing all properties currently on the site. If your desired property isn't available then you will need to either; add it from the frontend (i.e. the SAWPS site) or follow the Add Properties section.</li> <li>Parcel Type: Select an option from the dropdown menu.</li> <li>Farm Number: This can be left as the default <code>0</code>.</li> <li>Farm Name: This should be the name associated with the farm.</li> <li>Sub division number: This can be left as the default <code>0</code> unless it is known.</li> <li>Source: This needs to be specified as one of: <code>erf</code>, <code>holding</code>, <code>farm_portion</code>, or <code>parent_farm</code>.</li> <li>Source id: This should be the unique ID associated with the parcel.</li> </ul> <p>Note: it is easier to add a property on the frontend (i.e. the SAWPS site) and let the platform automatically handle the associated parcel information.</p> <p></p> <p>Once you have filled in the information, you have three options to proceed forward:</p> <p></p> <ul> <li><code>Save and add another</code>: Which will allow you to save the parcel and move forward with adding a new one.</li> <li><code>Save and continue editing</code>: Which will allow you to save the parcel and then edit the parcel.</li> <li><code>SAVE</code>: Allows you to save and then redirects you back to the <code>Parcels</code> page and displays a success message.         </li> </ul>"},{"location":"administrator/guide/manage-upload-data/#manage-parcels","title":"Manage Parcels","text":"<p>If you would like to change any details regarding a parcel, you can click on 1\ufe0f\u20e3 the SG Number in the list on the <code>Parcels</code> page.</p> <p></p> <p>This will redirect you to the <code>Change Parcel</code> page. On this page you can change:</p> <ul> <li>SG number: This is the Surveyor General (SG) number/identifier given to the parcel.</li> <li>Year: The date on which the parcel was added.</li> <li>Property: Select a property from the dropdown menu containing all properties currently on the site. If your desired property isn't available then you will need to either; add it from the frontend (i.e. the SAWPS site) or follow the Add Properties section.</li> <li>Parcel Type: Select an option from the dropdown menu.</li> <li>Farm Number: This can be left as the default <code>0</code>.</li> <li>Farm Name: This should be the name associated with the farm.</li> <li>Sub division number: This can be left as the default <code>0</code> unless it is known.</li> <li>Source: This needs to be specified as one of: <code>erf</code>, <code>holding</code>, <code>farm_portion</code>, or <code>parent_farm</code>.</li> <li>Source id: This should be the unique ID associated with the parcel.</li> </ul> <p></p> <p>Once you have made your necessary changes you can click on 1\ufe0f\u20e3 any one of the three save options or click on 2\ufe0f\u20e3 the <code>Delete</code> button to remove the parcel.</p> <p></p> <p>The three save options will have different actions:</p> <ul> <li><code>Save and add another</code>: Which will allow you to save the current parcel and move forward with adding a new one.</li> <li><code>Save and continue editing</code>: Which will allow you to save the current parcel and then edit the current parcel.</li> <li><code>SAVE</code>: Allows you to save and then redirects you back to the <code>Parcels</code> page and displays a success message.         </li> </ul> <p>If you clicked on the <code>Delete</code> button, you will be redirected to a page where you can either 1\ufe0f\u20e3 confirm deleting the parcel or 2\ufe0f\u20e3 cancel and return to the list of parcels.</p> <p></p> <p>If you confirm the deletion of the parcel then you will be redirected back to the <code>Parcels</code> page and shown a success message.</p> <p></p>"},{"location":"administrator/guide/manage-upload-data/#delete-parcels","title":"Delete Parcels","text":"<p>Note: You should not need to delete any <code>Parcels</code>.</p> <p>If you would like to delete a parcel, or multiple parcels, you can do so from the <code>Parcels</code> page. First you select the parcel(s) you would like to remove by checking 1\ufe0f\u20e3 the boxes next to the SG Number(s).</p> <p>Note: Clicking on the topmost checkbox will select all of the parcels.</p> <p></p> <p>Then you click on 1\ufe0f\u20e3 the <code>Action</code> dropdown menu, select 2\ufe0f\u20e3 the <code>Delete selected parcels</code> option, and then click on 3\ufe0f\u20e3 the <code>Go</code> button.</p> <p></p> <p>This will redirect you to a page where you can either 1\ufe0f\u20e3 confirm deleting the parcel(s) or 2\ufe0f\u20e3 cancel and return to the list of parcels. Depending on the number of parcels you are deleting the Summary and Objects will automatically be updated.</p> <p></p> <p>If you confirm the deletion of the parcel(s) then you will be redirected back to the <code>Parcels</code> page and shown a success message.</p> <p></p>"},{"location":"administrator/guide/manage-upload-data/#properties-page","title":"Properties Page","text":"<p>If you clicked on the <code>Properties</code> link on the landing page, you will be redirected to a page that has 1\ufe0f\u20e3 a list of all of the properties on the platform along with their respective names.</p> <p></p>"},{"location":"administrator/guide/manage-upload-data/#search-properties","title":"Search Properties","text":"<p>If you do not see the property you would like to see in the list due to the length of the list, you can utilise the <code>Search</code> functionality. To do so, click on 1\ufe0f\u20e3 the <code>Search</code> field and type a few characters (i.e. letters or numbers in the property's name), and then click on 2\ufe0f\u20e3 the <code>Search</code> button to filter the list of properties.</p> <p></p>"},{"location":"administrator/guide/manage-upload-data/#add-properties","title":"Add Properties","text":"<p>New properties should be added from the frontend (i.e. the SAWPS site) due to the fact that adding a new property will update multiple tables in the database. You can follow the Data Upload instructions. Just ensure that you have the correct organisation selected as your active organisation before creating the new property.</p>"},{"location":"administrator/guide/manage-upload-data/#manage-properties","title":"Manage Properties","text":"<p>If you would like to change any details regarding a property, you can click on 1\ufe0f\u20e3 the property's name in the list on the <code>Parcels</code> page.</p> <p></p> <p>This will redirect you to the <code>Change Property</code> page. On this page you can change multiple details relating to the property. It is not recommended to make changes to the geometry, or centroid, unless it is to remove an incorrect property boundary.</p> <p></p> <p>Once you have made your necessary changes, scroll down and then you can click on 1\ufe0f\u20e3 any one of the three save options or click on 2\ufe0f\u20e3 the <code>Delete</code> button to remove the property.</p> <p></p> <p>The three save options will have different actions:</p> <ul> <li><code>Save and add another</code>: Which will allow you to save the current property and move forward with adding a new one.</li> <li><code>Save and continue editing</code>: Which will allow you to save the current property and then edit the current property.</li> <li><code>SAVE</code>: Allows you to save and then redirects you back to the <code>Properties</code> page and displays a success message.         </li> </ul> <p>If you clicked on the <code>Delete</code> button, you will be redirected to a page where you can either 1\ufe0f\u20e3 confirm deleting the property or 2\ufe0f\u20e3 cancel and return to the list of properties.</p> <p></p> <p>If you confirm the deletion of the property then you will be redirected back to the <code>Properties</code> page and shown a success message.</p> <p></p>"},{"location":"administrator/guide/manage-upload-data/#delete-properties","title":"Delete Properties","text":"<p>If you would like to delete a property, or multiple properties, you can do so from the <code>Properties</code> page. First you select the property/properties you would like to remove by checking 1\ufe0f\u20e3 the boxes next to the property name(s).</p> <p>Note: Clicking on the topmost checkbox will select all of the properties.</p> <p></p> <p>Then you click on 1\ufe0f\u20e3 the <code>Action</code> dropdown menu, select 2\ufe0f\u20e3 the <code>Delete selected properties</code> option, and then click on 3\ufe0f\u20e3 the <code>Go</code> button.</p> <p></p> <p>This will redirect you to a page where you can either 1\ufe0f\u20e3 confirm deleting the property/properties or 2\ufe0f\u20e3 cancel and return to the list of properties. Depending on the number of properties you are deleting the Summary and Objects will automatically be updated.</p> <p></p> <p>If you confirm the deletion of the property/properties then you will be redirected back to the <code>Properties</code> page and shown a success message.</p> <p></p>"},{"location":"administrator/guide/manage-upload-data/#population-data","title":"Population Data","text":"<p>After you have logged into the administration site, scroll down on the landing page until you see 1\ufe0f\u20e3 the POPULATION_DATA section. In this section you will see 2\ufe0f\u20e3 the two links to the various pages required to manage population data.</p> <p></p>"},{"location":"administrator/guide/manage-upload-data/#annual-populations-page","title":"Annual Populations Page","text":"<p>If you clicked on the <code>Annual Populations</code> link on the landing page, you will be redirected to a page that has 1\ufe0f\u20e3 a list of all of the parcels on the platform along with their respective SG numbers.</p> <p></p>"},{"location":"administrator/guide/manage-upload-data/#search-annual-populations","title":"Search Annual Populations","text":"<p>If you do not see the annual population (indicated by a property name and then a year column) you would like to see in the list due to the length of the list, you can utilise the <code>Search</code> functionality. To do so, click on 1\ufe0f\u20e3 the <code>Search</code> field and type a few characters (i.e. letters in the property's name), and then click on 2\ufe0f\u20e3 the <code>Search</code> button to filter the list of annual population.</p> <p></p> <p>If the annual population you are looking for is still not there, then you will need to follow the steps below to add it.</p>"},{"location":"administrator/guide/manage-upload-data/#add-annual-populations","title":"Add Annual Populations","text":"<p>If you would like to add an annual population, you can click on 1\ufe0f\u20e3 the <code>ADD ANNUAL POPULATION</code> button.</p> <p></p> <p>When you click on the <code>ADD ANNUAL POPULATION</code> button, you will be redirected to the <code>Add Annual Population</code> page. You should fill in 1\ufe0f\u20e3 the required fields. These are:</p> <ul> <li>Year: The year of the population record.</li> <li>Owned species: The property on which the population resides.</li> <li>User: The platform user who owns the property.</li> <li>Taxon: The species latin name.</li> <li>Property: The property on which the population resides.</li> <li>Total: The total number of individuals (e.g. animals) found on the property.</li> <li>Survey method: Choose an option from the dropdown menu.</li> <li>Open close system: Choose an option from the dropdown menu.</li> <li>Population status: Choose an option from the dropdown menu.</li> <li>Population estimate category: Choose an option from the dropdown menu.</li> <li>Sampling effort coverage: Choose an option from the dropdown menu.</li> </ul> <p></p> <p>Once you have filled in the necessary information, you have three options to proceed forward:</p> <p></p> <ul> <li><code>Save and add another</code>: Which will allow you to save the current annual population and move forward with adding a new one.</li> <li><code>Save and continue editing</code>: Which will allow you to save the current annual population and proceed with editing the current annual population.</li> <li><code>SAVE</code>: Allows you to save the current annual population and then redirects you back to the <code>Annual Populations</code> page and displays a success message.     </li> </ul>"},{"location":"administrator/guide/manage-upload-data/#manage-annual-populations","title":"Manage Annual Populations","text":"<p>If you would like to change any details regarding an annual population, you can click on 1\ufe0f\u20e3 the annual population's name in the list on the <code>Annual Populations</code> page.</p> <p></p> <p>This will redirect you to the <code>Change Annual Population</code> page. On this page you can change 1\ufe0f\u20e3 multiple fields relating to the annual population. Namely:</p> <ul> <li>Year: The year of the population record.</li> <li>Owned species: The property on which the population resides.</li> <li>User: The platform user who owns the property.</li> <li>Taxon: The species latin name.</li> <li>Property: The property on which the population resides.</li> <li>Total: The total number of individuals (e.g. animals) found on the property.</li> <li>Survey method: Choose an option from the dropdown menu.</li> <li>Open close system: Choose an option from the dropdown menu.</li> <li>Population status: Choose an option from the dropdown menu.</li> <li>Population estimate category: Choose an option from the dropdown menu.</li> <li>Sampling effort coverage: Choose an option from the dropdown menu.</li> </ul> <p></p> <p>Once you have made your necessary changes you can click on 1\ufe0f\u20e3 any one of the three save options or click on 2\ufe0f\u20e3 the <code>Delete</code> button to remove the annual population.</p> <p></p> <p>The three save options will have different actions:</p> <ul> <li><code>Save and add another</code>: Which will allow you to save the current annual population and move forward with adding a new one.</li> <li><code>Save and continue editing</code>: Which will allow you to save the current annual population and proceed with editing the current annual population.</li> <li><code>SAVE</code>: Allows you to save the current annual population and then redirects you back to the <code>Annual Populations</code> page and displays a success message.     </li> </ul> <p>If you clicked on the <code>Delete</code> button, you will be redirected to a page where you can either 1\ufe0f\u20e3 confirm deleting the annual population or 2\ufe0f\u20e3 cancel and return to the list of annual populations.</p> <p></p> <p>If you confirm the deletion of the annual population then you will be redirected back to the <code>Annual Populations</code> page and shown a success message.</p> <p></p>"},{"location":"administrator/guide/manage-upload-data/#delete-annual-populations","title":"Delete Annual Populations","text":"<p>If you would like to delete an annual population, or multiple annual populations, you can do so from the <code>Annual Populations</code> page. First you select the annual population(s) you would like to remove by checking 1\ufe0f\u20e3 the boxes next to the property name(s).</p> <p>Note: Clicking on the topmost checkbox will select all of the properties.</p> <p></p> <p>Then you click on 1\ufe0f\u20e3 the <code>Action</code> dropdown menu, select 2\ufe0f\u20e3 the <code>Delete selected Annual Properties</code> option, and then click on 3\ufe0f\u20e3 the <code>Go</code> button.</p> <p></p> <p>This will redirect you to a page where you can either 1\ufe0f\u20e3 confirm deleting the annual population(s) or 2\ufe0f\u20e3 cancel and return to the list of annual populations. Depending on the number of annual populations you are deleting the Summary and Objects will automatically be updated.</p> <p></p> <p>If you confirm the deletion of the annual population(s) then you will be redirected back to the <code>Annual Populations</code> page and shown a success message.</p> <p></p>"},{"location":"administrator/guide/manage-upload-data/#population-count-per-activities-page","title":"Population Count Per Activities Page","text":"<p>If you clicked on the <code>Population Count Per Activities</code> link on the landing page, you will be redirected to a page that has 1\ufe0f\u20e3 a list of all of the parcels on the platform along with their respective SG numbers.</p> <p></p>"},{"location":"administrator/guide/manage-upload-data/#search-population-count-per-activities","title":"Search Population Count Per Activities","text":"<p>If you do not see the population count per activity (indicated by an ID and then a property name column) you would like to see in the list due to the length of the list, you can utilise the <code>Search</code> functionality. To do so, click on 1\ufe0f\u20e3 the <code>Search</code> field and type a few characters (i.e. letters in the property's name), and then click on 2\ufe0f\u20e3 the <code>Search</code> button to filter the list of annual population.</p> <p></p> <p>If the population count per activity you are looking for is still not there, then you will need to follow the steps below to add it.</p>"},{"location":"administrator/guide/manage-upload-data/#add-population-count-per-activities","title":"Add Population Count Per Activities","text":"<p>It is preferable to add new population counts per activities from the frontend (i.e. the SAWPS site). You can follow the Data Upload instructions. Just ensure that you have the correct property selected as before adding the new population count per activity (e.g. Intake or Offtake).</p> <p>If you would still like to add a new population count per activity, you can click on 1\ufe0f\u20e3 the <code>ADD POPULATION COUNT PER ACTIVITY</code> button.</p> <p></p> <p>When you click on the <code>ADD POPULATION COUNT PER ACTIVITY</code> button, you will be redirected to the <code>Add Population count per activity</code> page. You should fill in 1\ufe0f\u20e3 the required fields. These are:</p> <ul> <li>Year: The year of the new population count per activity.</li> <li>Owned species: The property on which the new population count per activity occurs.</li> <li>Total: The total number of individuals (e.g. animals) involved in the activity.</li> <li>Annual Population: Choose an annual population with a year from the dropdown menu.</li> <li>Activity Type: Choose an option from the dropdown menu.</li> </ul> <p></p> <p>Once you have filled in the necessary information, you have three options to proceed forward:</p> <p></p> <ul> <li><code>Save and add another</code>: Which will allow you to save the current population count per activity and move forward with adding a new one.</li> <li><code>Save and continue editing</code>: Which will allow you to save the current population count per activity and proceed with editing the current population count per activity.</li> <li><code>SAVE</code>: Allows you to save the current population count per activity and then redirects you back to the <code>Population Count Per Activity</code> page and displays a success message.     </li> </ul>"},{"location":"administrator/guide/manage-upload-data/#manage-population-count-per-activities","title":"Manage Population Count Per Activities","text":"<p>If you would like to change any details regarding an population count per activity, you can click on 1\ufe0f\u20e3 the population count per activity's ID in the list on the <code>Population Count Per Activity</code> page.</p> <p></p> <p>This will redirect you to the <code>Add Population count per activity</code> page. On this page you can change multiple fields relating to the population count per activity. Namely:</p> <ul> <li>Year: The year of the new population count per activity.</li> <li>Owned species: The property on which the new population count per activity occurs.</li> <li>Total: The total number of individuals (e.g. animals) involved in the activity.</li> <li>Annual Population: Choose an annual population with a year from the dropdown menu.</li> <li>Activity Type: Choose an option from the dropdown menu.</li> </ul> <p></p> <p>Once you have made your necessary changes you can click on 1\ufe0f\u20e3 any one of the three save options or click on 2\ufe0f\u20e3 the <code>Delete</code> button to remove the population count per activity.</p> <p></p> <p>The three save options will have different actions:</p> <ul> <li><code>Save and add another</code>: Which will allow you to save the current population count per activity and move forward with adding a new one.</li> <li><code>Save and continue editing</code>: Which will allow you to save the current population count per activity and proceed with editing the current population count per activity.</li> <li><code>SAVE</code>: Allows you to save the current population count per activity and then redirects you back to the <code>Population Count Per Activity</code> page and displays a success message.     </li> </ul> <p>If you clicked on the <code>Delete</code> button, you will be redirected to a page where you can either 1\ufe0f\u20e3 confirm deleting the population count per activity or 2\ufe0f\u20e3 cancel and return to the list of population count per activity.</p> <p></p> <p>If you confirm the deletion of the population count per activity then you will be redirected back to the <code>Population Count Per Activity</code> page and shown a success message.</p> <p></p>"},{"location":"administrator/guide/manage-upload-data/#delete-population-count-per-activities","title":"Delete Population Count Per Activities","text":"<p>If you would like to delete a population count per activity, or multiple population count per activities, you can do so from the <code>Population Count Per Activity</code> page. First you select the population count per activity(s) you would like to remove by checking 1\ufe0f\u20e3 the boxes next to the population count per activity ID(s).</p> <p>Note: Clicking on the topmost checkbox will select all of the population count per activities.</p> <p>3</p> <p>Then you click on 1\ufe0f\u20e3 the <code>Action</code> dropdown menu, select 2\ufe0f\u20e3 the <code>Delete selected Annual Properties</code> option, and then click on 3\ufe0f\u20e3 the <code>Go</code> button.</p> <p></p> <p>This will redirect you to a page where you can either 1\ufe0f\u20e3 confirm deleting the population count per activity(s) or 2\ufe0f\u20e3 cancel and return to the list of population count per activity. Depending on the number of population count per activities you are deleting the Summary and Objects will automatically be updated.</p> <p></p> <p>If you confirm the deletion of the population count per activity(s) then you will be redirected back to the <code>Population Count Per Activity</code> page and shown a success message.</p> <p></p>"},{"location":"administrator/guide/manage-users/","title":"IDS SAWPS","text":""},{"location":"administrator/guide/manage-users/#managing-users","title":"Managing Users","text":"<p>This sections describes how administrators can manage users ( i.e. their associated organisations, their permissions, etc.) on the SAWPS platform.</p>"},{"location":"administrator/guide/manage-users/#where-to-manage-users","title":"Where to Manage Users","text":"<p>After you have logged into the administration site, you should be able to see 1\ufe0f\u20e3 the AUTHENTICATION AND AUTHORIZATION section. In this section you will see 2\ufe0f\u20e3 the link to the <code>Users</code> management page.</p> <p></p>"},{"location":"administrator/guide/manage-users/#users-page","title":"Users Page","text":"<p>Once you click on the <code>Users</code> link, you will be redirected to a page that has 1\ufe0f\u20e3 a list of all the registered users on the SAWPS platform.</p> <p></p>"},{"location":"administrator/guide/manage-users/#filter-list-of-users","title":"Filter List of Users","text":"<p>On the right-hand side of the <code>Users</code> page, you will see a panel titled <code>FILTER</code>.</p> <p></p> <p>The various options in the <code>FILTER</code> panel allow you to change the number of users you can see in the list. You can also set more than one filter at a time to ensure you only see the specific users you would like to see (the filters applied in this example resulted in only 16 of the 81 total users being displayed).</p> <p></p> <p>If you would like to reset the list to a point where no filters have been applied, you can simply click on 1\ufe0f\u20e3 the <code>Clear all filters</code> button.</p> <p></p>"},{"location":"administrator/guide/manage-users/#search-for-users","title":"Search for User(s)","text":"<p>If you do not see the user you would like to see in the list after filtering (or due to the length of the list), you can utilise the <code>Search</code> functionality. To do so, click 1\ufe0f\u20e3 the <code>Search</code> field and type a few characters (i.e. letters in the user's name), and then click on 2\ufe0f\u20e3 the <code>Search</code> button to filter the list of users. Ensure that you have cleared any of the filters you have applied otherwise your search will only search through the filtered list of users and not all of the users.</p> <p></p> <p>If the representative you are looking for is still not there, then you will need to follow the steps below to add them.</p>"},{"location":"administrator/guide/manage-users/#add-users","title":"Add User(s)","text":"<p>If you would like to add a user, you can click on 1\ufe0f\u20e3 the <code>ADD USER</code> button.</p> <p></p> <p>When you click on the <code>ADD USER</code> button, you will be redirected to the <code>Add User</code> page. You should fill in 1\ufe0f\u20e3 the user's username (usually their first name but in all lowercase text), and 2\ufe0f\u20e3 the password to secure the account. NB Pay careful attention to the list of requirements for a password underneath the <code>Password</code> field (Using a password manager to generate a password is recommended). Once you have generate a secure password (following the requirements), you must then re-enter the password in 3\ufe0f\u20e3 the <code>Password confirmation</code> field. You are not required to fill in the fields in 4\ufe0f\u20e3 the <code>USER</code> section of the page but filling them in helps to ensure accuracy of the user's profile on the platform.</p> <p></p> <p>Once you have filled in the necessary information, you have three options to proceed forward:</p> <p></p> <ul> <li><code>Save and add another</code>: Which will allow you to save the current user and move forward with adding a new one.</li> <li><code>Save and continue editing</code>: Which will allow you to save the current user and proceed with editing the current user.</li> <li> <p><code>SAVE</code>: Allows you to save the user and then redirects you to the <code>Change User</code> page where you need to specify 1\ufe0f\u20e3 the user's first name, last name and email address. You can also set 2\ufe0f\u20e3 the user's permissions if you know what their user role will be.     </p> <p>Once you have filled in the necessary information, scroll down and then you can click on 1\ufe0f\u20e3 any one of the three save options or click on 2\ufe0f\u20e3 the <code>Delete</code> button to remove the user.</p> <p></p> <p>The three save options will have different actions:</p> </li> <li> <p><code>Save and add another</code>: Which will allow you to save the current user and then redirect you back to the <code>Add User</code> page.</p> </li> <li><code>Save and continue editing</code>: Which will allow you to save the current user and continue with editing the current user.</li> <li> <p><code>SAVE</code>: Allows you to save the user and then redirects you back to the <code>Users</code> page and displays a success message.         </p> <p>If you clicked on the <code>Delete</code> button, you will be redirected to a page where you can either 1\ufe0f\u20e3 confirm deleting the user or 2\ufe0f\u20e3 cancel and return to the list of users.</p> <p></p> <p>If you confirm the deletion of the invitation then you will be redirected back to the <code>Users</code> page and shown a success message.</p> <p></p> </li> </ul>"},{"location":"administrator/guide/manage-users/#manage-users","title":"Manage User(s)","text":"<p>To make changes to an existing user, you can click on 1\ufe0f\u20e3 the username of the user.</p> <p></p> <p>This will redirect you to a <code>Change Organisation</code> page where you can edit the information previously used to populate the invitation, or you can delete the invitation.</p> <p>In the <code>Groups:</code> section, the user should always be part of the <code>Organisation member</code> group and then depending on whether the organisation they are a part of is National or Provincial, you should select the relevant <code>National</code> or <code>Provincial</code> user group(s) (i.e. A National Organsiation would have a National data consumer).</p> <p></p> <p>Once you have changed the necessary information, scroll down and then you can click on 1\ufe0f\u20e3 any one of the three save options or click on 2\ufe0f\u20e3 the <code>Delete</code> button to remove the user.</p> <p></p> <p>The three save options will have different actions:</p> <ul> <li><code>Save and add another</code>: Which will allow you to save the current user and then redirect you back to the <code>Add User</code> page.</li> <li><code>Save and continue editing</code>: Which will allow you to save the current user and continue with editing the current user.</li> <li><code>SAVE</code>: Allows you to save the user and then redirects you back to the <code>Users</code> page and displays a success message.     </li> </ul> <p>If you clicked on the <code>Delete</code> button, you will be redirected to a page where you can either 1\ufe0f\u20e3 confirm deleting the user or 2\ufe0f\u20e3 cancel and return to the list of users.</p> <p></p> <p>If you confirm the deletion of the invitation then you will be redirected back to the <code>Users</code> page and shown a success message.</p> <p></p>"},{"location":"administrator/guide/manage-users/#delete-users","title":"Delete User(s)","text":"<p>If you would like to delete a user, or multiple users, you can do so from the <code>Users</code> page. First you select the user(s) you would like to remove by checking 1\ufe0f\u20e3 the boxes next to the user(s) name(s).</p> <p>Note: Clicking on the topmost checkbox will select all of the users.</p> <p></p> <p>Then you click on 1\ufe0f\u20e3 the <code>Action</code> dropdown menu, select 2\ufe0f\u20e3 the <code>Delete selected user</code> option, and then click on 3\ufe0f\u20e3 the <code>Go</code> button.</p> <p></p> <p>This will redirect you to a page where you can either 1\ufe0f\u20e3 confirm deleting the user(s) or 2\ufe0f\u20e3 cancel and return to the list of users. Depending on the number of users you are deleting the Summary and Objects will automatically be updated.</p> <p></p> <p>If you confirm the deletion of the user(s) then you will be redirected back to the <code>User</code> page and shown a success message.</p> <p></p>"},{"location":"administrator/manual/","title":"IDS SAWPS","text":""},{"location":"administrator/manual/#administrator-reference-manual","title":"Administrator Reference Manual","text":"<p>Welcome to the SAWPS administrator manual. This section of the documentation describes every administrator page in the application and what the various components of that page do. Here is a brief overview of the content provided here:</p> <ul> <li>Django Administration: this section explains the django administration of the site.</li> <li>Django Tables: this section explains the django tables on the Django administration the site.</li> <li>Add Data in Django: this section explains the addition of data on the Django administration site.</li> <li>Edit Data in Django: this section explains the editing of data on the Django administration the site.</li> </ul>"},{"location":"administrator/manual/django-add-data/","title":"IDS SAWPS","text":""},{"location":"administrator/manual/django-add-data/#add-admin-table","title":"Add Admin Table","text":""},{"location":"administrator/manual/django-add-data/#activity","title":"Activity","text":"<ol> <li> <p>Form fields: Form where administrators can input values for the activity.</p> <p>This table is used to store existing activity types e.g. <code>Unplanned/natural deaths</code>.</p> <ul> <li>Colour: Used as the colour identifier in reports and charts. The default is black (<code>#000000</code>).</li> <li>Width: Column width in the Activity Report.</li> <li>Export fields: Used as export fields in the Activity Report. The value should be an array/list, containing an  <code>Annual Population Per Activity</code> field to export. The fields currently available are:<ul> <li>founder_population</li> <li>reintroduction_source</li> <li>intake_permit</li> <li>offtake_permit</li> <li>translocation_destination</li> </ul> </li> </ul> <p>This is an example of a correct Export fields value: <code>[\"translocation_destination\", \"founder_population\"]</code></p> <p>Any update on this table will be reflected on the Activity Report.</p> </li> <li> <p>Save and add another: Save the current record, then redirect administrators to a new page to add a new record.</p> </li> <li> <p>Save and continue editing: Save the current record while still showing the current record.</p> </li> <li> <p>Save: Save the current record, then get redirected to the Django Admin Table/record list.</p> </li> </ol>"},{"location":"administrator/manual/django-add-data/#group","title":"Group","text":"<ol> <li> <p>Permissions: Available permissions for the group. Administrators can choose permissions from the list and assign them to the group.</p> </li> <li> <p>Arrow: Using these arrows, administrators can add or remove the permissions from the group.</p> </li> <li> <p>Plus icon: Clicking on the plus icon allows the administrators to add a new permission. The popup for creating a new permission will open.</p> <p></p> <ol> <li> <p>Form Fields: Form where administrators can input values for the new permission.</p> </li> <li> <p>Save: Button to save the new permission.</p> </li> </ol> </li> <li> <p>Choose All: Button to choose all of the permissions and assign them to the group.</p> </li> <li> <p>Remove All: Button to choose all of the permissions and remove them from the group.</p> </li> <li> <p>Save and add another: Save the current record, then be redirected to a new page to add a new record.</p> </li> <li> <p>Save and continue editing: Save the current record while still showing the current record.</p> </li> <li> <p>Save: Save the current record and then be redirected to the Django Admin Table/record list.</p> </li> </ol>"},{"location":"administrator/manual/django-add-data/#add-user","title":"Add User","text":"<p>The administrators will be presented with a form to enter the user's information. Here are the fields to fill in:</p> <ol> <li> <p>Username: Administrators should enter a unique username for the new user. It should be 150 characters, or less, and may contain only letters, digits, and the characters '@', '.', '+', '-', and '_'.</p> </li> <li> <p>Password: Administrators should create a strong password for the user. The password must meet these criteria:</p> <ul> <li>Be at least 12 characters long.</li> <li>Should not resemble the user's personal information.</li> <li>Should not be a commonly used password.</li> <li>Should not be entirely numeric.</li> <li>Must include at least one numeric character.</li> <li>Must include at least one uppercase letter.</li> <li>Must include at least one special character (e.g., @, #, %, or ;).</li> </ul> </li> <li> <p>Password Confirmation: Administrators should re-enter the same password for verification.</p> </li> <li> <p>Title Id: Administrators should choose the title from the dropdown.</p> </li> <li> <p>Icons: By using these icons, the administrators can add a new user role, and delete, edit, and view details of the chosen user role.</p> <ul> <li> <p>Edit Icon: Clicking on the <code>Edit</code> icon allows the administrators to edit the user role. After clicking on the icon, a popup will open for editing the user role.</p> <ul> <li></li> </ul> </li> <li> <p>Plus Icon: Clicking on the <code>Plus</code> icon allows the administrators to add a new user role. After clicking on the icon, a popup will open for adding a new user role.</p> <ul> <li></li> </ul> </li> <li> <p>Cross Icon: Clicking on the <code>Cross</code> icon allows the administrators to delete the user role. After clicking on the icon, a popup will open for deleting the user role.</p> <ul> <li></li> </ul> </li> <li> <p>Eye Icon: Clicking on the <code>Eye</code> icon allows administrators to view the details of the user role. After clicking on the icon, a popup will open for viewing the details of the user role.</p> <ul> <li></li> </ul> </li> </ul> </li> <li> <p>Choose File: Choose a profile picture for the user.</p> </li> <li> <p>Save and add another: Save the current record, then redirect to a new page to add a new record.</p> </li> <li> <p>Save and continue editing: Save the current record while still showing the current record.</p> </li> <li> <p>Save: Save the current record, then redirect to the Django Admin Table/record list.</p> </li> </ol>"},{"location":"administrator/manual/django-add-data/#add-totp-time-based-one-time-pin-device","title":"Add TOTP (Time-based One Time Pin) Device","text":"<ol> <li> <p>User: The administrator can add the user for whom TOTP is being created. Existing users can be searched by clicking the search icon next to the user input field.</p> </li> <li> <p>Name: The administrator can add the name of this device in the name input field.</p> </li> <li> <p>Confirmed: Check the checkbox if the device is ready for use.</p> </li> <li> <p>Key: A pre-generated hex-encoded secret key, which can be up to 40 bytes in length.</p> </li> <li> <p>Steps: The time step in seconds.</p> </li> <li> <p>To: The Unix time at which to begin counting steps.</p> </li> <li> <p>Digits: The number of digits to expect in a token.</p> </li> <li> <p>Tolerance: The number of time steps in the past or future to allow.</p> </li> </ol> <p></p> <ol> <li> <p>Drift: The number of time steps the prover is known to deviate from a centralised clock.</p> </li> <li> <p>Throttling: A timestamp of the last failed verification attempt. Null if the last attempt succeeded.</p> </li> <li> <p>Throttling Failure Count: Number of successive failed attempts.</p> </li> <li> <p>Save and add another: Save the current record, then redirect to a new page to add a new record.</p> </li> <li> <p>Save and continue editing: Save the current record while still showing the current record.</p> </li> <li> <p>Save: Save the current record, then redirect to the Django Admin Table/record list.</p> </li> </ol>"},{"location":"administrator/manual/django-add-data/#add-taxon-table","title":"Add Taxon Table","text":"<ol> <li> <p>Form Fields: This form allows administrators to input values for the taxon.</p> <p>The Taxon table is designed to store information about various taxonomic entities.</p> <ul> <li> <p>Scientific Name: Field to input the scientific name of the taxon.</p> </li> <li> <p>Common Name Verbatim: Field for entering the common name of the taxon.</p> </li> <li> <p>Colour Variant: Dropdown menu for selecting colour variants.</p> </li> <li> <p>Infraspecific Epithet: Field for specifying the infraspecific epithet.</p> </li> <li> <p>Taxon Rank: Dropdown menu for selecting the taxonomic rank.</p> </li> <li> <p>Parent: Dropdown menu for selecting the parent taxon.</p> </li> <li> <p>Show on Front Page: Checkbox indicating whether the taxon should be displayed on the front page.</p> </li> <li> <p>Is Selected: Checkbox indicating whether the taxon is selected.</p> </li> <li> <p>Front Page Order: Field to input the order of appearance on the front page (default: 0).</p> </li> <li> <p>Colour: Field to specify the color.</p> </li> <li> <p>Graph Icon: This icon is used in graphs and charts.</p> <ul> <li>Click here for a sample: Clicking on the <code>Click here for sample</code> link will show administrators a sample for the graph icon.     </li> </ul> </li> <li> <p>Topper Icon: This icon is generated automatically from the graph icon for use in the <code>Reports</code> and <code>Charts</code> topper. The administrators can re-upload the topper icon by re-uploading the graph icon.</p> <ul> <li>Click here for a sample: Clicking on the <code>Click here for sample</code> link will show administrators a sample for the topper icon.     </li> </ul> </li> <li> <p>Icon: This icon is generated automatically from the graph icon for use in the population overview graph on the landing page. The administrators can re-upload the icon by re-uploading the graph icon.</p> <ul> <li>Click here for a sample: Clicking on the <code>Click here for sample</code> link will show administrators a sample for the icon.     </li> </ul> </li> </ul> </li> <li> <p>Save and Add Another: This option saves the current taxon record and redirects administrators to a new page to add another taxon record.</p> </li> <li> <p>Save and Continue Editing: Choosing this option saves the current taxon record while still displaying the current record for further editing.</p> </li> <li> <p>Save: This option saves the current taxon record and redirects administrators to the Django Admin Table/record list.</p> </li> </ol>"},{"location":"administrator/manual/django-add-data/#add-statistical-model-table","title":"Add Statistical Model Table","text":"<ol> <li> <p>Taxon: Statisticians can choose the specific taxon for which they intend to perform statistical analysis. The taxon can be selected from the dropdown menu provided. If the taxon is not specified during the addition of a statistical model, the model is considered applicable to every taxon in the system. However, it's important to note that if a taxon has its own specified statistical model, that model will take precedence for that particular taxon.</p> </li> <li> <p>Code: In the \"Code\" input field, statisticians are required to insert the R code that corresponds to the statistical analysis they wish to conduct. This field is where the actual statistical calculations and procedures are defined. The execution of R code within the system follows a structured process:</p> <ul> <li> <p>Data Export: The system exports CSV data of the specified species.</p> </li> <li> <p>R Code Execution: The exported CSV data serves as input for the execution of the provided R code. The system processes the R code to perform the intended statistical analysis on the species data.</p> </li> <li> <p>JSON Retrieval: Upon completion of the R code execution, the system retrieves the output in JSON format.</p> </li> <li> <p>Statistical Model Output: A StatisticalModelOutput record is then created, capturing the results of the statistical analysis for further reference and analysis.</p> </li> </ul> </li> <li> <p>Type: Choose the type of statistical model output from the dropdown menu provided. This selection allows statisticians to categorise and distinguish the nature of the output generated by the statistical analysis.</p> </li> <li> <p>Variable Name: Define the exact variables used in the R code for statistical analysis. These variables store trends data (for charts) or other data intended for JSON export, enhancing clarity and organisation in result interpretation.</p> </li> <li> <p>Save and Add Another: This option saves the current statical record and redirects administrators to a new page to add another statistical record.</p> </li> <li> <p>Save and Continue Editing: Choosing this option saves the current statistical record while still displaying the current record for further editing.</p> </li> <li> <p>Save: This option saves the current statistical record and redirects administrators to the Django Admin Table/record list.</p> </li> <li> <p>Data Download Template: Click on the <code>Data Download Template</code> button, to download the CSV file.</p> </li> </ol>"},{"location":"administrator/manual/django-add-data/#add-organisation-invites-record","title":"Add Organisation Invites Record","text":"<ol> <li> <p>Form Fields: This form allows administrators to input values for the organisation invite.</p> <ul> <li> <p>Email: Enter the email of the user being invited.</p> </li> <li> <p>User Dropdown: Select a user from the dropdown list if they already exist or create a user by clicking on the plus icon. The administrator can view the selected user's record by clicking on the eye icon and can edit by clicking on the edit icon.</p> </li> <li> <p>Organisation Dropdown: Select a organisation from the dropdown list if they already exist or create a organisation by clicking on the plus icon. The administrator can view the selected organisation's record by clicking on the eye icon and can edit by clicking on the edit icon.</p> </li> <li> <p>Joined Dropdown: Select the joined status from the dropdown list.</p> </li> <li> <p>User Role Dropdown: Select the user role from the dropdown list if it already exists or create a user role by clicking on the plus icon. The administrator can view the selected user role's record by clicking on the eye icon and can edit by clicking on the edit icon.</p> </li> <li> <p>Assigned As Dropdown: Select the assigned as status from the dropdown list.</p> </li> <li> <p>UUID: The UUID is generated automatically when a record is created in the database.</p> </li> </ul> </li> <li> <p>Save and Add Another: This option saves the current organisation invites record and redirects administrators to a new page to add another organisation invites record.</p> </li> <li> <p>Save and Continue Editing: Choosing this option saves the current organisation invites record while still displaying the current record for further editing.</p> </li> <li> <p>Save: This option saves the current organisation invites record and redirects administrators to the Django Admin Table/record list.</p> </li> </ol>"},{"location":"administrator/manual/django-add-data/#add-organisation-manager-record","title":"Add Organisation Manager Record","text":"<ol> <li> <p>Form Fields: This form allows administrators to input values for the organisation manager.</p> <ul> <li> <p>Organisation Dropdown: Select a organisation from the dropdown list if they already exist or create a organisation by clicking on the plus icon. The administrator can view the selected organisation's record by clicking on the eye icon and can edit by clicking on the edit icon.</p> </li> <li> <p>User Dropdown: Select a user from the dropdown list if they already exist or create a user by clicking on the plus icon. The administrator can view the selected user's record by clicking on the eye icon and can edit by clicking on the edit icon.</p> </li> </ul> </li> <li> <p>Save and Add Another: This option saves the current organisation manager record and redirects administrators to a new page to add another organisation manager record.</p> </li> <li> <p>Save and Continue Editing: Choosing this option saves the current organisation manager record while still displaying the current record for further editing.</p> </li> <li> <p>Save: This option saves the current organisation manager record and redirects administrators to the Django Admin Table/record list.</p> </li> </ol>"},{"location":"administrator/manual/django-admin/","title":"IDS SAWPS","text":""},{"location":"administrator/manual/django-admin/#django-admin-page-documentation","title":"Django Admin Page Documentation","text":"<p>The Django Admin is the central hub to create, read, update, or delete SAWPS data. Only users with staff status (i.e. administrators) can enter the administration page.</p>"},{"location":"administrator/manual/django-admin/#heading-to-django-admin","title":"Heading to Django Admin","text":"<ol> <li>Click on the profile icon, then click Django Admin.</li> </ol>"},{"location":"administrator/manual/django-admin/#django-admin-layout","title":"Django Admin Layout","text":"<p>The Welcome page will be the first thing that administrators see. It typically displays a welcome message and provides an overview of the available actions and options within the administration panel.</p> <p></p> <p>In the top right corner of the administration panel, administrators will find a section that usually displays their username. In this section, administrators have the following options:</p> <ol> <li> <p>Welcome: Displays welcome with the administrator's name.</p> </li> <li> <p>View Site: Clicking on this option will take administrators to the <code>SAWPS</code> website.</p> </li> <li> <p>Change Password: Clicking on this option allows administrators to change their administration password. Administrators will be prompted to provide their current password and then set a new one.</p> <p></p> <ol> <li> <p>1. Old Password: In this field, administrators should provide the current password associated with their account. This is a mandatory field.</p> </li> <li> <p>2. New Password: In this field, administrators should enter the new password they want to set for their account. The password should meet the following criteria:</p> </li> </ol> <ul> <li>The password can't be too similar to other personal information.</li> <li>The password must contain at least 12 characters.</li> <li>The password can't be a commonly used password.</li> <li>The password can't be entirely numeric.</li> <li>The password should include the following:<ul> <li>Numeric character</li> <li>Uppercase letter</li> <li>Special character ( @ # % ; )</li> </ul> </li> <li>Ensure that the new password adheres to these requirements.</li> </ul> <ol> <li> <p>3. New Password Confirmation: Re-enter the new password in this field to confirm it. It should match the password entered in the <code>New Password</code> field.</p> </li> <li> <p>4. Change My Password Button: Once administrators have filled in the required information, they can click the <code>CHANGE MY PASSWORD</code> button to submit the form. If all the input is valid and the new password meets the criteria, the password for their account will be updated.</p> </li> </ol> <p>After successfully changing the password, the administrator will receive a confirmation message indicating that the password has been updated.</p> </li> <li> <p>Log Out: Clicking on this option will log the administrator out of the administration panel and return them to the login page.</p> <p></p> <ol> <li>1. Log in again: Clicking this option will open the login page.</li> </ol> </li> <li> <p>Recent Actions: The <code>Recent Actions</code> section is located on the right side of the administration panel and provides a list of recent actions that have been performed within the administration interface. These actions may include additions, deletions, or changes to data in the project. Clicking on any of the available links will take an administrator to the details of the recent action.</p> </li> <li> <p>Site Administration: This section provides links to various models and apps registered with the administration panel. It serves as the primary navigation point for managing a project's data. Clicking on any of the available links will take an administrator to the respective model's management page.</p> </li> <li> <p>Add: This button is used to create a new item for the associated model. Clicking on the <code>Add</code> link will open a form where administrators can enter the details of the new record.</p> </li> <li> <p>Change: This button is used to edit an existing item from the list. When administrators click the <code>Change</code> button, they will be redirected to a page where they can view all the associated data for that model and select the data to change.</p> </li> </ol>"},{"location":"administrator/manual/django-admin/#django-admin-tables","title":"Django Admin Tables","text":"<ol> <li> <p>ACCOUNTS: The administrators can use this section to perform operations related to accounts.</p> <ul> <li>Email Addresses: The <code>Email addresses</code> table is designed for storing and managing the email addresses associated with user accounts. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing user email addresses.</li> </ul> </li> <li> <p>ACTIVITY: The administrators can use this section to perform operations related to activities.</p> <ul> <li>Activities: The <code>Activity</code> table is designed to capture and track various activities related to the management and conservation of wildlife or specific areas. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing activities.<ul> <li>Add: Click here to view how to add a new activity.</li> <li>Edit: Click here to view how to edit an activity.</li> </ul> </li> </ul> </li> <li> <p>AUTHENTICATION AND AUTHORISATION: The administrators can use this section to perform operations related to authentication and authorisation.</p> <ul> <li> <p>Groups: The <code>Groups</code> table is designed to organise and categorise users into distinct groups or roles within a web application. This table serves as a fundamental component of the application's access control and permission management system. It provides administrators with the capability to perform various operations, including creating, modifying, and viewing user groups.</p> <ul> <li>Add: Click here to view how to add a new group.</li> <li>Edit: Click here to view how to edit a group.</li> </ul> </li> <li> <p>Permissions: The <code>Permissions</code> table is a core element of a web application's access control and authorisation system. It is designed to manage and regulate the rights and privileges of users within the application, allowing administrators to create, modify, and oversee user permissions.</p> </li> <li> <p>Users: The <code>Users</code> table is a foundational component of a web application, designed to represent and manage individual user accounts. This table plays a central role in user authentication, identity management, and access control. It empowers administrators to perform a range of essential operations, including user creation, modification, and access management.</p> <ul> <li>Add: Click here to view how to add a new user.</li> <li>Edit: Click here to view how to edit a user.</li> </ul> </li> </ul> </li> <li> <p>CELERY RESULTS: The administrators can use this section to perform operations related to celery.</p> <ul> <li> <p>Group Results: In the <code>Group result</code> table, administrators can click on a specific group to see details about its tasks and their outcomes. This is useful for tracking the progress of related tasks and ensuring they were executed successfully. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing group results.</p> </li> <li> <p>Task Results: In the <code>Task result</code> table, administrators can view the status and outcomes of individual tasks. This is particularly valuable for diagnosing issues with specific tasks and understanding how the application is handling asynchronous processes. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing task results.</p> </li> </ul> </li> </ol> <p></p> <ol> <li> <p>DOCUMENTATION CENTRE: The administrators can use this section to perform operations related to documentation. The <code>Documentation Centre</code> is a vital tool for administrators to streamline the process of providing users with access to relevant documentation, guides, and help resources. It offers a structured approach to managing and presenting documentation, enhancing the user experience and support for SAWPS.</p> <ul> <li> <p>Blocks: In the <code>Blocks</code> table, administrators can specify a relative URL that links to the documentation base URL. This URL is used to auto-fetch content, allowing administrators to seamlessly integrate the documentation with SAWPS. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing blocks.</p> </li> <li> <p>Pages: In the <code>Pages</code> table, administrators can specify the page with a relative URL that links to the documentation base URL. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing pages.</p> </li> <li> <p>Preferences: In the <code>Preferences</code> table, administrators can set the documentation base URL. This is the foundation of the documentation centre and should be carefully defined to ensure accurate integration. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing preferences.</p> </li> </ul> </li> <li> <p>EASY AUDIT APPLICATION: The administrators can use this section to perform operations related to the easy audit application. An <code>Easy Audit Application</code> is a tool that helps administrators monitor and maintain an audit trail of changes and user activity within the application, providing transparency, accountability, and security.</p> <ul> <li> <p>CRUD events: In the <code>CRUD events</code> table, administrators can track CRUD events to maintain data integrity, improve accountability, and ensure compliance with regulatory requirements. An audit log of these events helps administrators to keep a record of data changes, and understand who made the changes, and when they occurred. This table provides administrators with the capability to perform various operations, including purging, deleting, updating, and viewing CRUD events.</p> </li> <li> <p>Login events: In the <code>Login events</code> table, administrators can monitor login events which is critical for maintaining the security of SAWPS and keeping track of who is accessing the system. It helps in identifying suspicious or unauthorised activities, improving accountability, and enhancing the overall security posture of the application. This table provides administrators with the capability to perform various operations, including purging, deleting, updating, and viewing login events.</p> </li> <li> <p>Request events: In the <code>Request events</code> table, administrators can monitor request events which is crucial for understanding user interactions, diagnosing issues, improving system performance, and ensuring data security. It can provide valuable insights into how SAWPS is being used and help in troubleshooting problems. This table provides administrators with the capability to perform various operations, including purging, deleting, updating, and viewing request events.</p> </li> </ul> </li> <li> <p>FRONTEND: The administrators can use this section to perform operations related to the SAWPS front end.</p> <ul> <li> <p>Boundary files: In the <code>Boundary files</code> table, administrators can define geographical boundaries, regions, or areas. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing boundary files.</p> </li> <li> <p>Boundary search requests: In the <code>Boundary search requests</code> table, administrators can manage boundary search requests, as it ensures that users can access accurate geographical data and perform spatial queries effectively. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing boundary search requests.</p> </li> <li> <p>Context layer legends: The <code>Context layer legends</code> table is used for storing the context layer legends records. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing context layer legends.</p> </li> <li> <p>Context layer tiling tasks: The <code>Context layer tiling tasks</code> table is used for storing context layer tiling tasks records. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing context layer tiling tasks.</p> </li> <li> <p>Context layers: The <code>Context layers</code> table is used for storing the context layers records. Context layers are fundamental components of SAWPS, offering diverse geospatial data to users. The administrators can manage these layers to ensure that users can access the most relevant and up-to-date spatial information, thereby improving decision-making and enhancing the user experience. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing context layers.</p> </li> <li> <p>Draft species uploads: The <code>Draft species uploads</code> table is used for storing the draft species uploads records. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing draft species uploads.</p> </li> <li> <p>Layers: The <code>Layers</code> table is used for storing the layers records. The administrators can modify individual layers within the application, which includes defining their display properties, filter settings, and their relationships with context layers. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing layers.</p> </li> <li> <p>Map sessions: The <code>Map sessions</code> table is used for storing the map session records. The administrators can monitor and configure these sessions. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing map sessions.</p> </li> <li> <p>Spatial data: The <code>Spatial data</code> table is used for storing the spatial data records. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing spatial data.</p> </li> <li> <p>Statistical models: The <code>Statistical models</code> table is used for storing the statistical model records. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing statistical models.</p> </li> </ul> </li> </ol> <p></p> <ol> <li> <p>NOTIFICATION: The administrators can use this section to perform operations related to reminders.</p> <ul> <li>Reminders: The <code>Reminders</code> table is used for storing the reminder records. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing reminders.</li> </ul> </li> <li> <p>OCCURRENCE: The administrators can use this section to perform operations related to occurrences.</p> <ul> <li>Survey methods: The <code>Survey methods</code> table is used for storing the survey methods records. In the field of wildlife and environmental studies, survey methods are essential for systematically collecting data about the occurrence and distribution of various species and ecosystems. These methods are carefully designed to provide accurate information for research, conservation, and management purposes. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing survey methods.</li> </ul> </li> <li> <p>OTP STATIC: The administrators can use this section to perform operations related to static OTP (one-time pin) devices.</p> <ul> <li>Static devices: The <code>Static devices</code> table is used for storing the static devices records. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing static devices.</li> </ul> </li> <li> <p>OTP TOTP: The administrators can use this section to perform operations related to OTP TOTP (time-based one-time pin) devices.</p> <ul> <li>TOTP devices: The <code>TOTP devices</code> table is used for storing the TOTP devices records. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing TOTP devices.<ul> <li>Add: Click on the add to view how to add a new TOTP device.</li> <li>Edit: Click on the edit to view how to edit a TOTP device.</li> </ul> </li> </ul> </li> <li> <p>PERIODIC TASKS: The administrators can use this section to perform operations related to periodic tasks.</p> <ul> <li> <p>Clocked: The <code>Clocked</code> table is used for storing the clocked records. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing clocked objects.</p> </li> <li> <p>Crontabs: The <code>Crontabs</code> table is used for storing the crontabs records. The administrators can use the crontab table to schedule and automate periodic tasks within the application. Crontab allows administrators to specify precise times and dates for task execution. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing crontabs.</p> </li> <li> <p>Intervals: The <code>Intervals</code> table is used for storing the interval records. The administrators can use intervals to determine how often a task runs and the number of periods to wait before the task runs again. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing intervals.</p> </li> <li> <p>Periodic tasks: The <code>Periodic tasks</code> table is used for storing the periodic tasks records. The administrators can use the periodic tasks table to automate recurring operations within the application. This functionality allows administrators to configure and schedule tasks to run at specific intervals, saving time and ensuring consistency. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing periodic tasks.</p> </li> <li> <p>Solar events: The <code>Solar events</code> table is used for storing the solar events records. The administrators can use the solar events table to schedule tasks based on solar events, such as sunrise or sunset, at specific geographic locations. Solar events are essential for tasks that need to be synchronised with daylight or specific astronomical occurrences. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing solar events.</p> </li> </ul> </li> </ol> <p></p> <ol> <li> <p>POPULATION DATA: The administrators can use this section to perform operations related to species populations.</p> <ul> <li> <p>Annual Populations: The <code>Annual Populations</code> table is used for storing the annual population records. The administrators can manage population data for owned species in the SAWPS. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing annual populations.</p> </li> <li> <p>Open Close System: The <code>Open Close System</code> table is used for storing the open-close systems records. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing open-close systems.</p> </li> <li> <p>Population Estimate Categories: The <code>Population Estimate Categories</code> table is used for storing the population estimate categories records. Population estimate categories help clarify the methods used to estimate species populations, providing valuable context and transparency. They allow administrators to categorise and describe the reliability and accuracy of population estimates. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing population estimate categories.</p> </li> <li> <p>Population Status: The <code>Population Status</code> table is used for storing the population status records. The administrators can use the population status table to select and change the population status of species within the application. This table allows administrators to categorising species as either resident or migratory. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing population status.</p> </li> <li> <p>Population count per activities: The <code>Population count per activities</code> table is used for storing the population count per activities records. The administrators can use the population count per activity table to select and change population counts for specific activities associated with species. This table allows administrators to track and manage population counts in various activities. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing population counts per activity.</p> </li> <li> <p>Sampling Effort Coverages: The <code>Sampling Effort Coverages</code> table is used for storing the sampling effort coverages records. The administrators can use the sampling effort coverage table to select and change the coverage level of sampling effort in surveys and data collection. This table allows administrators to categorising the extent and distribution of sample units within a reserve or area. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing sampling effort coverages.</p> </li> </ul> </li> <li> <p>PROPERTY: The administrators can use this section to perform operations related to properties.</p> <ul> <li> <p>Parcel Types: The <code>Parcel Types</code> table is used for storing the parcel types records. The administrators can use the parcel types table to select and change the type of parcels within the SAWPS. This table allows administrators to categorising parcels as either rural or urban, based on their characteristics. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing parcel types.</p> </li> <li> <p>Parcels: The <code>Parcels</code> table is used for storing the parcel records. The administrators can use the parcels table to select and change parcel details within the SAWPS. This table allows administrators to manage and update parcel information. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing parcels.</p> </li> <li> <p>Properties: The <code>Properties</code> table is used for storing the properties records. The administrators can use the property table to select and change property details within the SAWPS. This table allows administrators to manage and update property information, including property name, short code, organisation, property size, and province. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing properties.</p> </li> <li> <p>Property types: The <code>Property types</code> table is used for storing the property types records. The administrators can use the property type table to select and change property type details within the SAWPS. This table allows administrators to categorising properties based on their type, such as community, provincial, national, state, private, or a combination of state and private. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing property types.</p> </li> <li> <p>Provinces: The <code>Provinces</code> table is used for storing the provinces' records. The administrators can use the province table to select and change province details within the SAWPS. This table allows administrators to manage and update province information, including province names. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing provinces.</p> </li> </ul> </li> <li> <p>REDIRECTS: The administrators can use this section to perform operations related to redirects.</p> <ul> <li>Redirects: The <code>Provinces</code> table is used for storing the redirects records. The administrators can use the redirect table to set up URL redirections within the SAWPS site. This table allows administrators to direct users from one URL to another, either within the same domain or to an external website. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing redirects.</li> </ul> </li> <li> <p>REGULATORY PERMIT: The administrators can use this section to perform operations related to regulatory permits.</p> <ul> <li>Data use permissions: The <code>Data use permissions</code> table is used for storing the data use permissions records. The administrators can use the data use permission table to select and change permission settings related to data usage within the SAWPS. This table allows administrators to configure data access and usage policies. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing data use permissions.</li> </ul> </li> </ol> <p></p> <ol> <li> <p>SITES: The administrators can use this section to perform operations related to sites.</p> <ul> <li>Sites: The <code>Sites</code> table is used for storing the site records. The administrators can use the sites table to select and change site details within the SAWPS. This table allows administrators to manage and update site information, including the domain name and display name. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing sites.</li> </ul> </li> <li> <p>SOCIAL ACCOUNTS: The administrators can use this section to perform operations related to social accounts.</p> <ul> <li> <p>Social accounts: The <code>Social accounts</code> table is used for storing the social accounts records. The administrators can use the social account table to add and manage social media account connections for users within the SAWPS. This table allows administrators to integrate social media logins and enhance the user experience.  This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing social accounts.</p> </li> <li> <p>Social application tokens: The <code>Social application tokens</code> table is used for storing the social application tokens records. The administrators can use the social account table to add and manage social media account connections for users within the SAWPS. This table allows administrators to integrate social media logins and enhance the user experience. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing social application tokens.</p> </li> <li> <p>Social applications: The <code>Social applications</code> table is used for storing the social applications records. The administrators can use the social application table to integrate and manage social media applications within the application. This table allows administrators to social media integration, such as login via social platforms. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing social applications.</p> </li> </ul> </li> <li> <p>SPECIES: The administrators can use this section to perform operations related to species.</p> <ul> <li> <p>Owned Species: The <code>Owned Species</code> table is used for storing the owned species records. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing owned species.</p> </li> <li> <p>Taxa: The <code>Taxa</code> table is used for storing the taxon(species) records. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing taxon(species).</p> </li> <li> <p>Taxon Ranks: The <code>Taxon Ranks</code> table is used for storing the taxon rank records. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing taxon ranks.</p> </li> </ul> </li> <li> <p>STAKEHOLDER: The administrators can use this section to perform operations related to stakeholders.</p> <ul> <li> <p>Login Status: The <code>Login status</code> table is used for storing the login status records. The administrators can use the login status table to define and manage different login states within the SAWPS. This can help track and manage user's login activities. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing login status.</p> </li> <li> <p>Organisation Representatives: The <code>Organisation representatives</code> table is used for storing the organisation representative's records. The administrators can use the organisation representative table to designate and manage individuals who represent specific organisations within the SAWPS. This helps establish connections and responsibilities within the system. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing organisation representatives.</p> </li> <li> <p>Organisation users: The <code>Organisation users</code> table is used for storing the organisation users records. The administrators can use the organisation user table to associate and manage users with specific organisations within the SAWPS. This helps define user roles and responsibilities within the context of their organisations. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing organisation users.</p> </li> <li> <p>Organisation Invites: The <code>Organisation Invites</code> table is used for storing the organisation invite records. The administrators can use the organisation invites table to invite individuals to join specific organisations within the application. This is a helpful way to extend invitations to users and control their roles within the organisation. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing organisation invites.</p> </li> <li> <p>Organisations: The <code>Organisations</code> table is used for storing the organisation's records. The administrators can use the organisation table to create and manage organisations within the SAWPS. Organisations help structure and organise user roles and responsibilities. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing organisations.</p> </li> <li> <p>Reminders: The <code>Reminders</code> table is used for storing the reminder records. The administrators can use the reminders table to create and manage reminders within the SAWPS. Reminders help users keep track of important tasks and deadlines. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing reminders.</p> </li> <li> <p>Titles: The <code>Titles</code> table is used for storing the titles records. The administrators can use the titles table to manage and add titles that can be associated with user profiles within the SAWPS. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing titles.</p> </li> <li> <p>User roles: The <code>User roles</code> table is used for storing the user roles records. User roles define the permissions and access levels for different users within the SAWPS. By adding user roles, administrators can control what users can and cannot do in the system. This table provides administrators with the capability to perform various operations, including adding, deleting, updating, and viewing user roles.</p> </li> </ul> </li> </ol> <ul> <li> <p>For more information on the detailed documentation for the tables, click here.</p> </li> <li> <p>For more information on how to add new data, click here.</p> </li> <li> <p>For more information on how to edit data, click here.</p> </li> </ul>"},{"location":"administrator/manual/django-change-data/","title":"IDS SAWPS","text":""},{"location":"administrator/manual/django-change-data/#django-admin-form","title":"Django Admin Form","text":""},{"location":"administrator/manual/django-change-data/#activity","title":"Activity","text":"<ol> <li> <p>Form fields: Form where administrators can input values for their record.</p> </li> <li> <p>Delete button: Delete currently opened record. It will take administrators to a confirmation page.</p> <p></p> <ol> <li> <p>Detail: Details about the object.</p> </li> <li> <p>Yes, I'm sure: Button for confirming the deletion of the object.</p> </li> <li> <p>No, take me back: Button to cancel the deletion of the object.</p> </li> </ol> </li> <li> <p>Save and add another: Save the current record and then be redirected to a new page to add a new record.</p> </li> <li> <p>Save and continue editing: Save the current record while still showing the current record.</p> </li> <li> <p>Save: Save the current record and then get redirected to the Django Admin Table/record list.</p> </li> <li> <p>History: Button to see actions applied to the current record.</p> <p></p> </li> </ol>"},{"location":"administrator/manual/django-change-data/#group","title":"Group","text":"<p>Administrators can update the field of the object by changing the value of the fields. E.g. change the permissions of the group and update the description of the group.</p> <p>The other options (<code>History</code>, <code>Delete</code>, <code>Save and add another</code>, <code>Save and continue editing</code>, <code>Save</code>) work same for other objects as they do in this example.</p>"},{"location":"administrator/manual/django-change-data/#change-user","title":"Change User","text":"<ol> <li> <p>History: Button to view actions applied to the current record.</p> </li> <li> <p>Change Password: The administrators can change the user's password by clicking on <code>this form</code> link. A popup will open to change the user's password.</p> <ul> <li></li> </ul> <ol> <li> <p>Change Password Form: Form to change the user's password.</p> </li> <li> <p>Change Password Button: The administrators can change the user's password by clicking on the <code>CHANGE PASSWORD</code> button.</p> </li> </ol> </li> </ol>"},{"location":"administrator/manual/django-change-data/#change-user-permission","title":"Change User Permission","text":"<ol> <li> <p>Checkbox: The administrators can grant permissions to a user by checking the checkbox.</p> </li> <li> <p>Arrows: The administrators can assign or unassign a group to the user by selecting and using these arrows.</p> </li> <li> <p>Choose All: The administrators can assign all available groups to the user.</p> </li> <li> <p>Remove All: The administrators can unassign all groups from the user.</p> </li> <li> <p>Permissions: The administrators can assign or unassign permissions to the user using this table.</p> </li> <li> <p>Search Permissions: The administrators can search for permissions using the search functionality.</p> </li> </ol>"},{"location":"administrator/manual/django-change-data/#change-dates-and-user-info","title":"Change Dates And User Info","text":"<ol> <li> <p>Dates: The administrators can edit the last login date-time and date joined date-time of a user from this section.</p> </li> <li> <p>User: The administrators can edit the user's details.</p> </li> <li> <p>Delete: The administrators can delete the user by clicking on this button. The popup will open for the confirmation to delete the user.</p> </li> <li> <p>Save and add another: Save the current record, then redirect to a new page to add a new record.</p> </li> <li> <p>Save and continue editing: Save the current record while still showing the current record.</p> </li> <li> <p>Save: Save the current record, then redirect to the Django Admin Table/record list.</p> </li> </ol>"},{"location":"administrator/manual/django-change-data/#change-totp-device","title":"Change TOTP Device","text":"<ol> <li> <p>History: The button to see actions applied to the current record.</p> </li> <li> <p>Identity: The administrator can edit the user, name and confirmed status for the TOTP device. Click on the user name of the user allows the administrator to view the details of that user.</p> </li> <li> <p>Configuration: The administrator can edit the configuration of the TOTP device by using this form.</p> </li> </ol> <p></p> <ol> <li> <p>State: The administrator can edit the state of the TOTP device by using this form.</p> </li> <li> <p>Throttling: The administrator can edit the throttling of the TOTP device by using this form.</p> </li> <li> <p>QRCode: The administrator can view the qrcode by clicking on the <code>qrcode</code> link.</p> </li> <li> <p>Delete: The administrator can delete the TOTP device by clicking on the <code>Delete</code> button.</p> </li> <li> <p>Save and add another: Save the current record, then redirect to a new page to add a new record.</p> </li> <li> <p>Save and continue editing: Save the current record while still showing the current record.</p> </li> <li> <p>Save: Save the current record, then redirect to the Django Admin Table or record list.</p> </li> </ol>"},{"location":"administrator/manual/django-change-data/#change-taxon","title":"Change Taxon","text":"<ol> <li> <p>History: Button to view actions applied to the current record.</p> </li> <li> <p>Form Fields: Administrators can edit all taxon details, including scientific name, common name, color variant, infraspecific epithet, taxon rank, parent taxon, visibility settings, and taxon color. Additionally, administrators can edit the icons by modifying the graph icon, and the topper icon and icon will be generated automatically based on the graph icon.</p> </li> <li> <p>Delete: The administrators can delete the taxon by clicking on this button. The popup will open to confirm the deletion of the taxon.</p> </li> <li> <p>Save and add another: Save the current record, then redirect to a new page to add a new record.</p> </li> <li> <p>Save and continue editing: Save the current record while still showing the current record.</p> </li> <li> <p>Save: Save the current record, then redirect to the Django Admin Table/record list.</p> </li> </ol>"},{"location":"administrator/manual/django-change-data/#change-statistical-model","title":"Change Statistical Model","text":"<ol> <li> <p>History: Button to view actions applied to the current record.</p> </li> <li> <p>Form Fields: Statisticians have the ability to update the values of various fields within the form. However, it's important to note that the \"Taxon\" field is not editable. If a statistician wishes to change the taxon associated with a statistical model, they need to create a new statistical model specifically for the desired taxon. This restriction ensures data integrity and alignment with the taxonomic hierarchy, requiring a distinct model for each taxon to accurately capture and represent statistical nuances unique to that taxon.</p> </li> </ol> <p></p> <ol> <li> <p>Delete Checkbox: Check mark the checkbox to delete the associated statistical output type.</p> </li> <li> <p>Delete: The administrator can delete the statistical model by clicking on the <code>Delete</code> button. It will ask for confirmation to delete the statistical model object.</p> <p></p> </li> <li> <p>Save and Add Another: This option saves the current statical record and redirects administrators to a new page to add another statistical record.</p> </li> <li> <p>Save and Continue Editing: Choosing this option saves the current statistical record while still displaying the current record for further editing.</p> </li> <li> <p>Save: This option saves the current statistical record and redirects administrators to the Django Admin Table/record list.</p> </li> <li> <p>Data Download Template: Click on the <code>Data Download Template</code> button, to download the CSV file.</p> </li> </ol>"},{"location":"administrator/manual/django-change-data/#change-organisation-invites-record","title":"Change Organisation Invites Record","text":"<ol> <li> <p>History: Button to view actions applied to the current record.</p> </li> <li> <p>Form Fields: Administrators can edit organisation invite details, including email, user, organisation, joined, user role, assigned as and UUID.</p> </li> <li> <p>Delete: The administrators can delete the organisation invite by clicking on this button. The popup will open to confirm the deletion of the organisation invite.</p> </li> <li> <p>Save and add another: Save the current record, then redirect to a new page to add a new record.</p> </li> <li> <p>Save and continue editing: Save the current record while still showing the current record.</p> </li> <li> <p>Save: Save the current record, then redirect to the Django Admin Table/record list.</p> </li> </ol>"},{"location":"administrator/manual/django-change-data/#change-organisation-manager-record","title":"Change Organisation Manager Record","text":"<ol> <li> <p>History: Button to view actions applied to the current record.</p> </li> <li> <p>Form Fields: Administrators can edit organisation manager details, including organisation and user.</p> </li> <li> <p>Delete: The administrators can delete the organisation manager by clicking on this button. The popup will open to confirm the deletion of the organisation manager.</p> </li> <li> <p>Save and add another: Save the current record, then redirect to a new page to add a new record.</p> </li> <li> <p>Save and continue editing: Save the current record while still showing the current record.</p> </li> <li> <p>Save: Save the current record, then redirect to the Django Admin Table/record list.</p> </li> </ol>"},{"location":"administrator/manual/django-table/","title":"IDS SAWPS","text":""},{"location":"administrator/manual/django-table/#django-tables","title":"Django Tables","text":""},{"location":"administrator/manual/django-table/#activities-table","title":"Activities Table","text":"<ol> <li> <p>Add button: Clicking on this button will allow administrators to add a new record to the table. Clicking here will redirect users to the add data record documentation.</p> </li> <li> <p>Search: Feature to allow for searching of a specific object in the table using keywords.</p> </li> <li> <p>Toggle select records: Checkbox to select/deselect records.</p> </li> <li> <p>Action: Administrators can choose the action from this dropdown and then perform it on a selected object.</p> </li> <li> <p>Go: Clicking on this button will allow administrators to perform the selected option on the selected object.</p> </li> <li> <p>Objects: Available objects containing records. Administrators can see the details of the object by clicking on the link (i.e. the object name).</p> </li> </ol>"},{"location":"administrator/manual/django-table/#group-table","title":"Group Table","text":"<p>This table is used to store existing user groups, that will affect the available options in the Report and available charts in the Charts.</p> <p>Administrators can assign a user to groups in the User Table.</p> <ol> <li> <p>Toggle sorting: Clicking on this icon will allow administrators to toggle the displayed order of the data.</p> </li> <li> <p>Add Group: Clicking on the <code>ADD GROUP</code> button will allow administrators to add a new group. Click here to see detailed documentation about adding a new group.</p> </li> <li> <p>Edit Record: Clicking on the object will allow administrators to change/edit a particular record. Click here to see detailed documentation about editing a group.</p> </li> </ol> <p>Administrators can also configure what charts are available to each group, by adding the necessary permission to each group. </p>"},{"location":"administrator/manual/django-table/#user-table","title":"User Table","text":"<p>The user table within the Django Admin interface allows administrators to manage user-related tasks efficiently.</p> <ol> <li> <p>Add User: Clicking on the <code>ADD USER</code> button allows administrators to add a new user. Click on add user to see detailed documentation on adding a new user.</p> </li> <li> <p>Filter: Available filters to filter the records of the user table.</p> <ul> <li></li> </ul> <ol> <li> <p>Clear All Filters: Clicking on the <code>clear all filters</code> allows administrators to clear all the filters.</p> </li> <li> <p>Filter Field: The names of the filter field and attributes for filtering the records.</p> </li> </ol> </li> <li> <p>Search Functionality: The administrators can search the records using the search functionality.</p> </li> <li> <p>User Table: The user table with records.</p> </li> <li> <p>Edit User: Clicking on the object allows the administrators to change or edit a particular record. Click here to view detailed documentation on editing a user.</p> </li> </ol>"},{"location":"administrator/manual/django-table/#totp-time-based-one-time-passwords-device","title":"TOTP (Time-based One-Time Passwords) Device","text":"<p>This table is used for storing, generating, and deleting the TOTP device.</p> <ol> <li> <p>TOTP Table: The table displays the record for the TOTP device.</p> </li> <li> <p>QRCode: The administrator can view the QRCode of the TOTP device by clicking on the <code>qrcode</code> link.</p> <ul> <li> 1. QRCode: Displays QRCode. 2. URI: URI(Uniform Resource Identifier) for configuring TOTP.</li> </ul> </li> <li> <p>Add TOTP Device: The administrator can add a TOTP device by clicking on the <code>ADD TOTP DEVICE</code> button. Click on the add TOTP device to view detailed documentation about adding a new TOTP device.</p> </li> <li> <p>Edit TOTP Device: The administrator can edit the TOTP device for that particular object by clicking on the object. Click on the here to view detailed documentation about editing a TOTP device.</p> </li> </ol>"},{"location":"administrator/manual/django-table/#taxon-table","title":"Taxon Table","text":"<p>The Taxon table within the Django Admin interface provides administrators with the tools to manage taxonomic information efficiently.</p> <ol> <li> <p>Add Taxon: Clicking on the <code>ADD TAXON</code> button enables administrators to add a new taxon. To learn more about adding a new taxon, refer to the detailed documentation on adding a taxon.</p> </li> <li> <p>Search Functionality: Administrators can utilise the search functionality to find specific taxonomic records.</p> </li> <li> <p>Actions Dropdown: The <code>Actions</code> dropdown provides the following options for managing taxonomic records:</p> <ul> <li> <p>Delete Selected Taxa: This action allows administrators to delete the selected taxonomic records in bulk.</p> </li> <li> <p>Clear Output Cache: This action enables administrators to clear the output cache associated with the taxonomic records.</p> </li> </ul> </li> <li> <p>Go Button: The administrators can execute the selected action by clicking this button.</p> </li> <li> <p>Edit Taxon: Clicking on a specific taxon entry enables administrators to modify or edit the corresponding record. For detailed instructions on editing a taxon, refer to the documentation on editing a taxon.</p> </li> </ol>"},{"location":"administrator/manual/django-table/#statistical-table","title":"Statistical Table","text":"<p>The Statistical table within the Django Admin interface equips administrators with powerful tools to efficiently manage statistical models.</p> <ol> <li> <p>Add Statistical Model: Initiate the addition of a new statistical model by clicking the <code>ADD STATISTICAL MODEL</code> button. Detailed instructions on adding a new statistical model can be found in the documentation on adding a statistical model.</p> </li> <li> <p>Search Functionality: Utilise the search functionality to efficiently locate specific statistical model records.</p> </li> <li> <p>Actions Dropdown: The Actions dropdown provides the following options for managing statistical models:</p> <ul> <li> <p>Delete Selected Statistical Models: Administrators can efficiently delete multiple selected statistical model records in bulk.</p> </li> <li> <p>Restart Plumber Process: This action facilitates the restart of the plumber process associated with the statistical models, ensuring updated and accurate results.</p> </li> </ul> </li> <li> <p>Go Button: Execute the selected action by clicking the <code>Go</code> button.</p> </li> <li> <p>Edit Statistical Model: Modify or edit a specific statistical model entry by clicking on it. Refer to the documentation on editing a statistical model for detailed instructions.</p> </li> </ol> <p>Efficiently manage your statistical models with the comprehensive functionalities provided by the Statistical table in the Django Admin interface.</p>"},{"location":"administrator/manual/django-table/#species-model-outputs-table","title":"Species Model Outputs Table","text":"<p>The Species model outputs in the Django Admin interface provide administrators with comprehensive tools for managing taxonomic information efficiently. Below is an overview of key functionalities within the Species model. The Species table, presented in a structured format, displays essential information about each taxonomic entry, facilitating a quick overview of the available data.</p> <ol> <li> <p>ADD SPECIES MODEL OUTPUT: The process of adding Species Model Outputs is straightforward and does not require direct intervention from a statistician. The records within the Species Model Outputs table are automatically generated by the system, ensuring accuracy and consistency.</p> </li> <li> <p>Filter: Available filters to filter the records of the species model output table.</p> <p></p> </li> <li> <p>Search Functionality: Administrators can utilise the search functionality to find specific species model output records.</p> </li> <li> <p>Actions Dropdown: In the Species Model Outputs table, the Actions dropdown offers the following essential options for efficient management of species-related data:</p> <ul> <li> <p>Delete Selected Species Outputs: This action empowers administrators to delete multiple selected species output records in bulk. It provides a streamlined solution for maintaining a clean and updated dataset.</p> </li> <li> <p>Trigger Generate Model Output: The <code>Trigger Generate Model Output</code> option initiates the system process to generate model outputs for the selected species entries.</p> </li> </ul> </li> <li> <p>Go Button: The administrators can execute the selected action by clicking this button.</p> </li> <li> <p>Edit Species Model Output: The <code>Edit Species Model Output</code> functionality is not applicable to the Species Model Outputs table as it is automatically generated by the system and is not intended for manual modification. The records within this table dynamically reflect the most up-to-date taxonomic information and model outputs.</p> </li> </ol>"},{"location":"administrator/manual/django-table/#organisation-invites-table","title":"Organisation Invites Table","text":"<p>The <code>Organisation Invites</code> table within the Django Admin interface provides administrators with the tools to invite users to the organisation.</p> <ol> <li> <p>Add Organisation Invites: Clicking on the <code>ADD ORGANISATION INVITE</code> button enables administrators to add a new organisation invite. To learn more about adding a new organisation invite, refer to the detailed documentation on adding a new organisation invite.</p> </li> <li> <p>Search Functionality: Administrators can utilise the search functionality to find specific invite records.</p> </li> <li> <p>Actions Dropdown: The <code>Actions</code> dropdown provides the following options for managing organisation invite records:</p> <ul> <li>Delete selected Organisation invites: This action allows administrators to delete the selected organisation invites records individually or in bulk.</li> </ul> </li> <li> <p>Go Button: The administrators can execute the selected action by clicking this button.</p> </li> <li> <p>Filter: Available filters to filter the records of the organisation invites table.</p> <p></p> </li> <li> <p>Edit Organisation Invites: Clicking on a specific organisation invite entry enables administrators to modify or edit the corresponding record. For detailed instructions on editing a organisation invite, refer to the documentation on editing a organisation invite.</p> </li> </ol>"},{"location":"administrator/manual/django-table/#organisation-manager-table","title":"Organisation Manager Table","text":"<p>The <code>Organisation Manager</code> table within the Django Admin interface provides administrators with the tools to add user to the organisation.</p> <ol> <li> <p>Add Organisation Manager: Clicking on the <code>ADD ORGANISATION MANAGER</code> button enables administrators to add a manager to the organisation. To learn more about adding a new organisation manager, refer to the detailed documentation on adding the manager to organisation.</p> </li> <li> <p>Search Functionality: Administrators can utilise the search functionality to find specific organisation manager records.</p> </li> <li> <p>Actions Dropdown: The <code>Actions</code> dropdown provides the following options for managing organisation manager records:</p> <ul> <li>Delete selected Organisation managers: This action allows administrators to delete the selected organisation manager records individually or in bulk.</li> </ul> </li> <li> <p>Go Button: The administrators can execute the selected action by clicking this button.</p> </li> <li> <p>Edit Organisation Manager: Clicking on a specific organisation manager entry enables administrators to modify or edit the corresponding record. For detailed instructions on editing a organisation manager, refer to the documentation on editing a organisation manager.</p> </li> </ol>"},{"location":"developer/","title":"IDS SAWPS","text":""},{"location":"developer/#for-developers","title":"For Developers","text":"<p>This is the homepage for all developer related documentation.</p> <ul> <li>The developer guide, which describes common workflows for developers in a tutorial format. This includes instructions on how to set up your developer environment, check out the code, run it locally etc.</li> <li>The developer manual, which describes each Python module and its classes, functions etc. This section is autogenerated.</li> </ul>"},{"location":"developer/documentation/","title":"IDS SAWPS","text":""},{"location":"developer/documentation/#documentation","title":"Documentation","text":"<p>In this section of the documentation, we explain how to work with the documentation. The content is organised as follows:</p> <ul> <li>Overview: Here we outline the documentation system and the standard workflows needed.</li> <li>Context help: Here we outline the procedure for adding context help into the application and linking it to this documentation tree.</li> </ul>"},{"location":"developer/documentation/context-help/","title":"IDS SAWPS","text":""},{"location":"developer/documentation/context-help/#context-help","title":"Context help","text":"<p>This section describes how the context help system works.</p>"},{"location":"developer/documentation/context-help/#overview","title":"Overview","text":"<p>The context help system provides an integration between the web application and the documentation.</p> <p></p> <p>The following concepts are used:</p> <ul> <li> <p>Site: This is the area for globally setting options relating to the context help system.</p> </li> <li> <p>Blocks: These are small components displayed as blocks 1\ufe0f\u20e3 in the context help panel. Each block links to a section in the help documentation. If you would like to view the full documentation site you can click on 2\ufe0f\u20e3 <code>Visit our Documentation</code>.</p> </li> </ul> <p></p> <ul> <li>Pages: These are context help panels that are each linked to a particular URL in the application.</li> </ul> <p></p> <ul> <li>Page Blocks: These are links between pages and their constituent blocks. Each page can have many blocks and each block can be used in many pages.</li> </ul>"},{"location":"developer/documentation/context-help/#triggering-context-help","title":"Triggering context help","text":"<p>There are two ways to trigger context help:</p> <ol> <li>Click on the 1\ufe0f\u20e3 green question mark icon available at the top right corner. This will be visible only on the <code>EXPLORE</code> and the <code>DATA UPLOAD</code></li> </ol> <p></p> <ol> <li>From the top nav bar, click on the 1\ufe0f\u20e3 <code>Help</code> to view the context help options.</li> </ol> <p></p>"},{"location":"developer/documentation/context-help/#managing-context-help","title":"Managing context help","text":"<p>We manage the context help system from django admin. You need to be a staff user to do this and have been granted read/write/update permissions on the documentation center related tables. First open your user menu 1\ufe0f\u20e3 and then the Django Admin area 2\ufe0f\u20e3.</p> <p></p> <p>Next we can drill into the documentation center to see only the relevant admin activities 1\ufe0f\u20e3.</p> <p></p>"},{"location":"developer/documentation/context-help/#site-preferences","title":"Site preferences","text":"<p>Our first activity is to edit the site preferences 1\ufe0f\u20e3.</p> <p></p> <p>Here our goal is to set the documentation base url for the context help system 1\ufe0f\u20e3. Use the URL for your documentation project i.e. https://kartoza.github.io/sawps/</p> <p></p>"},{"location":"developer/documentation/context-help/#managing-pages","title":"Managing Pages","text":"<p>Next we need to create pages for each application end point where we want to include context sensitive help. First select pages 1\ufe0f\u20e3 from the documentation center menu:</p> <p></p> <p>Now you can edit an existing page 1\ufe0f\u20e3 or add a new one 2\ufe0f\u20e3:</p> <p></p> <p>The page properties you can set are going to determine how the context help panel appears in the application when triggering the help panel 1\ufe0f\u20e3:</p> <p></p> <p>Here is a detailed breakdown of the options:</p> <p>1\ufe0f\u20e3 Name: A symbolic name for you to easily recognise what the context help is about</p> <p>2\ufe0f\u20e3 Relative page url: This is the relative path to our application page (see underline in image above) e.g. /admin/importer/</p> <p>3\ufe0f\u20e3 Url: This is where the documentation is, relative to the documentation base URL. For example if your docs base URL is at: https://kartoza.github.io/sawps/ your help context document relative URL is /administrator/guide/. This will trigger the content panel link 3\ufe0f\u20e3 above to point to this page.</p> <p>4\ufe0f\u20e3 Title: This will be displayed as 1\ufe0f\u20e3 above in the context help panel.</p> <p>5\ufe0f\u20e3 Intro: This will be shown as lead-in text for the context help panel. See 2\ufe0f\u20e3 above.</p> <p></p> <p>On the page form you can also manage the blocks that appear in the context help. You can select the available block from the 1\ufe0f\u20e3 dropdown if the block is not already created you can create it by clicking on the 2\ufe0f\u20e3 <code>plus</code> icon. To create a new block component for a page, use 3\ufe0f\u20e3  <code>Add another Page block</code> link, and then go and choose or create the actual block content. To set the order in which the block appears in the help panel use 4\ufe0f\u20e3. For ordering, lower number blocks will be listed before higher number blocks. It is up to you to ensure that each number used for ordering is unique.</p> <p></p> <p>The block will appear in the order we set.</p> <p></p>"},{"location":"developer/documentation/context-help/#managing-blocks","title":"Managing blocks","text":"<p>You can view and manage existing blocks from the documentation center 1\ufe0f\u20e3 or add a new block 2\ufe0f\u20e3. We first create a block then go back to the page to add it to the page.</p> <p></p> <p>We can also create a new block and can edit the existing blocks from here. Click on the 1\ufe0f\u20e3 <code>ADD BLOCK</code> button to create the all-new block. You can edit the existing block by clicking on the 2\ufe0f\u20e3 name of the particular block.</p> <p></p> <p>Let's create a new block.</p> <ul> <li> <p>Relative Documentation Url: 1\ufe0f\u20e3 (based on the documentation site wide base url preference) to the documentation page</p> </li> <li> <p>Anchor 2\ufe0f\u20e3 - this is optional and should point to a heading/subheading within the page if populated.</p> </li> <li> <p>Title 3\ufe0f\u20e3 - title for the block. This is automatically filled in from the page unless you specify an override title. Normally you would leave this blank.</p> </li> <li> <p>Thumbnail 4\ufe0f\u20e3 for the block. This is automatically linked to the first image below the anchor in the help document. Usually, you would leave this blank.</p> </li> <li> <p>Description 5\ufe0f\u20e3 for the block. This will be automatically populated from the first paragraph in the linked help documentation.</p> </li> </ul> <p></p> <p>You can also add the child block by choosing from the 1\ufe0f\u20e3 dropdown or by creating a new one by clicking on the 2\ufe0f\u20e3 <code>plus</code> icon. The order number should be unique to show in proper order.</p> <p></p> <p>Let's edit the existing block. Click on the name of the block you want to edit, upon clicking you will be redirected to the change block page where you can edit the block according to the requirements. Once you have done with the editing click on the save to save the changes.</p> <p></p>"},{"location":"developer/documentation/context-help/#page-blocks","title":"Page Blocks","text":"<p>Generally we will not directly use the PageBlocks management area - use the Page manager to add and remove blocks from your page.</p>"},{"location":"developer/documentation/context-help/#conclusion-and-notes","title":"Conclusion and notes","text":"<p>The system for context help has been designed in a generic way. That means that you can use any web site where you can reference content with page links and anchors.</p> <p>\u26d4\ufe0f One word of caution. Do not use a web site as your documentation source if you do not control that site. The content from the help site is pulled directly into your application, which could put you in a compromising position if the content is not 'on message' for your organisation.</p>"},{"location":"developer/documentation/overview/","title":"IDS SAWPS","text":""},{"location":"developer/documentation/overview/#documentation-overview","title":"Documentation overview","text":"<p>This section provides an overview of how the documentation system works.</p>"},{"location":"developer/documentation/overview/#background","title":"Background","text":"<p>Welcome to the instructions for those wishing to contribute to our documentation!</p> <p>Our documentation system is based on the popular mkdocs system. We encourage you to read the upstream documentation from mkdocs for the finer details of how mkdocs. In particular, read this page before you get to work. Mkdocs is not hard, but it may feel initially a little different if you are used to creating your documentation in word.</p> <p>We use mkdocs because it has some great and useful features. Most especially:</p> <ul> <li>The code and the documentation are versioned together. This means that for whatever version of the code we have in our production release, we can be sure the documentation matches that release. We can also look back at changes over time through the version history when needed.</li> <li>It can render beautiful static (not needing a backend server) web sites with great features like search, styling, intuitive navigation etc.</li> <li>It can optionally render PDF documents from the same source markdown.</li> <li>An ecosystem of plugins and themes makes mkdocs really flexible and extensible.</li> </ul>"},{"location":"developer/documentation/overview/#some-terminology","title":"Some terminology","text":"<p>In our documentation, we have organised the information using a specific nomenclature:</p> <ul> <li>guide: A guide is a multi-step workflow / tutorial that leads your through common activities.</li> <li>manual: A collection of documents that describe each part of the project in a matter of fact way without presupposing any specific workflow is being undertaken.</li> </ul> <p>For each of the main topic areas (user, admin, developer, devops, api user) we provide guides and manuals as is appropriate.</p>"},{"location":"developer/documentation/overview/#organisation","title":"Organisation","text":"<p>The documentation is broadly organised in the following structure. This structure may change over time as sections are added / moved / removed:</p> <pre><code>src\n\u251c\u2500\u2500 about\n\u251c\u2500\u2500 administrator\n\u2502   \u251c\u2500\u2500 guide\n\u2502   \u2514\u2500\u2500 manual\n\u251c\u2500\u2500 developer\n\u2502   \u251c\u2500\u2500 documentation\n\u2502   \u251c\u2500\u2500 guide\n\u2502   \u2514\u2500\u2500 manual\n\u251c\u2500\u2500 devops\n\u2502   \u251c\u2500\u2500 guide\n\u2502   \u2514\u2500\u2500 manual\n\u2514\u2500\u2500 user\n    \u251c\u2500\u2500 api\n    \u251c\u2500\u2500 guide\n    \u251c\u2500\u2500 manual\n    \u2514\u2500\u2500 quickstart\n</code></pre>"},{"location":"developer/documentation/overview/#file-naming-conventions","title":"File naming conventions","text":"<p>Please follow these conventions when writing your documentation:</p> <ol> <li>Write file names in all lower case, with hyphens separating words (no spaces). e.g. <code>important-file.md</code> not <code>Important File.md</code> or other deviations.</li> <li>Place the image files in the img folder adjacent to your content.</li> <li>Do not abbreviate any words in file names - but try to use terse, descriptive names.</li> <li>Place your content into the appropriate place as outline in the structure above.</li> <li>Each file should only one level one heading e.g. <code># Page title</code></li> <li>Headings and subheadings should be written as a terse phrase starting with a capital letter and subsequent words in lower case unless they are proper nouns. Do not place a colon after the heading.</li> <li>Use unicode number markers to reference numbers in images e.g. 1\ufe0f\u20e3</li> <li>Every heading / sub-heading should have a single line underneath it summarising the content that will follow. This sentence will be used in the help center in the application to give the user a reference point for the text that will follow. It also makes the help text more consistent and readable.</li> <li>For every section that images, the first image will be used as the thumbnail if the heading is referenced from the application.</li> </ol>"},{"location":"developer/documentation/overview/#contributing-to-the-documentation","title":"Contributing to the documentation","text":"<p> Note: The repo name in the images below is blurred out, you should work against the [PROJECT_NAME] repository when following these notes.</p> <p>To start adding to the documentation navigate to the home page of the repository.</p> <p>Once on the repository home page, 1\ufe0f\u20e3 click on Fork </p> <p>On the next page 1\ufe0f\u20e3 Make sure your github account is selected as the owner and 2\ufe0f\u20e3 make sure the \"Copy the <code>main</code> branch only\" option is ticked as you will only need the main branch. </p> <p>Once you have forked the repository, ensure that you are working in the main branch. </p> <p>Once you are in your fork of the repository, click on <code>.</code> on your keyboard. This will open a web editor where you can begin adding to, or editing, the documentation. </p> <p>Once the editor loads, you will be greeted by 1\ufe0f\u20e3 a preview of the project's README.txt. 2\ufe0f\u20e3 Click on the <code>docs</code> directory in the menu on the left, this will expand the directory. To confirm that you are working in the right branch 3\ufe0f\u20e3\ufe0f it will say <code>main</code> in the bottom left of the editor. </p> <p>Once you have expanded the <code>docs</code> directory, 1\ufe0f\u20e3 click on the <code>src</code> directory. All sub-directories within the <code>src</code> directory contain the files that become the documentation. Each sub-directory contains an <code>index.md</code> file that is required for the building of the documentation and static site. If you add a new sub-directory into any folder it must also contain a populated <code>index.md</code> file. </p> <p>Once you have chosen which section of documentation you would like to edit (e.g. user/guide/index.md), click on the file and it will open in the web editor. </p> <p>Once you have the file open, you can start adding to the documentation using Markdown syntax. If you need to add images to your documentation, add them to the relative <code>img</code> sub-directories following the naming conventions set out in the <code>naming-convention.README</code> within the <code>img</code> folders. </p> <p>When you have completed making additions to (or editing) the documentation, 1\ufe0f\u20e3 click on the source control tab then 2\ufe0f\u20e3 click on the <code>plus</code> symbol next to the changes you are finished with to stage them, 3\ufe0f\u20e3\ufe0f add a commit message that is associated with the work you have done, and the 4\ufe0f\u20e3 Click on <code>Commit &amp; Push</code> </p> <p>Once you have committed your changes, 1\ufe0f\u20e3 Click on the burger menu and then 2\ufe0f\u20e3 click on <code>Go To Repository</code> </p> <p>Your fork of the repository will be opened in a new tab within your browser, navigate to that tab. Once there 1\ufe0f\u20e3 ensure you are on the <code>main</code>, you should see how many commits ahead of the upstream branch you are, then 2\ufe0f\u20e3 click on <code>Contribute</code>-&gt; <code>Open pull request</code>. </p> <p>On the next screen, 1\ufe0f\u20e3 give your pull request a meaningful title, 2\ufe0f\u20e3 give additional details regarding changes made in the larger text box, then 3\ufe0f\u20e3\ufe0f click on <code>Create pull request</code>. Also ensure you are creating a pull request to the upstream <code>main</code> branch from your <code>main</code> branch. </p> <p>Once your pull request is opened you need to wait for it to be merged before you can open a new one.</p>"},{"location":"developer/documentation/overview/#creating-new-files","title":"Creating new files","text":"<p>Open the Web Editor by clicking on <code>.</code> on your keyboard when you are on your fork of the repository. The screen below should appear until the editor loads.</p> <p></p> <p>Navigate to the relative subfolder within the <code>src</code> folder to which you would like to add a new file. (e.g. <code>src</code> -&gt; <code>user</code> -&gt; <code>manual</code>). Also ensure that you are in the <code>Explorer</code> tab 1\ufe0f\u20e3 of the web editor.</p> <p></p> <p>Once you have selected a subfolder, click on the <code>New File...</code> button 1\ufe0f\u20e3 to the right of the repository name.</p> <p></p> <p>Give your file a meaningful name (following the File naming conventions from above) and end the file name with <code>.md</code> to ensure that the file is saved as a markdown file. Once you have given your file a name, click <code>Enter</code> on your keyboard to finish creating it.</p> <p></p> <p>Once you have created a new file, you can start adding to the documentation using Markdown syntax. You must add a header section to each new file! Please read the Page metadata section below regarding adding the standard header to new files.</p> <p></p> <p>If you need to add images to your documentation, add them to the relative <code>img</code> subfolders following the naming conventions set out in the <code>naming-convention.README</code> within the <code>img</code> subfolders (e.g. images for the User Guide would be added to the <code>user/guide/img/</code> subfolder 1\ufe0f\u20e3). Adding images is explained further in the Uploading images / media section further down the page.</p> <p></p> <p>Hint: You can click on the <code>naming-convention.README</code> file to view it and, in turn, read the image naming conventions. Just remember to switch back to the document that you are working on.</p> <p>When you have completed making additions to (or editing) the documentation, click on the source control tab 1\ufe0f\u20e3, then click on the <code>plus</code> symbol 2\ufe0f\u20e3 next to the changes you are finished with to stage them, add a commit message 3\ufe0f\u20e3\ufe0f that is associated with the work you have done, and the click on <code>Commit &amp; Push</code> 4\ufe0f\u20e3.</p> <p></p> <p>Once you have committed your changes, Click on the burger menu 1\ufe0f\u20e3 and then click on <code>Go To Repository</code> 2\ufe0f\u20e3.</p> <p></p> <p>Your fork of the repository will be opened in a new tab within your browser, navigate to that tab (your browser might block pop ups, so you might need to manually open the pop up to get back to your fork of the repository). Once there, ensure you are on the <code>main</code> branch 1\ufe0f\u20e3 (you should see how many commits ahead of the upstream branch you are), then click on <code>Contribute</code> 2\ufe0f\u20e3 -&gt; <code>Open pull request</code> 3\ufe0f\u20e3\ufe0f.</p> <p></p> <p>On the next screen, give your pull request a meaningful title 1\ufe0f\u20e3, give additional details regarding changes made in the larger text box 2\ufe0f\u20e3, then click on <code>Create pull request</code> 3\ufe0f\u20e3\ufe0f. Also ensure you are creating a pull request to the upstream <code>main</code> branch from your <code>main</code> branch.</p> <p></p> <p>Once your pull request is opened you need to wait for it to be merged before you can open a new one.</p>"},{"location":"developer/documentation/overview/#page-metadata","title":"Page metadata","text":"<p>Whenever you create a new file, you should add the standard header to the top of the file:</p> <pre><code>---\ntitle: PROJECT_TITLE\nsummary: PROJECT_SUMMARY\n    - PERSON_1\n    - PERSON_2\ndate: DATE\nsome_url: PROJECT_GITHUB_URL\ncopyright: Copyright 2023, PROJECT_OWNER\ncontact: PROJECT_CONTACT\nlicense: This program is free software; you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.\n#context_id: 1234\n---\n</code></pre> <p>The summary can be updated to include your name for documents you contribute to.</p> <p>The context_id is used to create a unique permalink to this document, and is optional. See further down in this document for more details.</p>"},{"location":"developer/documentation/overview/#navigation","title":"Navigation","text":"<p>All pages need to be added to the 'Nav' section of the <code>mkdocs-base.yml</code> file. This will ensure that it is available in the menus and that mkdocs renders without errors. For example, if you wish to add a new page to the User Guide area, in Nav you would add a line like this:</p> <p><code>- Navigating the map: user/guide/map-navigation.md</code></p> <p>Sometimes you may not wish to have the new page displayed in the menu system (this can be useful when, for example, it is accessed via a link in another page). In these cases, leave the menu entry part blank e.g.</p> <p><code>- \"\": user/guide/map-navigation.md</code></p> <p>Mkdocs will still generate the page but it will not be added to the menu.</p>"},{"location":"developer/documentation/overview/#editing-the-nav-section","title":"Editing the 'nav' section","text":"<p>Once you have created a new file (e.g. <code>user/manual/example-file.md</code> 1\ufe0f\u20e3), you will need to add it to the site navigation.</p> <p></p> <p>To edit the site navigation, click on <code>docs/mkdocs-base.yml</code> 1\ufe0f\u20e3.</p> <p></p> <p>In the <code>mkdocs-base.yml</code>, scroll down to the <code>nav</code> section and add the file path to the relevant section. E.g. <code>user/manual/example-file.md</code> would be added to Users -&gt; Manual as <code>- Example file: user/manual/example-file.md</code> 1\ufe0f\u20e3. Ensure your added page has the correction indentation in the <code>nav</code> section, otherwise the site will not build.</p> <p></p> <p>If you have added a page but do not want it to show up in the site navigation, then instead of a page name just put <code>\"\"</code>. E.g. <code>- \"\": user/manual/example-file.md</code> 1\ufe0f\u20e3.</p> <p></p>"},{"location":"developer/documentation/overview/#uploading-images-media","title":"Uploading images / media","text":"<p>Note: If you wish to upload a gif, or a small video, you can follow the same steps as below (GitHub does limit the upload size to 10 MB).</p> <p>All folders and subfolders should contain an <code>img</code> subfolder (e.g. <code>user/guide/img/</code>) containing a <code>naming-convention.README</code>. If you add a new folder, then you should add a new <code>img</code> subfolder and copy a <code>naming-convention.README</code> from another existing <code>img</code> subfolder into your newly created folder.</p> <p></p> <p>To upload an image, right-click on the relative <code>img</code> subfolder and select <code>upload</code> from the menu that appears.</p> <p></p> <p>Select an image from your computer, using the file explore that opens, and then click on the <code>Open</code> Button 1\ufe0f\u20e3 (The attached screenshot is from a Linux machine however, Windows also has an open button).</p> <p></p> <p>If your image does not follow the naming conventions, right-click on the image, click on <code>Rename...</code> on the menu that appears, and then give your image an appropriate name.</p> <p></p> <p>Useful tools for capturing images and screencasts are: Peek (For screencasts), Flameshot (For images), Shutter (For images), and Lightshot (For images)</p>"},{"location":"developer/documentation/overview/#technical-notes","title":"Technical notes","text":""},{"location":"developer/documentation/overview/#working-locally","title":"Working locally","text":"<p>If you want to work with the documentation locally (i.e. directly on your PC), you need to follow this general process:</p> <ol> <li>Install python</li> <li>Install pip</li> <li>Install virtualenv (<code>pip install virtualenv</code>)</li> <li>Make the docs folder your working directory (<code>cd docs</code>)</li> <li>Create the virtual env in the docs folder (<code>python -m venv env</code>)</li> <li>Activate the venv (<code>source env/bin/activate</code>)</li> <li>Install the python modules listed in docs/requirements.txt (<code>pip install -r requirements.txt</code>)</li> <li>If you are on Linux or macOS, open the docs directory in a shell and run <code>build-docs-html.sh</code></li> <li>In the docs directory, run <code>mkdocs serve</code></li> <li>Open your web browser at https://localhost:8000 to view the rendered docs.</li> </ol> <p>Note that <code>mkdocs serve</code> will dynamically re-render the docs any time you make a change. The process above is illustrated in the diagram below:</p> <p></p>"},{"location":"developer/documentation/overview/#hooks","title":"Hooks","text":"<p>We implement two hooks (plugins for mkdocs that are invoked during the docs rendering process).</p> <ul> <li>uuid_redirects_hook.py - this is used to handle page redirects from a uuid - see below for more details</li> <li>python_manual_hook.py - this is used to auto-generate the reference guide for the python modules, classes and functions that make up the code base for this project.</li> </ul>"},{"location":"developer/documentation/overview/#permalinks-for-user-and-administration-documents","title":"Permalinks for user and administration documents","text":"<p>If you are a developer, you should be aware of the workflow for creating user and administrator documentation for each page you create.</p> <p>Every page should have a help link on it that leads to the appropriate manual page. The workflow for doing this is:</p> <ol> <li>Generate a new page UUID using the provided python utility e.g. <code>./create-uuid.py</code></li> <li>Create a new page in the appropriate manual section e.g. <code>docs/src/user/manual/login.md</code></li> <li>In the metadata section at the top of the page, add the context id e.g. <code>context_id: V4cVEFd2TmwYJVb5HvWRwa</code></li> <li>In your django view, set up your help button to point to the site url and your context id. e.g. <code>https://siteurl/V4cVEFd2TmwYJVb5HvWRwa</code></li> </ol> <p>Whenever the user visits the page using the UUID URL, they will be redirected to the correct page e.g. <code>https://siteurl/login/</code>. This system protects us from file renaming and reorganising on the site, and ensures that the help link will always remain valid.</p>"},{"location":"developer/documentation/overview/#generating-pdfs","title":"Generating PDFS","text":"<p>To generate PDFS, <code>cd</code> into <code>PROJECT_NAME/docs</code> and then run <code>./build-docs-pdf</code> in a local terminal</p>"},{"location":"developer/documentation/overview/#generating-static-site-locally","title":"Generating static site locally","text":"<p>To generate HTML, <code>cd</code> into <code>PROJECT_NAME/docs</code> and then run <code>./build-docs-html</code> in a local terminal. You can then run <code>mkdocs serve</code> to generate the static site on your local host, if there is a port conflict you can specify the port using the <code>-a</code> flag e.g <code>mkdocs serve -a 127.0.0.1:8001</code>.</p>"},{"location":"developer/guide/","title":"IDS SAWPS","text":""},{"location":"developer/guide/#developer-guide","title":"Developer guide","text":"<p>In this section of the documentation, we aim to onboard developers onto the process of setting up a developer workstation, understanding the system architecture, contributing back to the project and so forth. Here is a brief overview of the content provided here:</p> <ul> <li> <p>Architecture: Here we outline the system architecture using ER Diagrams, Software Component Diagrams etc.</p> </li> <li> <p>Prerequisites:  An overview of the software that needs to be installed before you can start.</p> </li> <li> <p>Cloning: In this section, we cover how to make a local working copy on your machine.</p> </li> <li> <p>IDE Setup: Here we walk through setting up your IDE.</p> </li> <li> <p>Configuration: This covers standard configuration tasks that need to be done once the site is brought online.</p> </li> <li> <p>Design: This section describes the visual design approach for the user interface.</p> </li> <li> <p>Workflows: Examples of typical workflows for adding features, fixing bugs etc.</p> </li> <li> <p>Testing: This section focuses on setting up end-to-end testing for the project.</p> </li> </ul>"},{"location":"developer/guide/architecture/","title":"IDS SAWPS","text":""},{"location":"developer/guide/architecture/#system-architecture","title":"System architecture","text":"<p>In this section, we outline the system architecture using ER Diagrams, Software Component Diagrams etc. and key libraries / frameworks used in this project.</p>"},{"location":"developer/guide/architecture/#frameworks-used","title":"Frameworks used","text":"<p>The following is a list, with brief descriptions, of the key components used in creating this platform. Please refer to their individual documentation for in-depth technical information.</p> Logo Name Notes Django Django makes it easier to build better web apps more quickly and with less code. ReactJS React lets you build user interfaces out of individual pieces called components. Create your own React components like <code>Thumbnail</code>, <code>LikeButton</code>, and <code>Video</code>. Then combine them into entire screens, pages, and apps. Docker Accelerate how you build, share, and run applications. Docker helps developers build, share, and run applications anywhere \u2014 without tedious environment configuration or management. Django Rest Framework Django REST framework is a powerful and flexible toolkit for building Web APIs. MapLibre Open-source mapping libraries for web and mobile app developers. PostGIS PostGIS extends the capabilities of the PostgreSQL relational database by adding support storing, indexing and querying geographic data. PostgreSQL PostgreSQL is a powerful, open source object-relational database system with over 35 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance. Tegola An open source vector tile server written in Go, Tegola takes geospatial data and slices it into vector tiles that can be efficiently delivered to any client. Mapbox Mapbox is a mapping and location cloud platform for developers Maputnik Maputnik is a free and open source visual editor for the Mapbox GL style specification. Plumber The plumber package allows you to create APIs from your R code. Jenkins It is used to continually create and test software projects, making it easier for developers and DevOps engineers to integrate changes to the project and for consumers to get a new build. Argo Argo Events is an event-driven workflow automation framework and dependency manager that helps you manage Kubernetes resources, Argo Workflows, and serverless workloads on events from a variety of source."},{"location":"developer/guide/architecture/#high-level-system-architecture","title":"High-level system architecture","text":"<p>This is the high-level system architecture relating to the interaction between the applications. </p> <p>This is an overview of the interaction between the backend and frontend. </p> <p>This is the high level overview of the DevOps implementation. </p>"},{"location":"developer/guide/architecture/#data-model","title":"Data model","text":"<p>The project's ERD can be found here</p> <p></p> <p>Click SchemaSpy Documentation for the full documentation of the data model.</p>"},{"location":"developer/guide/cloning/","title":"IDS SAWPS","text":""},{"location":"developer/guide/cloning/#checking-out-the-code","title":"Checking out the Code","text":""},{"location":"developer/guide/cloning/#getting-source-code","title":"\ud83d\udc69\u200d\ud83d\udcbb Getting source code","text":"<pre><code>git clone https://github.com/kartoza/sawps.git\n</code></pre>"},{"location":"developer/guide/configuration/","title":"IDS SAWPS","text":""},{"location":"developer/guide/configuration/#project-setup","title":"Project Setup","text":""},{"location":"developer/guide/configuration/#clone-sawps-repository","title":"Clone SAWPS repository","text":"<p>This will clone the SAWPS repository to your machine</p> <pre><code>git clone https://github.com/kartoza/sawps.git\n</code></pre>"},{"location":"developer/guide/design/","title":"IDS SAWPS","text":""},{"location":"developer/guide/design/#design","title":"Design","text":""},{"location":"developer/guide/design/#design-sheet","title":"Design Sheet","text":"<p>The design sheet can be found on the Figma Board.</p>"},{"location":"developer/guide/design/#wire-frame-model","title":"Wire-frame Model","text":"<p>The wire frame model for the project can be found on the Figma Board.</p>"},{"location":"developer/guide/ide-setup/","title":"IDS SAWPS","text":""},{"location":"developer/guide/ide-setup/#setting-up-a-dev-env","title":"Setting up a dev env","text":"<p>Please follow the Kartoza coding standards.</p>"},{"location":"developer/guide/ide-setup/#how-to-run-project-with-visual-studio-code","title":"\ud83c\udfc3\u200d\u2642\ufe0f How To Run Project with Visual Studio Code","text":"<p>Copy and customize environnment file: Create a copy of the <code>deployment/.template.env</code> file and name it <code>deployment/.env</code>. Update the <code>deployment/.env</code> file with your project-specific settings. </p> <p>Add a <code>.env</code> file in the project root directory with the below content:</p> <pre><code>COMPOSE_PROJECT_NAME=sanbi\n</code></pre> <p>This is to ensure the containers that VS Code builds are using that project name. For more information, follow this link.</p> <p>Ensure Dev Containers extension is installed </p> <p>Build and open project in devcontainer: press <code>Cmd+Shift+P</code> (macOS) or <code>Ctrl+Shift+P</code> (Windows/Linux) to open the Command Palette. Type <code>Dev Containers: Rebuild and Reopen in Container</code> and select it to reopen the folder inside the devcontainer. </p> <p>Change the permissions of the django_project folder:</p> <pre><code>chmod -R a+rw django_project\n</code></pre> <p>Install dependencies inside the container: Press <code>Cmd+Shift+P</code> (macOS) or <code>Ctrl+Shift+P</code> (Windows/Linux), type <code>Tasks: Run Tasks</code> and select it. Choose <code>React: Install dependencies</code> to install the necessary dependencies.</p> <p></p> <p></p> <p>Run the migrations inside the container: Press <code>Cmd+Shift+P</code> (macOS) or <code>Ctrl+Shift+P</code> (Windows/Linux), and type <code>Tasks: Run Tasks</code> and select it. Choose <code>Django: Migrate</code>.</p> <p></p> <p></p>"},{"location":"developer/guide/ide-setup/#open-the-developer-site","title":"\ud83d\udc69\u200d\ud83d\udcbb Open the developer site","text":"<p>Run the project inside the container: Press <code>Cmd+Shift+D</code> (macOS) or <code>Ctrl+Shift+D</code> (Windows/Linux), and choose <code>Django+React</code> in the RUN AND DEBUG dropdown.</p> <p></p> <p>Review the list of forwarded ports from the container to your local host:</p> <p></p> <p>Open your web browser and go to localhost:8000 to view the running application.</p>"},{"location":"developer/guide/ide-setup/#create-a-super-user","title":"\ud83d\udc69\u200d\ud83c\udfed Create a super user","text":""},{"location":"developer/guide/ide-setup/#restoring-layer-schema-for-map","title":"\ud83d\udcbd Restoring layer schema for map","text":"<p>The full dump file for layer schema is ~5.3GB, meanwhile compact dump file is only 24MB.</p> <p>Download Full Dump File for Layer.</p> <p>Download Compact Dump File for Layer.</p> <p>Preview for compact dump file: </p> <p>Copy the dump file to db container. Then run pg_restore from inside db container to restore the dump file.</p> <pre><code>docker cp sanbi_layer_db_compact.dump deployment-db-1:/home/sanbi_layer_db_compact.dump\ndocker exec -it deployment-db-1 /bin/bash\ncd /home\npg_restore -h 127.0.0.1 -U docker -d django -n layer sanbi_layer_db_compact.dump\n</code></pre>"},{"location":"developer/guide/ide-setup/#load-fixtures","title":"Load Fixtures","text":"<p>To load fixtures into your database, you can use the <code>loaddata</code> management command.</p> <p>Run this command to load all the fixtures. </p><pre><code>cd django_project\npython manage.py loaddata fixtures/*.json\n</code></pre> <p>Run this command to load the specific fixture. </p><pre><code>cd django_project\npython manage.py loaddata fixtures/&lt;name of the fixture&gt;.json\n</code></pre>"},{"location":"developer/guide/prerequisites/","title":"IDS SAWPS","text":""},{"location":"developer/guide/prerequisites/#project-prerequisites","title":"Project Prerequisites","text":"<ul> <li>This Project utilises VSCode as the preferred IDE. Please refer to the IDE Setup documentation for more information.</li> <li>Ensure you have cloned the code from the repository. Please refer to the Cloning documentation for more information.</li> </ul>"},{"location":"developer/guide/testing/","title":"IDS SAWPS","text":""},{"location":"developer/guide/testing/#testing","title":"Testing","text":"<p>End-to-end testing.</p>"},{"location":"developer/guide/testing/#essential-reading","title":"Essential reading","text":"<ul> <li>https://playwright.dev/</li> <li>https://direnv.net/docs/installation.html</li> </ul>"},{"location":"developer/guide/testing/#setting-up-a-testing-environment","title":"Setting up a testing environment","text":"<p>Please follow the Kartoza coding standards.</p>"},{"location":"developer/guide/testing/#testing-prerequisites","title":"Testing prerequisites","text":"<p>The primary framework used is playwright.</p>"},{"location":"developer/guide/testing/#setting-up-playwright","title":"Setting up playwright","text":"<p>Note: Playwright is installed locally on your device and NOT in the container.</p> <p>Navigate to the <code>playwright</code> directory, there are two other directories present:</p> <pre><code>1. ci-tests\n2. staging-tests\n</code></pre> <p>Navigate to <code>ci-tests</code>.</p> <p>To install <code>playwright</code> ensure you have Node.js installed.</p> <p>Once <code>Node.js</code> is installed, use <code>npm</code> JavaScript package manager to install <code>playwright</code>.</p> <p>To install dependencies defined in <code>package.json</code> file:</p> <pre><code>npm install\n</code></pre> <p>To install playwright browsers and OS specific dependencies:</p> <pre><code>npx playwright install --with-deps\n</code></pre> <p>Note:</p> <ul> <li>By default, it uses TypeScript(<code>*.ts</code>).</li> </ul> <p>This command will install all the required browsers and other dependencies. The directory structure will be as follows:</p>"},{"location":"developer/guide/testing/#running-tests","title":"Running tests","text":"<p>Note: To run tests locally ensure the Django project is being served up locally. For tests on staging/production, ensure the website is up.</p> <p>By default, tests will run on three browsers in headless mode.</p> <p>To run all tests:</p> <pre><code>npx playwright test\n</code></pre> <p>To run a specific test file:</p> <pre><code>npx playwright test tests/'TESTNAME'.spec.ts\n</code></pre> <p>To run it in UI mode, one can add <code>--ui</code> tag at the end.</p> <pre><code>npx playwright test --ui\n</code></pre> <p>To run a specific file in UI mode:</p> <pre><code>npx playwright test --ui tests/'TESTNAME'.spec.ts\n</code></pre>"},{"location":"developer/guide/testing/#test-reports","title":"Test reports","text":"<p>To generate test reports:</p> <pre><code>npx playwright show-report\n</code></pre>"},{"location":"developer/guide/testing/#continuous-integration-testing","title":"Continuous integration testing","text":"<p>Use of continuous integration and playwright.</p> <p>The CI for this project is present in the directory <code>.github/workflows</code> in the <code>build-and-test.yml</code> file.</p> <p>The action builds and tests for and push or a pull request is made into the main repository.</p> <p></p> <p>It uses the <code>template.test.env</code> file to set up the environment. Which is copied into a new file <code>.env</code> while setting up the containers.</p> <p></p> <p>Testing the Django endpoint:</p> <p></p> <p>Running coverage tests:</p> <p></p> <p>On setting up and testing using playwright.</p> <p></p> <ol> <li>Updates dependencies: Installs various dependencies required</li> <li>Installs exact dependencies for <code>ci</code>, continuous integration.</li> <li>Installs the playwright browsers and its packages.</li> <li>Runs the playwright tests</li> </ol> <p>Reports: It will generate a report as HTML document and it will be retained for 30 days if it is present in that directory</p> <p></p>"},{"location":"developer/guide/testing/#staging-tests","title":"Staging tests","text":""},{"location":"developer/guide/testing/#setting-up-environment","title":"Setting up environment","text":"<p>Navigate to <code>staging-tests</code>.</p> <p>NixOS</p> <p>If you are a NixOS user, you can set up direnv and then cd into this directory in your shell.</p> <p>When you do so the first time, you will be prompted to allow direnv which you can do using this command:</p> <pre><code>direnv allow\n</code></pre> <p>\ue678 This may take a while the first time as NixOS builds you a sandbox environment.</p> <p>Non-NixOS</p> <p>For a non-NixOS user(Debian/Ubuntu) set up your environment by the following commands.</p>"},{"location":"developer/guide/testing/#recording-a-test","title":"Recording a test","text":"<p>There is a bash helper script that will let you quickly create a new test:</p> <pre><code>Usage: ./record-test.sh TESTNAME\ne.g. ./record-test.sh mytest\nwill write a new test to tests/mytest.spec.ts\nDo not use spaces in your test name.\nTest files MUST END in .spec.ts\n\nAfter recording your test, close the test browser.\nYou can then run your test by doing:\n./run-tests.sh\n</code></pre> <p>\ue678 The first time you record a test, it will store your session credentials in a file ending in <code>auth.json</code>. This file should NEVER be committed to git / shared publicly. There is a gitignore rule to ensure this.</p>"},{"location":"developer/guide/testing/#running-a-test","title":"Running a test","text":"<pre><code>./run-tests.sh\n</code></pre> <p>The report can be downloaded and shared.</p>"},{"location":"developer/guide/workflows/","title":"IDS SAWPS","text":""},{"location":"developer/guide/workflows/#developer-workflows","title":"Developer Workflows","text":""},{"location":"developer/guide/workflows/#adding-a-feature","title":"Adding a Feature","text":"<ol> <li> <p>Creating a GitHub Issue.</p> <p>Creating a GitHub issue for a new feature is the first step in proposing and discussing enhancements in a project. This developer guide provides a step-by-step process for creating an issue specifically for suggesting new features on GitHub.</p> </li> <li> <p>Wait for it to be added to a Sprint.</p> <ul> <li>Allow time for the new feature or issue to be scheduled and included in a sprint or development cycle.</li> </ul> </li> <li> <p>Functional Tests.</p> <ul> <li>Develop and execute functional tests to ensure that the newly added feature or code meets the specified requirements and functions as intended.</li> </ul> </li> <li> <p>Playwright Tests.</p> <ul> <li>Implement and run Playwright tests to perform end-to-end testing, validating the functionality and behaviour of the application from a user's perspective.</li> </ul> </li> <li> <p>Write End User Documentation.</p> <ul> <li>Create comprehensive documentation that provides end users with clear instructions and information on how to use the new feature or functionality.</li> </ul> </li> </ol>"},{"location":"developer/guide/workflows/#steps-to-create-an-issue","title":"Steps to create an issue","text":""},{"location":"developer/guide/workflows/#1-navigate-to-the-repository","title":"1. Navigate to the repository","text":"<ul> <li>Open a web browser and go to the GitHub repository where you want to create the issue.</li> </ul>"},{"location":"developer/guide/workflows/#2-access-the-issues-section","title":"2. Access the issues section","text":"<ul> <li>Click on the <code>Issues</code> tab in the repository's navigation bar.</li> </ul>"},{"location":"developer/guide/workflows/#3-start-a-new-issue","title":"3. Start a new issue","text":"<ul> <li>Click the <code>New Issue</code> button to create a new issue.</li> </ul>"},{"location":"developer/guide/workflows/#4-fill-in-the-title-and-description","title":"4. Fill in the title and description","text":"<ul> <li>Title: Provide a concise and descriptive title for the issue.</li> <li>Description: Clearly explain the details of the feature.</li> </ul>"},{"location":"developer/guide/workflows/#5-assignees","title":"5. Assignees","text":"<ul> <li>Optionally, assign the issue to one or more team members responsible for addressing it.</li> </ul>"},{"location":"developer/guide/workflows/#6-labels","title":"6. Labels","text":"<ul> <li>Apply relevant labels to categorise the issue (e.g., bug, enhancement, feature). This helps in organising and prioritising tasks.</li> </ul>"},{"location":"developer/guide/workflows/#7-add-project","title":"7. Add project","text":"<ul> <li>Associate the new issue with a project board if applicable.</li> <li>Projects help organise and track the progress of related tasks.</li> </ul>"},{"location":"developer/guide/workflows/#8-submit-the-issue","title":"8. Submit the issue","text":"<ul> <li>Click the <code>Submit new issue</code> button to create the issue.</li> </ul>"},{"location":"developer/guide/workflows/#9-interact-and-follow-up","title":"9. Interact and follow up","text":"<ul> <li>Engage in discussions with other contributors and maintainers in the issue's comment section.</li> <li>Provide additional information if requested and stay involved in the resolution process.</li> </ul>"},{"location":"developer/guide/workflows/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Be Descriptive: Clearly articulate the feature to help others understand the context.</p> </li> <li> <p>Assign Appropriately: Assign the issue to the relevant team member.</p> </li> <li> <p>Label Categorisation: Apply appropriate labels for better issue categorisation.</p> </li> <li> <p>Stay Engaged: Follow up on the issue and participate in discussions to assist in its resolution.</p> </li> </ol>"},{"location":"developer/guide/workflows/#conclusion","title":"Conclusion","text":"<p>Creating a GitHub issue for a new feature is a fundamental aspect of collaborative development. By following this developer guide, you ensure that the feature requests are well-documented and effectively communicated. This process contributes to the overall enhancement and progress of the project, fostering a collaborative environment for developing and implementing exciting new features.</p>"},{"location":"developer/guide/workflows/#fixing-a-bug","title":"Fixing a Bug","text":"<ol> <li> <p>Creating a GitHub Issue.</p> <p>Initiating a GitHub issue for a bug is the initial step in identifying, discussing, and resolving issues in a project. This developer guide outlines the step-by-step process of creating a bug-related issue on GitHub.</p> </li> <li> <p>Wait for it to be added to a Sprint.</p> <ul> <li>Allow time for the identified bug fix to be scheduled and incorporated into a sprint or development cycle.</li> </ul> </li> <li> <p>Regression Test.</p> <ul> <li>Conduct thorough regression testing to ensure the bug fix does not introduce new issues or negatively impact existing functionality.</li> </ul> </li> <li> <p>Implement Fix.</p> <ul> <li>Make the necessary code changes to address and resolve the identified bug, following the project's coding standards and guidelines.</li> </ul> </li> </ol>"},{"location":"developer/guide/workflows/#steps-to-create-a-bug-fix-issue","title":"Steps to create a bug-fix issue","text":""},{"location":"developer/guide/workflows/#1-navigate-to-the-repository_1","title":"1. Navigate to the repository","text":"<ul> <li>Open a web browser and go to the GitHub repository where the bug is identified.</li> </ul>"},{"location":"developer/guide/workflows/#2-access-the-issues-section_1","title":"2. Access the issues section","text":"<ul> <li>Click on the <code>Issues</code> tab in the repository's navigation bar.</li> </ul>"},{"location":"developer/guide/workflows/#3-start-a-new-issue_1","title":"3. Start a new issue","text":"<ul> <li>Click the <code>New Issue</code> button to create a new issue specifically for the bug.</li> </ul>"},{"location":"developer/guide/workflows/#4-fill-in-the-title-and-description_1","title":"4. Fill in the Title and Description","text":"<ul> <li>Title: Provide a concise and descriptive title for the bug.</li> <li>Description: Clearly explain the details of the bug, including steps to reproduce if possible.</li> </ul>"},{"location":"developer/guide/workflows/#5-assignees_1","title":"5. Assignees","text":"<ul> <li>Optionally, assign the issue to one or more team members responsible for fixing the bug.</li> </ul>"},{"location":"developer/guide/workflows/#6-labels_1","title":"6. Labels","text":"<ul> <li>Apply relevant labels to categorise the issue (e.g., bug, enhancement, feature). This helps in organising and prioritising tasks.</li> </ul>"},{"location":"developer/guide/workflows/#7-add-project_1","title":"7. Add Project","text":"<ul> <li>Associate the new bug issue with a project board if applicable.</li> <li>Projects help organise and track the progress of related tasks.</li> </ul>"},{"location":"developer/guide/workflows/#8-submit-the-issue_1","title":"8. Submit the Issue","text":"<ul> <li>Click the <code>Submit new issue</code> button to create the bug-related issue.</li> </ul>"},{"location":"developer/guide/workflows/#9-interact-and-follow-up_1","title":"9. Interact and Follow Up","text":"<ul> <li>Engage in discussions with other contributors and maintainers in the issue's comment section.</li> <li>Provide additional information if requested and stay involved in the resolution process.</li> </ul>"},{"location":"developer/guide/workflows/#best-practices_1","title":"Best Practices","text":"<ol> <li> <p>Be Descriptive: Clearly articulate the bug to help others understand the context.</p> </li> <li> <p>Assign Appropriately: Assign the issue to the relevant team member responsible for fixing the bug.</p> </li> <li> <p>Label Categorisation: Apply appropriate labels for better issue categorisation.</p> </li> <li> <p>Stay Engaged: Follow up on the issue and participate in discussions to assist in its resolution.</p> </li> </ol>"},{"location":"developer/guide/workflows/#conclusion_1","title":"Conclusion","text":"<p>Creating a GitHub issue for fixing a bug is a crucial aspect of collaborative development. This developer guide ensures that bug reports are well-documented and effectively communicated, contributing to the overall stability and progress of the project.</p>"},{"location":"developer/guide/workflows/#make-pr-for-featurebug-fix","title":"Make PR for Feature/Bug Fix","text":""},{"location":"developer/guide/workflows/#committing-to-project","title":"Committing To Project","text":"<p>Follow our commit message conventions.</p>"},{"location":"developer/guide/workflows/#pull-request-template","title":"Pull Request Template","text":"<p>If it has related issues, add links to the issues(like <code>#123</code>) in the description. Fill in the Pull Request Template by checking your case.</p>"},{"location":"developer/guide/templates/commit-message-convention/","title":"IDS SAWPS","text":""},{"location":"developer/guide/templates/commit-message-convention/#commit-message-convention","title":"Commit Message Convention","text":""},{"location":"developer/guide/templates/commit-message-convention/#why-use-a-convention","title":"Why Use a Convention?","text":"<ul> <li> <p>Clarity: Clearly explain each commit's purpose.</p> </li> <li> <p>Searchability: Easily find specific changes using commit messages.</p> </li> <li> <p>Release Notes: Simplify the creation of meaningful release notes.</p> </li> <li> <p>Collaboration: Improve teamwork with a standardised way to document changes.</p> </li> </ul>"},{"location":"developer/guide/templates/commit-message-convention/#steps-to-set-up-a-convention","title":"Steps to Set Up a Convention","text":""},{"location":"developer/guide/templates/commit-message-convention/#1-choose-a-format","title":"1. Choose a Format","text":"<pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;message&gt;\n</code></pre>"},{"location":"developer/guide/templates/commit-message-convention/#commit-message-format","title":"Commit Message Format","text":"<ul> <li><code>&lt;type&gt;</code>: Purpose of the commit (e.g., <code>feat</code>, <code>fix</code>, <code>docs</code>).</li> <li><code>&lt;scope&gt;</code> (optional): Module/component affected by the commit.</li> <li><code>&lt;message&gt;</code>: Clear description of changes made.</li> </ul>"},{"location":"developer/guide/templates/commit-message-convention/#define-types","title":"Define Types","text":"<p>Common types include:</p> <ul> <li>feat: New feature or significant change.</li> <li>fix: Bug fix.</li> <li>docs: Documentation changes.</li> <li>style: Code style changes.</li> <li>refactor: Code refactoring.</li> <li>test: Test-related changes.</li> <li>chore: Routine tasks or maintenance.</li> </ul>"},{"location":"developer/guide/templates/commit-message-convention/#message-guidelines","title":"Message Guidelines","text":"<ul> <li>Use the imperative mood.</li> <li>Keep messages concise.</li> </ul>"},{"location":"developer/guide/templates/commit-message-convention/#examples","title":"Examples","text":""},{"location":"developer/guide/templates/commit-message-convention/#new-feature","title":"New Feature:","text":"<pre><code>feat(user-auth): add user registration\n</code></pre>"},{"location":"developer/guide/templates/commit-message-convention/#bug","title":"Bug:","text":"<pre><code>fix(api): resolve status issue\n</code></pre>"},{"location":"developer/guide/templates/commit-message-convention/#documentation","title":"Documentation:","text":"<pre><code>docs(readme): update installation\n</code></pre>"},{"location":"developer/guide/templates/pull-request-template/","title":"IDS SAWPS","text":""},{"location":"developer/guide/templates/pull-request-template/#pull-request-template","title":"Pull Request Template","text":""},{"location":"developer/guide/templates/pull-request-template/#pull-request","title":"Pull Request","text":"<ul> <li>Push the code on GitHub.</li> <li>Click on the <code>Compare &amp; pull request</code> button to create a PR.</li> </ul>"},{"location":"developer/guide/templates/pull-request-template/#description","title":"Description","text":"<ul> <li>Describe the purpose and context of the changes made in this PR.</li> <li>Add screenshots that clarify the implemented feature, fixed bug etc.</li> </ul>"},{"location":"developer/guide/templates/pull-request-template/#related-issues","title":"Related Issues","text":"<ul> <li>Add links to related issues using the format #123.</li> </ul>"},{"location":"developer/guide/templates/pull-request-template/#checklist","title":"Checklist","text":"<ul> <li>[ ] I have tested the changes.</li> <li>[ ] I have updated the documentation if needed.</li> <li>[ ] My code follows the project's coding standards.</li> <li>[ ] I have added unit tests if applicable.</li> </ul>"},{"location":"developer/guide/templates/pull-request-template/#add-reviewer","title":"Add Reviewer","text":"<ul> <li>Assign one or more reviewers to the Pull Request.</li> <li>Reviewers provide feedback and approve changes before merging.</li> <li>Select individuals with expertise in the code affected by the PR.</li> </ul>"},{"location":"developer/guide/templates/pull-request-template/#assign-to-self","title":"Assign to Self","text":"<ul> <li>Assign the Pull Request to yourself to indicate that you are responsible for it.</li> <li>Taking ownership helps in tracking the progress of the PR.</li> </ul>"},{"location":"developer/guide/templates/pull-request-template/#add-label","title":"Add Label","text":"<ul> <li>Apply relevant labels to categorise the Pull Request.</li> <li>Labels can indicate the type of change (e.g., feature, bug fix).</li> </ul>"},{"location":"developer/guide/templates/pull-request-template/#add-project","title":"Add Project","text":"<ul> <li>Associate the Pull Request with a project board if applicable.</li> <li>Projects help organise and track the progress of related tasks.</li> <li>Choose status (e.g., in progress, ready for review).</li> </ul>"},{"location":"developer/manual/","title":"IDS SAWPS","text":""},{"location":"developer/manual/#developer-manual","title":"Developer Manual","text":"<p>Welcome to the SAWPS developer manual. The manual is intended to function as a reference for the application. For narrative/workflow based tutorials, you may prefer to work through our developer guide. Here is a brief overview of the content provided here:</p> <ul> <li> <p>Activity: An application for tracking and managing various activities within a system.</p> </li> <li> <p>Core: The central module or backbone of the system, likely containing essential functionalities and services.</p> </li> <li> <p>Fixtures: Fixtures contain fixed data or predefined entities used for testing or demonstration purposes.</p> </li> <li> <p>Front End: An application for a user-facing interface or presentation layer of the system, facilitating interaction and providing visual feedback.</p> </li> <li> <p>Notifications: An application for sending alerts, updates, or messages to users, typically regarding important events or actions within the system.</p> </li> <li> <p>Occurrence: An application for recording and analysing the frequency or instances of specific events or incidents.</p> </li> <li> <p>Population Data: An application containing demographic information or statistics about a particular population or group.</p> </li> <li> <p>Property: An application containing information about the properties.</p> </li> <li> <p>Regulatory Permit: An application designed to handle permits, licenses, or regulatory compliance processes.</p> </li> <li> <p>SAWPS An application containing information about the users.</p> </li> <li> <p>Species A application containing information about different species, including taxonomy, characteristics, and scientific name.</p> </li> <li> <p>Stakeholders: An application containing information about the user roles, user profile and organisations.</p> </li> </ul>"},{"location":"developer/manual/activity/","title":"IDS SAWPS","text":""},{"location":"developer/manual/activity/#admin","title":"Admin","text":"<p>Admin for activity package.</p>"},{"location":"developer/manual/activity/#django_project.activity.admin.ActivityTypeAdmin","title":"ActivityTypeAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Admin page for Activity Type model</p>"},{"location":"developer/manual/activity/#factories","title":"Factories","text":"<p>Test factories for activity package.</p>"},{"location":"developer/manual/activity/#django_project.activity.factories.ActivityTypeFactory","title":"ActivityTypeFactory","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory class for activity type models.</p>"},{"location":"developer/manual/activity/#django_project.activity.factories.generate_unique_name","title":"generate_unique_name","text":"<pre><code>generate_unique_name(activity_list)\n</code></pre> <p>Return activity name</p> Source code in <code>django_project/activity/factories.py</code> <pre><code>def generate_unique_name(activity_list) -&gt; str:\n    \"\"\"Return activity name\"\"\"\n    while True:\n        name = random.choice(activity_list)\n        if not ActivityType.objects.filter(name=name).exists():\n            return name\n</code></pre>"},{"location":"developer/manual/activity/#forms","title":"Forms","text":""},{"location":"developer/manual/activity/#django_project.activity.forms.ActivityTypeForm","title":"ActivityTypeForm","text":"<p>               Bases: <code>ModelForm</code></p> <p>Activity Type form.</p>"},{"location":"developer/manual/activity/#models","title":"Models","text":"<p>Models for activity package.</p>"},{"location":"developer/manual/activity/#django_project.activity.models.ActivityType","title":"ActivityType","text":"<p>               Bases: <code>Model</code></p> <p>activity type model</p>"},{"location":"developer/manual/activity/#serializers","title":"Serializers","text":"<p>Serializers for activity package.</p>"},{"location":"developer/manual/activity/#django_project.activity.serializers.ActivityTypeSerializer","title":"ActivityTypeSerializer","text":"<pre><code>ActivityTypeSerializer(*args, **kwargs)\n</code></pre> <p>               Bases: <code>ModelSerializer</code></p> <p>Survey Method Serializer</p> Source code in <code>django_project/activity/serializers.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    remove_fields = kwargs.pop('remove_fields', None)\n    super(ActivityTypeSerializer, self).__init__(*args, **kwargs)\n    if remove_fields:\n        for field_name in remove_fields:\n            self.fields.pop(field_name)\n</code></pre>"},{"location":"developer/manual/activity/#test-case","title":"Test Case","text":"<p>Test case for activity models.</p>"},{"location":"developer/manual/activity/#django_project.activity.tests.ActivityTypeTestCase","title":"ActivityTypeTestCase","text":"<p>               Bases: <code>TestCase</code></p> <p>unit tests for ActivityType model</p>"},{"location":"developer/manual/activity/#django_project.activity.tests.ActivityTypeTestCase.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>setup test data</p> Source code in <code>django_project/activity/tests.py</code> <pre><code>def setUp(self) -&gt; None:\n    \"\"\"setup test data\"\"\"\n    self.activity_type = ActivityTypeFactory()\n</code></pre>"},{"location":"developer/manual/activity/#django_project.activity.tests.ActivityTypeTestCase.test_activity_type_create","title":"test_activity_type_create","text":"<pre><code>test_activity_type_create()\n</code></pre> <p>test activity type create</p> Source code in <code>django_project/activity/tests.py</code> <pre><code>def test_activity_type_create(self):\n    \"\"\"test activity type create\"\"\"\n    self.assertEqual(self.activity_type.recruitment, True)\n    self.assertEqual(ActivityType.objects.count(), 1)\n</code></pre>"},{"location":"developer/manual/activity/#django_project.activity.tests.ActivityTypeTestCase.test_activity_type_delete","title":"test_activity_type_delete","text":"<pre><code>test_activity_type_delete()\n</code></pre> <p>test activity type delete</p> Source code in <code>django_project/activity/tests.py</code> <pre><code>def test_activity_type_delete(self):\n    \"\"\"test activity type delete\"\"\"\n    self.activity_type.delete()\n    self.assertEqual(ActivityType.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/activity/#django_project.activity.tests.ActivityTypeTestCase.test_activity_type_update","title":"test_activity_type_update","text":"<pre><code>test_activity_type_update()\n</code></pre> <p>test activity type update</p> Source code in <code>django_project/activity/tests.py</code> <pre><code>def test_activity_type_update(self):\n    \"\"\"test activity type update\"\"\"\n    self.activity_type.name = 'Planned euthanasia'\n    self.activity_type.recruitment = False\n    self.activity_type.save()\n    self.assertEqual(self.activity_type.name, 'Planned euthanasia')\n    self.assertEqual(self.activity_type.recruitment, False)\n</code></pre>"},{"location":"developer/manual/activity/#views","title":"Views","text":""},{"location":"developer/manual/activity/#django_project.activity.views.ActivityTypeAPIView","title":"ActivityTypeAPIView","text":"<p>               Bases: <code>APIView</code></p> <p>Get Activity Type</p>"},{"location":"developer/manual/core/","title":"IDS SAWPS","text":""},{"location":"developer/manual/core/#settings","title":"Settings","text":"<p>Django settings for kartoza django project.</p>"},{"location":"developer/manual/core/#asgi","title":"ASGI","text":"<p>ASGI config for core project.</p> <p>It exposes the ASGI callable as a module-level variable named <code>application</code>.</p> <p>For more information on this file, see https://docs.djangoproject.com/en/4.1/howto/deployment/asgi/</p>"},{"location":"developer/manual/core/#celery","title":"CELERY","text":"<p>A celery config for the project.</p>"},{"location":"developer/manual/core/#django_project.core.celery.create_scheduler_task","title":"create_scheduler_task","text":"<pre><code>create_scheduler_task(\n    task_name,\n    task_name_desc,\n    num_interval,\n    interval_schedule,\n)\n</code></pre> <p>Create periodic scheduler tasks.</p> <p>Parameters:</p> Name Type Description Default <code>task_name</code> <p>task_name</p> required <code>task_name_desc</code> <p>Name/Description of the task</p> required <code>num_interval</code> <p>Interval</p> required <code>interval_schedule</code> <p>one of ['DAYS', 'HOURS']</p> required Source code in <code>django_project/core/celery.py</code> <pre><code>def create_scheduler_task(task_name, task_name_desc,\n                          num_interval, interval_schedule):\n    \"\"\"\n    Create periodic scheduler tasks.\n\n    :param task_name: task_name\n    :param task_name_desc: Name/Description of the task\n    :param num_interval: Interval\n    :param interval_schedule: one of ['DAYS', 'HOURS']\n    \"\"\"\n    from importlib import import_module\n    try:\n        IntervalSchedule = (\n            import_module('django_celery_beat.models').IntervalSchedule\n        )\n\n        PeriodicTask = (\n            import_module('django_celery_beat.models').PeriodicTask\n        )\n        if interval_schedule == 'HOURS':\n            schedule, _ = IntervalSchedule.objects.get_or_create(\n                every=num_interval,\n                period=IntervalSchedule.HOURS\n            )\n        elif interval_schedule == 'DAYS':\n            schedule, _ = IntervalSchedule.objects.get_or_create(\n                every=num_interval,\n                period=IntervalSchedule.DAYS\n            )\n        PeriodicTask.objects.update_or_create(\n            task=task_name,\n            defaults={\n                'name': task_name_desc,\n                'interval': schedule\n            }\n        )\n    except Exception as e:\n        print(e)\n</code></pre>"},{"location":"developer/manual/core/#urls","title":"URLS","text":"<p>Core URL Configuration.</p> <p>The <code>urlpatterns</code> list routes URLs to views. For more information please see:     https://docs.djangoproject.com/en/4.1/topics/http/urls/</p> <p>Examples:</p> <p>Function views</p> <pre><code>1. Add an import:  from my_app import views\n2. Add a URL to urlpatterns:  path('', views.home, name='home')\n</code></pre> <p>Class-based views</p> <pre><code>1. Add an import:  from other_app.views import Home\n2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\n</code></pre> <p>Including another URLconf</p> <pre><code>1. Import the include() function: from django.urls import include, path\n2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n</code></pre>"},{"location":"developer/manual/core/#wsgi","title":"WSGI","text":"<p>WSGI config for core project.</p> <p>It exposes the WSGI callable as a module-level variable named <code>application</code>.</p> <p>For more information on this file, see https://docs.djangoproject.com/en/4.1/howto/deployment/wsgi/</p>"},{"location":"developer/manual/fixtures/","title":"Fixtures","text":""},{"location":"developer/manual/frontend/","title":"IDS SAWPS","text":""},{"location":"developer/manual/frontend/#api-views","title":"API Views","text":"<p>API Views related to data table.</p> <p>API Views related to map.</p> <p>API Views related to metrics.</p> <p>API Views related to uploading population data.</p> <p>API Views related to property.</p> <p>API Views for uploading file.</p> <p>API Views related to statistical.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.data_table.DataTableAPIView","title":"DataTableAPIView","text":"<p>               Bases: <code>APIView</code></p> <p>API view for retrieving data table reports.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.data_table.DataTableAPIView.get","title":"get","text":"<pre><code>get(request)\n</code></pre> <p>Handle GET request to retrieve data table reports. Params: request (Request) The HTTP request object.</p> Source code in <code>django_project/frontend/api_views/data_table.py</code> <pre><code>def get(self, request) -&gt; Response:\n    \"\"\"\n    Handle GET request to retrieve data table reports.\n    Params: request (Request) The HTTP request object.\n    \"\"\"\n    return self.process_request(request)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.data_table.DataTableAPIView.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset(user_roles)\n</code></pre> <p>Get the filtered queryset based on user filters.</p> Source code in <code>django_project/frontend/api_views/data_table.py</code> <pre><code>def get_queryset(self, user_roles: List[str]) -&gt; QuerySet:\n    \"\"\"\n    Get the filtered queryset based on user filters.\n    \"\"\"\n    return get_queryset(user_roles, self.request)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.data_table.DataTableAPIView.get_taxon_queryset","title":"get_taxon_queryset","text":"<pre><code>get_taxon_queryset()\n</code></pre> <p>Get the filtered Taxon queryset based on user filters.</p> Source code in <code>django_project/frontend/api_views/data_table.py</code> <pre><code>def get_taxon_queryset(self):\n    \"\"\"\n    Get the filtered Taxon queryset based on user filters.\n    \"\"\"\n    return get_taxon_queryset(self.request)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.data_table.DataTableAPIView.post","title":"post","text":"<pre><code>post(request)\n</code></pre> <p>Handle POST request to retrieve data table reports. Params: request (Request) The HTTP request object.</p> Source code in <code>django_project/frontend/api_views/data_table.py</code> <pre><code>def post(self, request) -&gt; Response:\n    \"\"\"\n    Handle POST request to retrieve data table reports.\n    Params: request (Request) The HTTP request object.\n    \"\"\"\n    return self.process_request(request)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.data_table.DataTableAPIView.process_request","title":"process_request","text":"<pre><code>process_request(request)\n</code></pre> <p>Handle request to retrieve data table reports. Params: request (Request) The HTTP request object.</p> Source code in <code>django_project/frontend/api_views/data_table.py</code> <pre><code>def process_request(self, request) -&gt; Response:\n    \"\"\"\n    Handle request to retrieve data table reports.\n    Params: request (Request) The HTTP request object.\n    \"\"\"\n\n    user_roles = get_user_roles(self.request.user)\n    queryset = self.get_queryset(user_roles)\n    if self.get_taxon_queryset().count() == 0:\n        return Response(status=200, data=[])\n    show_detail = self.request.user.is_superuser \\\n        or not set(user_roles) &amp; set(DATA_CONSUMERS)\n    if show_detail:\n        if get_param_from_request(request, \"file\"):\n            return Response({\n                \"file\": write_report_to_rows(queryset, request)\n            })\n\n        reports = data_table_reports(queryset, request, user_roles)\n        report_list = get_param_from_request(request, \"reports\", None)\n        if report_list:\n            report_list = report_list.split(\",\")\n            if PROVINCE_REPORT in report_list:\n                taxon_queryset = self.get_taxon_queryset()\n                province_reports = national_level_province_report(\n                    taxon_queryset,\n                    request\n                )\n                if province_reports:\n                    reports.append({\n                        PROVINCE_REPORT: province_reports\n                    })\n\n        return Response(reports)\n\n    else:\n        if get_param_from_request(request, \"file\"):\n            report_functions = {\n                PROPERTY_REPORT: national_level_property_report,\n                ACTIVITY_REPORT: national_level_activity_report,\n                SPECIES_REPORT: national_level_species_report,\n            }\n\n            if PROVINCIAL_DATA_CONSUMER not in user_roles:\n                report_functions[\n                    PROVINCE_REPORT\n                ] = national_level_province_report\n            return Response({\n                \"file\": write_report_to_rows(\n                    queryset, request, report_functions\n                )\n            })\n        return Response(\n            national_level_user_table(\n                queryset, request)\n        )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.AerialTile","title":"AerialTile","text":"<p>               Bases: <code>APIView</code></p> <p>Proxy for aerial map.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.AerialTile.get","title":"get","text":"<pre><code>get(*args, **kwargs)\n</code></pre> <p>Retrieve aerial by x, y, z.</p> Source code in <code>django_project/frontend/api_views/map.py</code> <pre><code>def get(self, *args, **kwargs):\n    \"\"\"Retrieve aerial by x, y, z.\"\"\"\n    # Note: we can cache the tile to storage\n    x = kwargs.get('x')\n    y = kwargs.get('y')\n    z = kwargs.get('z')\n    r = requests.get(\n        f'http://aerial.openstreetmap.org.za/ngi-aerial/{z}/{x}/{y}.jpg'\n    )\n    if r.status_code != 200:\n        raise Http404()\n    response = StreamingHttpResponse(\n        (chunk for chunk in r.iter_content(512 * 1024)),\n        content_type=r.headers['Content-Type'])\n    if 'Cache-Control' in r.headers:\n        response['Cache-Control'] = r.headers['Cache-Control']\n    else:\n        response['Cache-Control'] = 'max-age=86400'\n    return response\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.ContextLayerList","title":"ContextLayerList","text":"<p>               Bases: <code>APIView</code></p> <p>Fetch context layers.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.ContextLayerList.get","title":"get","text":"<pre><code>get(*args, **kwargs)\n</code></pre> <p>Retrieve all context layers.</p> Source code in <code>django_project/frontend/api_views/map.py</code> <pre><code>def get(self, *args, **kwargs):\n    \"\"\"Retrieve all context layers.\"\"\"\n    layers = ContextLayer.objects.all().order_by('id')\n    return Response(\n        status=200,\n        data=ContextLayerSerializer(layers, many=True).data\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.DefaultPropertiesLayerMVTTiles","title":"DefaultPropertiesLayerMVTTiles","text":"<p>               Bases: <code>MapSessionBase</code>, <code>LayerMVTTilesBase</code></p> <p>Dynamic Vector Tile for properties layer based on active org.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.DefaultPropertiesLayerMVTTiles.generate_queries_for_map_default","title":"generate_queries_for_map_default","text":"<pre><code>generate_queries_for_map_default(z, x, y)\n</code></pre> <p>Generate layer queries for vector tile using active organisation.</p> <p>Possible layers: properties, properties-point.</p> Source code in <code>django_project/frontend/api_views/map.py</code> <pre><code>def generate_queries_for_map_default(\n        self, z: int, x: int, y: int) -&gt; Tuple[str, List[str]]:\n    \"\"\"\n    Generate layer queries for vector tile using active organisation.\n\n    Possible layers: properties, properties-point.\n    \"\"\"\n    sqls = []\n    query_values = []\n    if not self.can_view_properties_layer():\n        return None, None\n    if should_generate_layer(z, PROPERTIES_LAYER_ZOOMS):\n        properties_sql, properties_val = (\n            self.get_default_properties_layer_query(\n                PROPERTIES_LAYER, z, x, y)\n        )\n        sqls.append(properties_sql)\n        query_values.extend(properties_val)\n    if should_generate_layer(z, PROPERTIES_POINT_LAYER_ZOOMS):\n        properties_points_sql, properties_points_val = (\n            self.get_default_properties_layer_query(\n                PROPERTIES_POINTS_LAYER, z, x, y)\n        )\n        sqls.append(properties_points_sql)\n        query_values.extend(properties_points_val)\n    if len(sqls) == 0:\n        return None, None\n    # construct output_sql\n    output_sql = '||'.join(sqls)\n    return output_sql, query_values\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.DefaultPropertiesLayerMVTTiles.get_default_properties_layer_query","title":"get_default_properties_layer_query","text":"<pre><code>get_default_properties_layer_query(layer_name, z, x, y)\n</code></pre> <p>Generate SQL query for properties/points using active org.</p> Source code in <code>django_project/frontend/api_views/map.py</code> <pre><code>def get_default_properties_layer_query(\n        self,\n        layer_name: str,\n        z: int, x: int, y: int) -&gt; Tuple[str, List[str]]:\n    \"\"\"Generate SQL query for properties/points using active org.\"\"\"\n    geom_field = (\n        self.get_geom_field_for_properties_layers(layer_name)\n    )\n    sql = (\n        \"\"\"\n        SELECT p.id, p.name, 0 as count,\n        ST_AsMVTGeom(\n          ST_Transform(p.{geom_field}, 3857),\n          TileBBox(%s, %s, %s, 3857)) as geom\n        from property p\n        where p.{geom_field} &amp;&amp; TileBBox(%s, %s, %s, 4326)\n        AND p.organisation_id=%s\n        \"\"\"\n    ).format(\n        geom_field=geom_field\n    )\n    query_values = [\n        z, x, y,\n        z, x, y,\n        self.get_user_organisation_id()\n    ]\n    return self.get_mvt_sql(layer_name, sql), query_values\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.FindParcelByCoord","title":"FindParcelByCoord","text":"<p>               Bases: <code>APIView</code></p> <p>Find parcel that contains coordinate.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.FindParcelByCoord.find_parcel","title":"find_parcel","text":"<pre><code>find_parcel(cls, cls_serializer, point)\n</code></pre> <p>Find parcel by point.</p> Source code in <code>django_project/frontend/api_views/map.py</code> <pre><code>def find_parcel(self, cls, cls_serializer, point: Point):\n    \"\"\"Find parcel by point.\"\"\"\n    parcel = cls.objects.filter(geom__contains=point)\n    if parcel:\n        return cls_serializer(\n            parcel.first()\n        ).data\n    return None\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.FindPropertyByCoord","title":"FindPropertyByCoord","text":"<p>               Bases: <code>APIView</code></p> <p>Find property that contains coordinate.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.LayerMVTTilesBase","title":"LayerMVTTilesBase","text":"<p>               Bases: <code>APIView</code></p> <p>Base class for generating dynamic VT.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.LayerMVTTilesBase.generate_tile","title":"generate_tile","text":"<pre><code>generate_tile(sql, query_values)\n</code></pre> <p>Execute sql to generate vector tile bytes array.</p> Source code in <code>django_project/frontend/api_views/map.py</code> <pre><code>def generate_tile(self, sql, query_values):\n    \"\"\"Execute sql to generate vector tile bytes array.\"\"\"\n    if sql is None:\n        return []\n    try:\n        tile = bytes()\n        with connection.cursor() as cursor:\n            raw_sql = (\n                'SELECT ({sub_sqls}) AS data'\n            ).format(sub_sqls=sql)\n            cursor.execute(raw_sql, query_values)\n            row = cursor.fetchone()\n            tile = row[0]\n        return tile\n    except ProgrammingError:\n        return []\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.LayerMVTTilesBase.get_mvt_sql","title":"get_mvt_sql","text":"<pre><code>get_mvt_sql(mvt_name, sql)\n</code></pre> <p>Generate ST_MVT sql for single query.</p> Source code in <code>django_project/frontend/api_views/map.py</code> <pre><code>def get_mvt_sql(self, mvt_name, sql):\n    \"\"\"Generate ST_MVT sql for single query.\"\"\"\n    fsql = (\n        '(SELECT ST_AsMVT(q,\\'{mvt_name}\\',4096,\\'geom\\',\\'id\\') '\n        'AS data '\n        'FROM ({query}) AS q)'\n    ).format(\n        mvt_name=mvt_name,\n        query=sql\n    )\n    return fsql\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.LayerMVTTilesBase.gzip_tile","title":"gzip_tile","text":"<pre><code>gzip_tile(data)\n</code></pre> <p>Apply gzip to vector tiles bytes.</p> Source code in <code>django_project/frontend/api_views/map.py</code> <pre><code>def gzip_tile(self, data):\n    \"\"\"Apply gzip to vector tiles bytes.\"\"\"\n    bytesbuffer = io.BytesIO()\n    with gzip.GzipFile(fileobj=bytesbuffer, mode='w') as w:\n        w.write(data)\n    return bytesbuffer.getvalue()\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.MapAuthenticate","title":"MapAuthenticate","text":"<p>               Bases: <code>APIView</code></p> <p>Check against the token of user.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.MapAuthenticate.get","title":"get","text":"<pre><code>get(*args, **kwargs)\n</code></pre> <p>Return success 200, so nginx can cache the auth result.</p> Source code in <code>django_project/frontend/api_views/map.py</code> <pre><code>def get(self, *args, **kwargs):\n    \"\"\"Return success 200, so nginx can cache the auth result.\"\"\"\n    token = self.request.query_params.get(\"token\", None)\n    if token is None:\n        return HttpResponseForbidden()\n    cache_key = f'map-auth-{token}'\n    allowed = cache.get(cache_key)\n    if allowed is not None:\n        if allowed:\n            return HttpResponse('OK')\n    return HttpResponseForbidden()\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.MapSessionBase","title":"MapSessionBase","text":"<p>               Bases: <code>APIView</code></p> <p>Base class for map filter session.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.MapSessionBase.generate_session","title":"generate_session","text":"<pre><code>generate_session()\n</code></pre> <p>Generate map filter session from POST data.</p> <p>Session will have expiry in 6 hours after creation and this expiry date is updated when the session filter is changed.</p> Source code in <code>django_project/frontend/api_views/map.py</code> <pre><code>def generate_session(self):\n    \"\"\"\n    Generate map filter session from POST data.\n\n    Session will have expiry in 6 hours after creation and\n    this expiry date is updated when the session filter is changed.\n    \"\"\"\n    session_uuid = self.request.GET.get('session', None)\n    session = MapSession.objects.filter(uuid=session_uuid).first()\n    filter_species = self.get_species_filter()\n    if session is None:\n        session = MapSession.objects.create(\n            user=self.request.user,\n            created_date=timezone.now(),\n            expired_date=timezone.now() + datetime.timedelta(hours=6)\n        )\n    session.species = filter_species\n    session.expired_date = timezone.now() + datetime.timedelta(hours=6)\n    session.save(update_fields=['species', 'expired_date'])\n    if self.can_view_properties_layer():\n        generate_map_view(\n            session, False,\n            self.request.data.get('end_year', None),\n            self.request.data.get('species', None),\n            self.request.data.get('organisation', None),\n            self.request.data.get('activity', None),\n            self.request.data.get('spatial_filter_values', None),\n            self.request.data.get('property', None)\n        )\n    if self.can_view_province_layer() and filter_species:\n        generate_map_view(\n            session, True,\n            self.request.data.get('end_year', None),\n            self.request.data.get('species', None),\n            self.request.data.get('organisation', None),\n            self.request.data.get('activity', None),\n            self.request.data.get('spatial_filter_values', None),\n            self.request.data.get('property', None)\n        )\n    return session\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.MapSessionBase.get_current_session_or_404","title":"get_current_session_or_404","text":"<pre><code>get_current_session_or_404()\n</code></pre> <p>Retrieve map filter session or return 404.</p> Source code in <code>django_project/frontend/api_views/map.py</code> <pre><code>def get_current_session_or_404(self):\n    \"\"\"Retrieve map filter session or return 404.\"\"\"\n    session_uuid = self.request.GET.get('session', None)\n    session = MapSession.objects.filter(uuid=session_uuid).first()\n    if session is None:\n        raise Http404()\n    return session\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.MapSessionBase.get_map_query_type","title":"get_map_query_type","text":"<pre><code>get_map_query_type()\n</code></pre> <p>Check map query type: default (by active org) or filter session.</p> Source code in <code>django_project/frontend/api_views/map.py</code> <pre><code>def get_map_query_type(self):\n    \"\"\"Check map query type: default (by active org) or filter session.\"\"\"\n    session_uuid = self.request.GET.get('session', None)\n    type = MapQueryEnum.MAP_DEFAULT\n    if session_uuid:\n        type = MapQueryEnum.MAP_USING_SESSION\n    return type\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.MapSessionBase.get_species_filter","title":"get_species_filter","text":"<pre><code>get_species_filter()\n</code></pre> <p>Return species filter if any from POST data.</p> Source code in <code>django_project/frontend/api_views/map.py</code> <pre><code>def get_species_filter(self):\n    \"\"\"Return species filter if any from POST data.\"\"\"\n    return self.request.data.get('species', None)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.MapStyles","title":"MapStyles","text":"<p>               Bases: <code>MapSessionBase</code></p> <p>Fetch map styles.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.MapStyles.get","title":"get","text":"<pre><code>get(*args, **kwargs)\n</code></pre> <p>Retrieve map styles.</p> Source code in <code>django_project/frontend/api_views/map.py</code> <pre><code>def get(self, *args, **kwargs):\n    \"\"\"Retrieve map styles.\"\"\"\n    theme = self.request.GET.get('theme', 'light')\n    map_query_type = self.get_map_query_type()\n    session = None\n    if map_query_type == MapQueryEnum.MAP_USING_SESSION:\n        session_obj = self.get_current_session_or_404()\n        session = str(session_obj.uuid) if session_obj else None\n    styles = get_map_template_style(\n        self.request,\n        session=session,\n        theme_choice=(\n            0 if theme == 'light' else 1\n        ),\n        token=self.get_token_for_map()\n    )\n    return Response(\n        status=200,\n        data=styles,\n        content_type=\"application/json\"\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.PopulationCountLegends","title":"PopulationCountLegends","text":"<p>               Bases: <code>MapSessionBase</code></p> <p>API to iniitalize map session based on user filters.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.SessionPropertiesLayerMVTTiles","title":"SessionPropertiesLayerMVTTiles","text":"<p>               Bases: <code>MapSessionBase</code>, <code>LayerMVTTilesBase</code></p> <p>Dynamic Vector Tile for properties layer based on filter session.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.SessionPropertiesLayerMVTTiles.generate_queries_for_map_session","title":"generate_queries_for_map_session","text":"<pre><code>generate_queries_for_map_session(session, z, x, y)\n</code></pre> <p>Generate layer queries for vector tiles using filter session.</p> <p>Possible layers: province_population, properties, properties-point.</p> Source code in <code>django_project/frontend/api_views/map.py</code> <pre><code>def generate_queries_for_map_session(\n        self,\n        session: MapSession,\n        z: int, x: int, y: int) -&gt; Tuple[str, List[str]]:\n    \"\"\"\n    Generate layer queries for vector tiles using filter session.\n\n    Possible layers: province_population, properties, properties-point.\n    \"\"\"\n    sqls = []\n    query_values = []\n    if (\n        self.can_view_province_layer() and session.species and\n        should_generate_layer(z, PROVINCE_LAYER_ZOOMS)\n    ):\n        province_sql, province_val = (\n            self.get_province_layer_query(session, z, x, y)\n        )\n        sqls.append(province_sql)\n        query_values.extend(province_val)\n    if self.can_view_properties_layer():\n        if should_generate_layer(z, PROPERTIES_LAYER_ZOOMS):\n            properties_sql, properties_val = (\n                self.get_properties_layer_query(\n                    PROPERTIES_LAYER, session, z, x, y)\n            )\n            sqls.append(properties_sql)\n            query_values.extend(properties_val)\n        if should_generate_layer(z, PROPERTIES_POINT_LAYER_ZOOMS):\n            properties_points_sql, properties_points_val = (\n                self.get_properties_layer_query(\n                    PROPERTIES_POINTS_LAYER, session, z, x, y)\n            )\n            sqls.append(properties_points_sql)\n            query_values.extend(properties_points_val)\n    if len(sqls) == 0:\n        return None, None\n    # construct output_sql\n    output_sql = '||'.join(sqls)\n    return output_sql, query_values\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.SessionPropertiesLayerMVTTiles.get_properties_layer_query","title":"get_properties_layer_query","text":"<pre><code>get_properties_layer_query(layer_name, session, z, x, y)\n</code></pre> <p>Generate SQL query for properties/points using filter session.</p> Source code in <code>django_project/frontend/api_views/map.py</code> <pre><code>def get_properties_layer_query(\n        self,\n        layer_name: str,\n        session: MapSession,\n        z: int, x: int, y: int) -&gt; Tuple[str, List[str]]:\n    \"\"\"Generate SQL query for properties/points using filter session.\"\"\"\n    geom_field = (\n        self.get_geom_field_for_properties_layers(layer_name)\n    )\n    sql = (\n        \"\"\"\n        SELECT p.id, p.name, population_summary.count,\n        ST_AsMVTGeom(\n          ST_Transform(p.{geom_field}, 3857),\n          TileBBox(%s, %s, %s, 3857)) as geom\n        from property p\n        inner join \"{view_name}\" population_summary\n            on p.id=population_summary.id\n        where p.{geom_field} &amp;&amp; TileBBox(%s, %s, %s, 4326)\n        \"\"\"\n    ).format(\n        geom_field=geom_field,\n        view_name=session.properties_view_name\n    )\n    query_values = [\n        z, x, y,\n        z, x, y\n    ]\n    return self.get_mvt_sql(layer_name, sql), query_values\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.SessionPropertiesLayerMVTTiles.get_province_layer_query","title":"get_province_layer_query","text":"<pre><code>get_province_layer_query(session, z, x, y)\n</code></pre> <p>Generate SQL query for province layer using filter session.</p> Source code in <code>django_project/frontend/api_views/map.py</code> <pre><code>def get_province_layer_query(\n        self, session: MapSession,\n        z: int, x: int, y: int):\n    \"\"\"Generate SQL query for province layer using filter session.\"\"\"\n    sql = (\n        \"\"\"\n        select zpss.id, zpss.adm1_en, population_summary.count,\n          ST_AsMVTGeom(zpss.geom, TileBBox(%s, %s, %s, 3857)) as geom\n        from layer.zaf_provinces_small_scale zpss\n        inner join province p2 on p2.name=zpss.adm1_en\n        inner join \"{view_name}\" population_summary\n            on p2.id=population_summary.id\n        where zpss.geom &amp;&amp; TileBBox(%s, %s, %s, 3857)\n        \"\"\"\n    ).format(view_name=session.province_view_name)\n    query_values = [z, x, y, z, x, y]\n    return self.get_mvt_sql('province_population', sql), query_values\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.should_generate_layer","title":"should_generate_layer","text":"<pre><code>should_generate_layer(z, zoom_configs)\n</code></pre> <p>Return True if layer should be generated.</p> Source code in <code>django_project/frontend/api_views/map.py</code> <pre><code>def should_generate_layer(z: int, zoom_configs: Tuple[int, int]) -&gt; bool:\n    \"\"\"Return True if layer should be generated.\"\"\"\n    return z &gt;= zoom_configs[0] and z &lt;= zoom_configs[1]\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.ActivityPercentageAPIView","title":"ActivityPercentageAPIView","text":"<p>               Bases: <code>APIView</code></p> <p>API view to retrieve activity percentage data for species.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.ActivityPercentageAPIView.get","title":"get","text":"<pre><code>get(request, *args, **kwargs)\n</code></pre> <p>Handle the GET request to retrieve activity percentage data. Params: request (Request): The HTTP request object.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get(self, request, *args, **kwargs) -&gt; Response:\n    \"\"\"\n    Handle the GET request to retrieve activity percentage data.\n    Params: request (Request): The HTTP request object.\n    \"\"\"\n    queryset = self.get_queryset()\n    serializer = ActivityMatrixSerializer(\n        queryset, many=True, context={\"request\": request}\n    )\n    return Response(calculate_base_population_of_species(serializer.data))\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.ActivityPercentageAPIView.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset()\n</code></pre> <p>Returns a filtered queryset of Taxon objects representing species within the specified organisation.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get_queryset(self) -&gt; List[Taxon]:\n    \"\"\"\n    Returns a filtered queryset of Taxon objects representing\n    species within the specified organisation.\n    \"\"\"\n    organisation_id = get_current_organisation_id(self.request.user)\n    queryset = Taxon.objects.filter(\n        annualpopulation__property__organisation_id=organisation_id,\n        taxon_rank__name='Species'\n    ).distinct()\n    filtered_queryset = ActivityBaseMetricsFilter(\n        self.request.GET, queryset=queryset\n    ).qs\n    return filtered_queryset\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.BasePropertyCountAPIView","title":"BasePropertyCountAPIView","text":"<p>               Bases: <code>APIView</code></p> <p>Base class for property count APIView</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.BasePropertyCountAPIView.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset()\n</code></pre> <p>Returns a filtered queryset of Taxon objects</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get_queryset(self) -&gt; List[AnnualPopulation]:\n    \"\"\"\n    Returns a filtered queryset of Taxon objects\n    \"\"\"\n    property_list = self.request.GET.get(\"property\")\n    year_filter = self.request.GET.get('year', None)\n    taxon_filter = self.request.GET.get('species', None)\n    activity_filter = self.request.GET.get('activity', \"\")\n    spatial_filter = self.request.GET.get(\n        'spatial_filter_values', \"\").split(',')\n    spatial_filter = list(\n        filter(None, spatial_filter)\n    )\n\n    filters = {}\n\n    if year_filter:\n        filters['year'] = year_filter\n    if taxon_filter:\n        filters['taxon__scientific_name'] = taxon_filter\n\n    if property_list:\n        property_ids = property_list.split(\",\")\n        filters['property_id__in'] = property_ids\n\n    queryset = AnnualPopulation.objects.filter(\n        **filters\n    )\n    if activity_filter:\n        activity_qs = AnnualPopulationPerActivity.objects.filter(\n            annual_population=OuterRef('pk'),\n            activity_type_id__in=[\n                int(act) for act in activity_filter.split(',')\n            ]\n        )\n        queryset = queryset.filter(Exists(activity_qs))\n\n    if spatial_filter:\n        spatial_qs = SpatialDataValueModel.objects.filter(\n            spatial_data__property=OuterRef('property'),\n            context_layer_value__in=spatial_filter\n        )\n        queryset = queryset.filter(Exists(spatial_qs))\n    return queryset.distinct()\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.PopulationPerAgeGroupAPIView","title":"PopulationPerAgeGroupAPIView","text":"<p>               Bases: <code>APIView</code></p> <p>API endpoint to retrieve population of age group.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.PopulationPerAgeGroupAPIView.get","title":"get","text":"<pre><code>get(request, *args, **kwargs)\n</code></pre> <p>Handle the GET request to retrieve population of age groups. Params:request (Request): The HTTP request object.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get(self, request, *args, **kwargs) -&gt; Response:\n    \"\"\"\n    Handle the GET request to retrieve population of age groups.\n    Params:request (Request): The HTTP request object.\n    \"\"\"\n    queryset = self.get_queryset()\n    serializer = PopulationPerAgeGroupSerialiser(\n        queryset, many=True, context={\"request\": request}\n    )\n    return Response(serializer.data)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.PopulationPerAgeGroupAPIView.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset()\n</code></pre> <p>Get the filtered queryset taxon owned by the organisation.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get_queryset(self) -&gt; QuerySet[Taxon]:\n    \"\"\"\n    Get the filtered queryset taxon owned by the organisation.\n    \"\"\"\n    organisation_id = get_current_organisation_id(self.request.user)\n    queryset = Taxon.objects.filter(\n        annualpopulation__property__organisation_id=organisation_id,\n        taxon_rank__name='Species'\n    ).distinct()\n    filtered_queryset = BaseMetricsFilter(\n        self.request.GET, queryset=queryset\n    ).qs\n    return filtered_queryset\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.PropertiesPerPopulationCategoryAPIView","title":"PropertiesPerPopulationCategoryAPIView","text":"<p>               Bases: <code>APIView</code></p> <p>API endpoint to retrieve population categories for properties within an organisation.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.PropertiesPerPopulationCategoryAPIView.get","title":"get","text":"<pre><code>get(request, *args, **kwargs)\n</code></pre> <p>Handle GET request to retrieve population categories for properties.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get(self, request, *args, **kwargs) -&gt; Response:\n    \"\"\"\n    Handle GET request to retrieve population categories for properties.\n    \"\"\"\n    species_name = request.GET.get(\"species\")\n    start_year = request.GET.get(\"start_year\", 0)\n    end_year = request.GET.get(\"end_year\", datetime.datetime.now().year)\n    year_range = (int(start_year), int(end_year))\n    queryset = self.get_queryset()\n    return Response(\n        calculate_population_categories(queryset, species_name, year_range)\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.PropertiesPerPopulationCategoryAPIView.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset()\n</code></pre> <p>Get the filtered queryset of properties owned by the organisation.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get_queryset(self) -&gt; QuerySet[Property]:\n    \"\"\"\n    Get the filtered queryset of properties owned by the organisation.\n    \"\"\"\n    organisation_id = get_current_organisation_id(self.request.user)\n    queryset = Property.objects.filter(organisation_id=organisation_id)\n    filtered_queryset = PropertyFilter(\n        self.request.GET, queryset=queryset\n    ).qs\n    return filtered_queryset\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.PropertyCountPerAreaCategoryAPIView","title":"PropertyCountPerAreaCategoryAPIView","text":"<p>               Bases: <code>BasePropertyCountAPIView</code></p> <p>API endpoint to property count per area category</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.PropertyCountPerAreaCategoryAPIView.get","title":"get","text":"<pre><code>get(request, *args, **kwargs)\n</code></pre> <p>Handle GET request to retrieve property count per area category.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get(self, request, *args, **kwargs) -&gt; Response:\n    \"\"\"\n    Handle GET request to retrieve property count per area category.\n    \"\"\"\n    results = []\n    annual_populations = self.get_queryset()\n    if not annual_populations.exists():\n        return Response(results)\n    queryset = Property.objects.filter(\n        id__in=annual_populations.values_list(\n            'property_id', flat=True\n        )\n    )\n\n    data = queryset.values_list('property_size_ha', flat=True).distinct()\n\n    common_name = annual_populations.first().taxon.common_name_verbatim\n    results = self.get_results(\n        data,\n        queryset,\n        'property_type__name',\n        common_name,\n        'property_size_ha'\n    )\n\n    return Response(results)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.PropertyCountPerPopulationSizeCategoryAPIView","title":"PropertyCountPerPopulationSizeCategoryAPIView","text":"<p>               Bases: <code>BasePropertyCountAPIView</code></p> <p>API endpoint to property count per population size category</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.PropertyCountPerPopulationSizeCategoryAPIView.get","title":"get","text":"<pre><code>get(request, *args, **kwargs)\n</code></pre> <p>Handle GET request to retrieve property count per population size category.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get(self, request, *args, **kwargs) -&gt; Response:\n    \"\"\"\n    Handle GET request to retrieve property count\n    per population size category.\n    \"\"\"\n    results = []\n    queryset = self.get_queryset()\n    data = queryset.values_list('total', flat=True).distinct()\n    if not data.exists():\n        return Response(results)\n\n    common_name = queryset.first().taxon.common_name_verbatim\n    results = self.get_results(\n        data,\n        queryset,\n        'property__property_type__name',\n        common_name,\n        'total'\n    )\n\n    return Response(results)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.PropertyPerAreaAvailableCategoryAPIView","title":"PropertyPerAreaAvailableCategoryAPIView","text":"<p>               Bases: <code>BasePropertyCountAPIView</code></p> <p>API endpoint to property count per area available to species category</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.PropertyPerAreaAvailableCategoryAPIView.get","title":"get","text":"<pre><code>get(request, *args, **kwargs)\n</code></pre> <p>Handle GET request to retrieve property count per area available to species category.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get(self, request, *args, **kwargs) -&gt; Response:\n    \"\"\"\n    Handle GET request to retrieve property count per\n    area available to species category.\n    \"\"\"\n    results = []\n    queryset = self.get_queryset()\n    data = queryset.values_list(\n        'area_available_to_species',\n        flat=True\n    ).distinct()\n    if not data.exists():\n        return Response(results)\n\n    common_name = queryset.first().taxon.common_name_verbatim\n    results = self.get_results(\n        data,\n        queryset,\n        'property__property_type__name',\n        common_name,\n        'area_available_to_species'\n    )\n\n    return Response(results)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.PropertyPerPopDensityCategoryAPIView","title":"PropertyPerPopDensityCategoryAPIView","text":"<p>               Bases: <code>BasePropertyCountAPIView</code></p> <p>API endpoint to property count per population density category</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.PropertyPerPopDensityCategoryAPIView.get","title":"get","text":"<pre><code>get(request, *args, **kwargs)\n</code></pre> <p>Handle GET request to retrieve property count per population density category.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get(self, request, *args, **kwargs) -&gt; Response:\n    \"\"\"\n    Handle GET request to retrieve property count\n    per population density category.\n    \"\"\"\n    results = []\n    queryset = self.get_queryset()\n    queryset = queryset.exclude(area_available_to_species=0).annotate(\n        population_density=Cast(\n            Cast(F('total'), FloatField()) /\n            Cast(F('area_available_to_species'), FloatField()),\n            FloatField()\n        )\n    )\n    data = queryset.values_list('population_density', flat=True).distinct()\n    if not data.exists():\n        return Response(results)\n\n    common_name = queryset.first().taxon.common_name_verbatim\n    results = self.get_results(\n        data,\n        queryset,\n        'property__property_type__name',\n        common_name,\n        'population_density'\n    )\n\n    return Response(results)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.SpeciesPopulationCountPerProvinceAPIView","title":"SpeciesPopulationCountPerProvinceAPIView","text":"<p>               Bases: <code>APIView</code></p> <p>API view to retrieve species pcount per province.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.SpeciesPopulationCountPerProvinceAPIView.get","title":"get","text":"<pre><code>get(request, *args, **kwargs)\n</code></pre> <p>Handle GET request to retrieve species count per province.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get(self, request, *args, **kwargs) -&gt; Response:\n    \"\"\"\n    Handle GET request to retrieve species count per province.\n    \"\"\"\n    taxon = get_taxon_queryset(request).first()\n    user_roles = get_user_roles(request.user)\n    filters = common_filters(request, user_roles)\n\n    return Response(\n        calculate_species_count_per_province(\n            taxon,\n            filters\n        )\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.SpeciesPopulationCountPerProvinceAPIView.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset()\n</code></pre> <p>Returns a filtered queryset of property objects within the specified organisation.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get_queryset(self) -&gt; QuerySet[Property]:\n    \"\"\"\n    Returns a filtered queryset of property objects\n    within the specified organisation.\n    \"\"\"\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.SpeciesPopulationCountPerYearAPIView","title":"SpeciesPopulationCountPerYearAPIView","text":"<p>               Bases: <code>APIView</code></p> <p>An API view to retrieve species population count per year.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.SpeciesPopulationCountPerYearAPIView.get","title":"get","text":"<pre><code>get(request, *args, **kwargs)\n</code></pre> <p>Handles HTTP GET requests and returns a serialized JSON response. Params: The HTTP request object containing the user's request data.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get(self, request: HttpRequest, *args, **kwargs) -&gt; Response:\n    \"\"\"\n    Handles HTTP GET requests and returns a serialized JSON response.\n    Params: The HTTP request object containing the user's request data.\n    \"\"\"\n    queryset = self.get_queryset()\n    serializer = SpeciesPopuationCountPerYearSerializer(\n        queryset, many=True, context={'request': request}\n    )\n    return Response(serializer.data)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.SpeciesPopulationCountPerYearAPIView.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset()\n</code></pre> <p>Returns a filtered queryset of Taxon objects representing species within the specified organisation.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get_queryset(self) -&gt; List[Taxon]:\n    \"\"\"\n    Returns a filtered queryset of Taxon objects representing\n    species within the specified organisation.\n    \"\"\"\n    queryset = Taxon.objects.none()\n    if self.request.user.is_superuser:\n        queryset = Taxon.objects.all().distinct()\n    else:\n        organisation_ids = get_organisation_ids(self.request.user)\n        queryset = Taxon.objects.filter(\n            annualpopulation__property__organisation__in=organisation_ids\n        ).distinct()\n    filtered_queryset = BaseMetricsFilter(\n        self.request.GET, queryset=queryset\n    ).qs\n    return filtered_queryset\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.SpeciesPopulationDensityPerPropertyAPIView","title":"SpeciesPopulationDensityPerPropertyAPIView","text":"<p>               Bases: <code>APIView</code></p> <p>API view to retrieve species population density per property.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.SpeciesPopulationDensityPerPropertyAPIView.get","title":"get","text":"<pre><code>get(request, *args, **kwargs)\n</code></pre> <p>Handle the GET request to retrieve species population density per property. Params:request (Request): The HTTP request object.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get(self, request, *args, **kwargs) -&gt; Response:\n    \"\"\"\n    Handle the GET request to retrieve species\n    population density per property.\n    Params:request (Request): The HTTP request object.\n    \"\"\"\n    queryset = self.get_queryset()\n\n    # Extract the species_name query parameter from the URL\n    species_name = self.request.query_params.get(\"species\", None)\n\n    serializer = SpeciesPopulationDensityPerPropertySerializer(\n        queryset,\n        many=True,\n        context={\n            \"request\": request,\n            \"species_name\": species_name\n        }\n    )\n    return Response(serializer.data)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.SpeciesPopulationDensityPerPropertyAPIView.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset()\n</code></pre> <p>Returns a filtered queryset of property objects within the specified organisation.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get_queryset(self) -&gt; QuerySet[Property]:\n    \"\"\"\n    Returns a filtered queryset of property objects\n    within the specified organisation.\n    \"\"\"\n    organisation_id = get_current_organisation_id(self.request.user)\n    queryset = Property.objects.filter(organisation_id=organisation_id)\n    filtered_queryset = PropertyFilter(\n        self.request.GET, queryset=queryset\n    ).qs\n    return filtered_queryset.distinct('name')\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.TotalAreaAvailableToSpeciesAPIView","title":"TotalAreaAvailableToSpeciesAPIView","text":"<p>               Bases: <code>APIView</code></p> <p>An API view to retrieve total area available to species.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.TotalAreaAvailableToSpeciesAPIView.get","title":"get","text":"<pre><code>get(request, *args, **kwargs)\n</code></pre> <p>Retrieve the calculated total area available to species and return it as a Response.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get(self, request: HttpRequest, *args, **kwargs) -&gt; Response:\n    \"\"\"\n    Retrieve the calculated total area available to species and\n    return it as a Response.\n    \"\"\"\n    user_roles = get_user_roles(request.user)\n    queryset = get_queryset(user_roles, request)\n    filters = get_report_filter(request, SPECIES_REPORT)\n    if 'annualpopulationperactivity__activity_type_id__in' in filters:\n        del filters['annualpopulationperactivity__activity_type_id__in']\n    species_population_data = AnnualPopulation.objects.filter(\n        property__in=queryset,\n        **filters\n    )\n    return Response(\n        AreaAvailablePerSpeciesSerializer(\n            species_population_data, many=True\n        ).data\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.TotalAreaPerPropertyTypeAPIView","title":"TotalAreaPerPropertyTypeAPIView","text":"<p>               Bases: <code>APIView</code></p> <p>API endpoint to retrieve total area per property type for properties within an organisation.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.TotalAreaPerPropertyTypeAPIView.get","title":"get","text":"<pre><code>get(request, *args, **kwargs)\n</code></pre> <p>Handle GET request to retrieve total area per property type.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get(self, request, *args, **kwargs) -&gt; Response:\n    \"\"\"\n    Handle GET request to retrieve total area per property type.\n    \"\"\"\n    species_name = request.GET.get(\"species\")\n    queryset = self.get_queryset()\n    return Response(\n        calculate_total_area_per_property_type(\n            queryset, species_name)\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.TotalAreaPerPropertyTypeAPIView.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset()\n</code></pre> <p>Get the filtered queryset of properties owned by the organisation.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get_queryset(self) -&gt; QuerySet[Property]:\n    \"\"\"\n    Get the filtered queryset of properties owned by the organisation.\n    \"\"\"\n    organisation_id = get_current_organisation_id(self.request.user)\n    queryset = Property.objects.filter(organisation_id=organisation_id)\n    filtered_queryset = PropertyFilter(\n        self.request.GET, queryset=queryset\n    ).qs\n    return filtered_queryset\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.TotalCountPerActivityAPIView","title":"TotalCountPerActivityAPIView","text":"<p>               Bases: <code>APIView</code></p> <p>API view to retrieve total counts per activity for species.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.TotalCountPerActivityAPIView.get","title":"get","text":"<pre><code>get(request, *args, **kwargs)\n</code></pre> <p>Handle the GET request to retrieve total counts per activity data. Params:request (Request): The HTTP request object.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get(self, request, *args, **kwargs) -&gt; Response:\n    \"\"\"\n    Handle the GET request to retrieve total counts per activity data.\n    Params:request (Request): The HTTP request object.\n    \"\"\"\n    queryset = self.get_queryset()\n    serializer = TotalCountPerActivitySerializer(\n        queryset, many=True, context={\"request\": request}\n    )\n    return Response(serializer.data)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.TotalCountPerActivityAPIView.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset()\n</code></pre> <p>Returns a filtered queryset of Taxon objects representing species within the specified organisation.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get_queryset(self) -&gt; List[Taxon]:\n    \"\"\"\n    Returns a filtered queryset of Taxon objects representing\n    species within the specified organisation.\n    \"\"\"\n    queryset = Taxon.objects.none()\n    if self.request.user.is_superuser:\n        queryset = Taxon.objects.all().distinct()\n    else:\n        organisation_ids = get_organisation_ids(self.request.user)\n        queryset = Taxon.objects.filter(\n            annualpopulation__property__organisation__in=organisation_ids\n        ).distinct()\n    filtered_queryset = ActivityBaseMetricsFilter(\n        self.request.GET, queryset=queryset\n    ).qs\n    return filtered_queryset\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.TotalCountPerPopulationEstimateAPIView","title":"TotalCountPerPopulationEstimateAPIView","text":"<p>               Bases: <code>APIView</code></p> <p>API view to retrieve total counts per population estimate category for species.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.population.CanWritePopulationData","title":"CanWritePopulationData","text":"<p>               Bases: <code>APIView</code></p> <p>API to check whether user can update the data.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.population.CanWritePopulationData.can_overwrite_data","title":"can_overwrite_data","text":"<pre><code>can_overwrite_data(annual_population, property, taxon)\n</code></pre> <p>Check if user is able to overwrite annual_population record.</p> Source code in <code>django_project/frontend/api_views/population.py</code> <pre><code>def can_overwrite_data(self, annual_population: AnnualPopulation,\n                       property: Property, taxon: Taxon):\n    \"\"\"Check if user is able to overwrite annual_population record.\"\"\"\n    user = self.request.user\n    annual_population_id = int(self.request.data.get('id', 0))\n    if (\n        annual_population_id &gt; 0 and\n        not annual_population.is_editable(user)\n    ):\n        return False, self.EDIT_DATA_NO_PERMISSION_MESSAGE, None\n    year = self.request.data.get(\"year\")\n    other = None\n    if annual_population_id == 0:\n        other = annual_population\n    elif year != annual_population.year:\n        # find other annual_population in the updated year\n        other = AnnualPopulation.objects.filter(\n            year=year,\n            taxon=taxon,\n            property=property\n        ).first()\n    if other:\n        # when there is existing data in that year,\n        # check whether user is also able to edit that data\n        if not other.is_editable(user):\n            msg = (\n                self.EDIT_DATA_NO_PERMISSION_OVERWRITE_MESSAGE.format(\n                    year)\n            )\n            return False, msg, other\n        msg = self.EDIT_DATA_CONFIRM_OVERWRITE_MESSAGE.format(year)\n        return True, msg, other\n    return True, None, None\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.population.DeletePopulationAPIView","title":"DeletePopulationAPIView","text":"<p>               Bases: <code>APIView</code></p> <p>API to remove population data by id.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.population.DraftPopulationUpload","title":"DraftPopulationUpload","text":"<p>               Bases: <code>APIView</code></p> <p>API to fetch draft list and save as draft.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.population.FetchDraftPopulationUpload","title":"FetchDraftPopulationUpload","text":"<p>               Bases: <code>APIView</code></p> <p>API to fetch draft upload.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.population.FetchPopulationData","title":"FetchPopulationData","text":"<p>               Bases: <code>APIView</code></p> <p>Fetch existing annual population data.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.population.PopulationMeanSDChartApiView","title":"PopulationMeanSDChartApiView","text":"<p>               Bases: <code>BasePropertyCountAPIView</code></p> <p>API view for calculating and presenting statistical data related to population means and standard deviations (SD) based on different age classes.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.population.PopulationMeanSDChartApiView.age_group_by_property_type","title":"age_group_by_property_type","text":"<pre><code>age_group_by_property_type(property_type)\n</code></pre> <p>Organizes and calculates percentage distribution of age classes by property type.</p> <p>Parameters:</p> Name Type Description Default <code>property_type</code> <code>PropertyType</code> <p>The property type for which data is organized.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary with percentage distributions for each age class, organized by year and property type.</p> Source code in <code>django_project/frontend/api_views/population.py</code> <pre><code>def age_group_by_property_type(self, property_type: PropertyType) -&gt; dict:\n    \"\"\"\n    Organizes and calculates percentage distribution\n    of age classes by property type.\n\n    :param property_type: The property type for which data is organized.\n    :return: A dictionary with percentage distributions for each age class,\n        organized by year and property type.\n    \"\"\"\n    annual_populations = self.get_queryset().filter(\n        property__property_type=property_type\n    ).order_by('year').distinct()\n    year = {}\n\n    for annual_population in annual_populations:\n        if annual_population.year not in year:\n            year[annual_population.year] = {}\n\n        for age_class in self.age_classes:\n            year[annual_population.year].update(\n                self.calculate_percentage(\n                    annual_population,\n                    age_class\n                )\n            )\n    return {\n        property_type.name: year\n    }\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.population.PopulationMeanSDChartApiView.calculate_percentage","title":"calculate_percentage","text":"<pre><code>calculate_percentage(annual_population, age_class)\n</code></pre> <p>Calculates the percentage of male and female populations in a given age class.</p> <p>Parameters:</p> Name Type Description Default <code>annual_population</code> <code>AnnualPopulation</code> <p>object representing annual population data.</p> required <code>age_class</code> <code>str</code> <p>age class for which the percentage calculation is done.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>dictionary with percentage values for males and females in the specified age class.</p> Source code in <code>django_project/frontend/api_views/population.py</code> <pre><code>def calculate_percentage(\n        self,\n        annual_population: AnnualPopulation, age_class: str) -&gt; dict:\n    \"\"\"\n    Calculates the percentage of male and female populations in a\n    given age class.\n\n    :param annual_population: object representing annual population data.\n    :param age_class: age class for which the percentage\n        calculation is done.\n    :return: dictionary with percentage values for\n        males and females in the specified age class.\n    \"\"\"\n    age_class_male = age_class + MALE_SUFFIX\n    age_class_female = age_class + FEMALE_SUFFIX\n    age_class_total = age_class + TOTAL_SUFFIX\n    male = getattr(annual_population, age_class_male)\n    female = getattr(annual_population, age_class_female)\n    total = getattr(annual_population, age_class_total)\n\n    if not male:\n        male = 0\n\n    if not female:\n        female = 0\n\n    if not total:\n        total = male + female\n\n    return {\n        age_class_male: male / total * 100 if total &gt; 0 else 0,\n        age_class_female: female / total * 100 if total &gt; 0 else 0\n    }\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.population.PopulationMeanSDChartApiView.calculate_sd_and_mean","title":"calculate_sd_and_mean","text":"<pre><code>calculate_sd_and_mean(data)\n</code></pre> <p>Aggregates mean and standard deviation calculations     across all age classes.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <p>A dictionary containing detailed population data segregated by age classes.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary with aggregated mean and SD values for each age class and gender.</p> Source code in <code>django_project/frontend/api_views/population.py</code> <pre><code>def calculate_sd_and_mean(self, data) -&gt; dict:\n    \"\"\"\n    Aggregates mean and standard deviation calculations\n        across all age classes.\n\n    :param data: A dictionary containing detailed population data\n        segregated by age classes.\n    :return: A dictionary with aggregated mean and SD values for\n        each age class and gender.\n    \"\"\"\n    sd_and_means = {}\n    for age_class in self.age_classes:\n        sd_and_means.update(\n            self.calculate_sd_and_mean_by_age_class(\n                data, age_class\n            )\n        )\n    return sd_and_means\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.population.PopulationMeanSDChartApiView.calculate_sd_and_mean_by_age_class","title":"calculate_sd_and_mean_by_age_class","text":"<pre><code>calculate_sd_and_mean_by_age_class(data, age_class)\n</code></pre> <p>Calculates the mean and standard deviation (SD) for male and female data within a specified age class.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <p>A dictionary containing population data.</p> required <code>age_class</code> <code>str</code> <p>The age class for which calculations are performed.</p> required Source code in <code>django_project/frontend/api_views/population.py</code> <pre><code>def calculate_sd_and_mean_by_age_class(self, data, age_class: str) -&gt; dict:\n    \"\"\"\n    Calculates the mean and standard deviation (SD) for\n    male and female data within a specified age class.\n\n    :param data: A dictionary containing population data.\n    :param age_class: The age class for which calculations are performed.\n    \"\"\"\n    male_data = []\n    female_data = []\n\n    female_class = age_class + FEMALE_SUFFIX\n    male_class = age_class + MALE_SUFFIX\n\n    for location, years in data.items():\n        for year, age_classes in years.items():\n            if male_class in age_classes:\n                male_data.append(age_classes[male_class])\n            if female_class in age_classes:\n                female_data.append(age_classes[female_class])\n\n    mean_male = mean(male_data) if male_data else 0\n    sd_male = stdev(male_data) if len(male_data) &gt; 1 else 0\n\n    mean_female = mean(female_data) if female_data else 0\n    sd_female = stdev(female_data) if len(female_data) &gt; 1 else 0\n\n    return {\n        'mean_' + female_class: mean_female,\n        'sd_' + female_class: sd_female,\n        'mean_' + male_class: mean_male,\n        'sd_' + male_class: sd_male\n    }\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.population.PopulationMeanSDChartApiView.get","title":"get","text":"<pre><code>get(request, *args)\n</code></pre> <p>Handle GET request</p> Source code in <code>django_project/frontend/api_views/population.py</code> <pre><code>def get(self, request, *args):\n    \"\"\"\n    Handle GET request\n    \"\"\"\n    property_types = PropertyType.objects.all()\n\n    result = {}\n\n    for property_type in property_types:\n        result[property_type.name] = self.calculate_sd_and_mean(\n            self.age_group_by_property_type(\n                property_type\n            ))\n\n    return Response(result)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.population.PopulationMetadataList","title":"PopulationMetadataList","text":"<p>               Bases: <code>APIView</code></p> <p>Get metadata for uploading population.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.population.UploadPopulationAPIVIew","title":"UploadPopulationAPIVIew","text":"<p>               Bases: <code>CanWritePopulationData</code></p> <p>Save new upload of population data.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.property.CheckPropertyNameIsAvailable","title":"CheckPropertyNameIsAvailable","text":"<p>               Bases: <code>APIView</code></p> <p>Validate if property name is available.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.property.CreateNewProperty","title":"CreateNewProperty","text":"<p>               Bases: <code>CheckPropertyNameIsAvailable</code></p> <p>Create new property API.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.property.ListPropertyTypeAPIView","title":"ListPropertyTypeAPIView","text":"<p>               Bases: <code>APIView</code></p> <p>API to list Property Type</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.property.ListProvince","title":"ListProvince","text":"<p>               Bases: <code>APIView</code></p> <p>API to list Property Type</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.property.PropertyDetail","title":"PropertyDetail","text":"<p>               Bases: <code>APIView</code></p> <p>Fetch property detail.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.property.PropertyList","title":"PropertyList","text":"<p>               Bases: <code>APIView</code></p> <p>Get properties that the current user owns.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.property.PropertyMetadataList","title":"PropertyMetadataList","text":"<p>               Bases: <code>APIView</code></p> <p>Get metadata for property: type, organisation, province.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.property.PropertySearch","title":"PropertySearch","text":"<p>               Bases: <code>APIView</code></p> <p>Search property and roads.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.property.UpdatePropertyBoundaries","title":"UpdatePropertyBoundaries","text":"<p>               Bases: <code>CreateNewProperty</code></p> <p>Update property parcels.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.property.UpdatePropertyInformation","title":"UpdatePropertyInformation","text":"<p>               Bases: <code>CheckPropertyNameIsAvailable</code></p> <p>Update property information.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.upload.BoundaryFileGeoJson","title":"BoundaryFileGeoJson","text":"<p>               Bases: <code>APIView</code></p> <p>Get geojson from search request.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.upload.BoundaryFileList","title":"BoundaryFileList","text":"<p>               Bases: <code>APIView</code></p> <p>Retrieve Uploaded Boundary Files.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.upload.BoundaryFileRemove","title":"BoundaryFileRemove","text":"<p>               Bases: <code>APIView</code></p> <p>Remove Boundary File.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.upload.BoundaryFileSearch","title":"BoundaryFileSearch","text":"<p>               Bases: <code>APIView</code></p> <p>Find parcel by boundary files.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.upload.BoundaryFileSearchStatus","title":"BoundaryFileSearchStatus","text":"<p>               Bases: <code>APIView</code></p> <p>Check status search parcel by boundary files.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.upload.BoundaryFileUpload","title":"BoundaryFileUpload","text":"<p>               Bases: <code>APIView</code></p> <p>Upload Boundary File.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.national_statistic.NationalActivityCountPerPropertyView","title":"NationalActivityCountPerPropertyView","text":"<p>               Bases: <code>APIView</code></p> <p>API to retrieve activity count as % of the the total population per property type</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.national_statistic.NationalActivityCountPerPropertyView.get","title":"get","text":"<pre><code>get(*args, **kwargs)\n</code></pre> <p>Handle GET request to retrieve population categories for properties.</p> Source code in <code>django_project/frontend/api_views/national_statistic.py</code> <pre><code>def get(self, *args, **kwargs) -&gt; Response:\n    \"\"\"\n    Handle GET request to\n    retrieve population categories for properties.\n    \"\"\"\n    queryset = self.get_activity_count()\n    return Response(queryset)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.national_statistic.NationalActivityCountPerPropertyView.get_activity_count","title":"get_activity_count","text":"<pre><code>get_activity_count()\n</code></pre> <p>Get activity count of the total population as percentage</p> Source code in <code>django_project/frontend/api_views/national_statistic.py</code> <pre><code>def get_activity_count(self) -&gt; QuerySet[Property]:\n    \"\"\"\n    Get activity count of the total\n    population as percentage\n    \"\"\"\n    # Step 1: Get all Annual Population and filter them\n    annual_populations = AnnualPopulation.objects.select_related(\n        'taxon',\n        'property__province',\n        'property__property_type'\n    )\n\n    # Step 3 and 4: Calculate percentages\n    # and build the object array\n    result = {}\n\n    # Calculate total area for each species\n    # in each province and property type\n    for population in annual_populations:\n        species_name = population.taxon.common_name_verbatim\n        property_type_name = population.property.property_type.name\n        area_available = population.area_available_to_species\n\n        if species_name not in result:\n            result[species_name] = {}\n\n        if property_type_name not in result[species_name]:\n            result[species_name][property_type_name] = {\n                'total_area': 0,\n                'species_area': 0\n            }\n\n        area = area_available\n        result[species_name][property_type_name]['total_area'] += area\n        result[species_name][property_type_name]['species_area'] += area\n\n    # Calculate total area for each property type and each species\n    property_type_totals = {}\n\n    for species_name, property_type_data in result.items():\n        for property_type_name, area_data in property_type_data.items():\n            property_type_total = area_data['total_area']\n            species_area = area_data['species_area']\n\n            if property_type_name not in property_type_totals:\n                property_type_totals[property_type_name] = 0\n\n            property_type_totals[property_type_name] += property_type_total\n\n    # Calculate and update percentages\n    # for each species in each property type\n    for species_name, property_type_data in result.items():\n        for property_type_name, area_data in property_type_data.items():\n            species_area = area_data['species_area']\n            property_type_total = property_type_totals[property_type_name]\n\n            percentage = (\n                species_area / property_type_total\n            ) * 100 if property_type_total != 0 else 0\n            a = f'{percentage:.2f}%'\n            result[species_name][property_type_name]['percentage'] = a\n\n    return result\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.national_statistic.NationalActivityCountPerProvinceView","title":"NationalActivityCountPerProvinceView","text":"<p>               Bases: <code>APIView</code></p> <p>API to retrieve activity count as % of the the total population for per province</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.national_statistic.NationalActivityCountPerProvinceView.get","title":"get","text":"<pre><code>get(*args, **kwargs)\n</code></pre> <p>Handle GET request to retrieve population categories for properties.</p> Source code in <code>django_project/frontend/api_views/national_statistic.py</code> <pre><code>def get(self, *args, **kwargs) -&gt; Response:\n    \"\"\"\n    Handle GET request to\n    retrieve population categories for properties.\n    \"\"\"\n    queryset = self.get_activity_count()\n    return Response(queryset)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.national_statistic.NationalActivityCountPerProvinceView.get_activity_count","title":"get_activity_count","text":"<pre><code>get_activity_count()\n</code></pre> <p>Get activity count of the total population as percentage</p> Source code in <code>django_project/frontend/api_views/national_statistic.py</code> <pre><code>def get_activity_count(self) -&gt; QuerySet[Property]:\n    \"\"\"\n    Get activity count of the total\n    population as percentage\n    \"\"\"\n    # Step 1: Get all Annual Population and filter them\n    annual_population = AnnualPopulation.objects.select_related(\n        'taxon', 'property__province'\n    )\n\n    # Step 3 and 4: Calculate percentages and build the object array\n    result = {}\n\n    # Calculate total area for each species in each province\n    for population in annual_population:\n        species_name = population.taxon.common_name_verbatim\n        province_name = population.property.province.name\n        area_available = population.area_available_to_species\n\n        if species_name not in result:\n            result[species_name] = {}\n\n        if province_name not in result[species_name]:\n            result[species_name][province_name] = {\n                'total_area': 0,\n                'species_area': 0\n            }\n\n        area = area_available\n        result[species_name][province_name]['total_area'] += area_available\n        result[species_name][province_name]['species_area'] += area\n\n\n    # Calculate total area for each province and each species\n    province_totals = {}\n\n    for species_name, province_data in result.items():\n        for province_name, area_data in province_data.items():\n            province_total = area_data['total_area']\n            species_area = area_data['species_area']\n\n            if province_name not in province_totals:\n                province_totals[province_name] = 0\n\n            province_totals[province_name] += province_total\n\n    # Calculate and update percentages for\n    # each species in each province\n    for species_name, province_data in result.items():\n        for province_name, area_data in province_data.items():\n            species_area = area_data['species_area']\n            province_total = province_totals[province_name]\n\n            percentage = (\n                species_area / province_total\n            ) * 100 if province_total != 0 else 0\n            result[species_name][province_name]['percentage'] = \\\n                f'{percentage:.2f}%'\n\n    return result\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.national_statistic.NationalActivityCountView","title":"NationalActivityCountView","text":"<p>               Bases: <code>APIView</code></p> <p>API to retrieve activity count as % of the the total population for each species</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.national_statistic.NationalActivityCountView.get","title":"get","text":"<pre><code>get(*args, **kwargs)\n</code></pre> <p>Handle GET request to retrieve population categories for properties.</p> Source code in <code>django_project/frontend/api_views/national_statistic.py</code> <pre><code>def get(self, *args, **kwargs) -&gt; Response:\n    \"\"\"\n    Handle GET request to\n    retrieve population categories for properties.\n    \"\"\"\n    queryset = self.get_activity_count()\n    return Response(queryset)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.national_statistic.NationalActivityCountView.get_activity_count","title":"get_activity_count","text":"<pre><code>get_activity_count()\n</code></pre> <p>Get activity count of the total population as percentage</p> Source code in <code>django_project/frontend/api_views/national_statistic.py</code> <pre><code>def get_activity_count(self) -&gt; QuerySet[Property]:\n    \"\"\"\n    Get activity count of the total\n    population as percentage\n    \"\"\"\n    properties = Property.objects.filter()\n\n    # Retrieve species on each property\n    species_per_property = AnnualPopulation.objects.filter(\n        property__in=properties\n    ).values('taxon', 'property')\n\n    # Retrieve activity types\n    activity_types = ActivityType.objects.all()\n\n    # Retrieve population count\n    # for each species and activity type\n    population_counts = []\n    for species in species_per_property:\n        for activity_type in activity_types:\n            population_count = AnnualPopulationPerActivity.objects.filter(\n                annual_population__taxon=species['taxon'],\n                activity_type=activity_type\n            ).aggregate(\n                population_count=Coalesce(Sum('total'), 0)\n            )['population_count']\n\n            population_counts.append({\n                'species': species['taxon'],\n                'activity_type': activity_type.name,\n                'population_count': population_count\n            })\n\n    # Calculate the total population count per species\n    total_population_per_species = {}\n    for item in population_counts:\n        species = item['species']\n        population_count = item['population_count']\n        if species in total_population_per_species:\n            total_population_per_species[species] += population_count\n        else:\n            total_population_per_species[species] = population_count\n\n    # Calculate the percentage of each species for each activity type\n    result = {}\n    for item in population_counts:\n        species = item['species']\n        activity_type = item['activity_type']\n        population_count = item['population_count']\n        total_population = total_population_per_species[species]\n        percentage = (\n            population_count / total_population\n        ) * 100 if total_population != 0 else 0\n\n\n        taxa = AnnualPopulation.objects.filter(taxon_id=species).first()\n        if taxa:\n            taxon = taxa.taxon\n            common_name = taxon.common_name_verbatim\n            icon_url = taxon.icon.url if taxon.icon else None\n\n        else:\n            common_name = 'None'\n            icon_url = None\n        if species not in result:\n            result[species] = {\n                'species_name': common_name,\n                'icon': icon_url\n            }\n        result[species][activity_type] = f'{percentage:.2f}%'\n\n    return result\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.national_statistic.NationalPropertiesView","title":"NationalPropertiesView","text":"<p>               Bases: <code>APIView</code></p> <p>An API view to retrieve the statistics for the national report.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.national_statistic.NationalPropertiesView.get","title":"get","text":"<pre><code>get(request, *args, **kwargs)\n</code></pre> <p>Handle GET request to retrieve population categories for properties.</p> Source code in <code>django_project/frontend/api_views/national_statistic.py</code> <pre><code>def get(self, request, *args, **kwargs) -&gt; Response:\n    \"\"\"\n    Handle GET request to\n    retrieve population categories for properties.\n    \"\"\"\n    species_name = request.GET.get(\"species\")\n    queryset = self.get_properties_per_population_category()\n    return Response(\n        calculate_population_categories(\n            queryset,\n            species_name\n        )\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.national_statistic.NationalPropertiesView.get_properties_per_population_category","title":"get_properties_per_population_category","text":"<pre><code>get_properties_per_population_category()\n</code></pre> <p>Get the filtered queryset of properties owned by the organisation.</p> Source code in <code>django_project/frontend/api_views/national_statistic.py</code> <pre><code>def get_properties_per_population_category(self) -&gt; QuerySet[Property]:\n    \"\"\"\n    Get the filtered queryset\n    of properties owned by the organisation.\n    \"\"\"\n    queryset = Property.objects.filter()\n    filtered_queryset = PropertyFilter(\n        self.request.GET, queryset=queryset\n    ).qs\n    return filtered_queryset\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.national_statistic.NationalSpeciesView","title":"NationalSpeciesView","text":"<p>               Bases: <code>APIView</code></p> <p>An API view to retrieve the statistics for the national report.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.national_statistic.NationalSpeciesView.get","title":"get","text":"<pre><code>get(*args, **kwargs)\n</code></pre> <p>Handles the request and returns a serialized JSON response.</p> Source code in <code>django_project/frontend/api_views/national_statistic.py</code> <pre><code>def get(self, *args, **kwargs) -&gt; Response:\n    \"\"\"\n    Handles the request\n    and returns a serialized JSON response.\n    \"\"\"\n    queryset = self.get_species_list()\n    serializer = SpeciesListSerializer(\n        queryset, many=True,\n    )\n    return Response(serializer.data)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.national_statistic.NationalSpeciesView.get_species_list","title":"get_species_list","text":"<pre><code>get_species_list()\n</code></pre> <p>Returns a filtered queryset of Taxon objects representing species.</p> Source code in <code>django_project/frontend/api_views/national_statistic.py</code> <pre><code>def get_species_list(self) -&gt; List[Taxon]:\n    \"\"\"\n    Returns a filtered queryset\n    of Taxon objects representing\n    species.\n    \"\"\"\n    queryset = Taxon.objects.filter(\n        taxon_rank__name='Species'\n    ).distinct()\n    return queryset\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.national_statistic.NationalStatisticsView","title":"NationalStatisticsView","text":"<p>               Bases: <code>APIView</code></p> <p>An API view to retrieve the statistics for the national report.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.national_statistic.NationalStatisticsView.get","title":"get","text":"<pre><code>get(*args, **kwargs)\n</code></pre> <p>Handles the request and returns a serialized JSON response.</p> Source code in <code>django_project/frontend/api_views/national_statistic.py</code> <pre><code>def get(self, *args, **kwargs) -&gt; Response:\n    \"\"\"\n    Handles the request\n    and returns a serialized JSON response.\n    \"\"\"\n    statistics = self.get_statistics(self.request)\n    serializer = NationalStatisticsSerializer(statistics)\n    return Response(serializer.data)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.national_statistic.NationalStatisticsView.get_statistics","title":"get_statistics","text":"<pre><code>get_statistics(request)\n</code></pre> <p>This method calculates the property count, total property area, and total property area available for species (national).</p> Source code in <code>django_project/frontend/api_views/national_statistic.py</code> <pre><code>def get_statistics(self, request):\n    \"\"\"\n    This method calculates the property\n    count, total property area, and\n    total property area available for\n    species (national).\n    \"\"\"\n    national_properties = Property.objects.all()\n\n    # Count the number of matching properties\n    total_property_count = national_properties.count()\n\n    # Sum up the property sizes to get total area available\n    total_property_area = national_properties.aggregate(\n        total_area=Sum('property_size_ha')\n    )['total_area']\n\n    # Query the AnnualPopulation table and\n    # get the area available to species for each property\n    property_ids = national_properties.values_list('id', flat=True)\n    total_area_available_to_species = AnnualPopulation.objects.filter(\n        property__id__in=property_ids\n    ).aggregate(\n        total_area_to_species=Sum('area_available_to_species')\n    )['total_area_to_species']\n\n    # Create a dictionary with the aggregated values\n    aggregated_data = {\n        'total_property_count': total_property_count,\n        'total_property_area': total_property_area,\n        'total_area_available_to_species': total_area_available_to_species,\n    }\n\n    return aggregated_data\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.spatial_filter.SpatialFilterList","title":"SpatialFilterList","text":"<p>               Bases: <code>LoginRequiredMixin</code>, <code>APIView</code></p> <p>A view that returns a list of layers marked as spatial filters.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.spatial_filter.SpatialFilterList.get","title":"get","text":"<pre><code>get(request, **kwargs)\n</code></pre> <p>Handles the GET request and returns the list of spatial filter layers</p> Source code in <code>django_project/frontend/api_views/spatial_filter.py</code> <pre><code>def get(self, request, **kwargs) -&gt; Response:\n    \"\"\"\n    Handles the GET request and returns the list of spatial filter layers\n    \"\"\"\n    spatial_filter_layers = Layer.objects.filter(\n        is_filter_layer=True\n    )\n    return Response(\n        SpatialLayerSerializer(\n            spatial_filter_layers, many=True).data\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.spatial_filter.SpatialLayerSerializer","title":"SpatialLayerSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.spatial_filter.SpatialLayerSerializer.get_values","title":"get_values","text":"<pre><code>get_values(obj)\n</code></pre> <p>Retrieve distinct spatial values for the given layer.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Layer</code> <p>Instance of Layer model</p> required Source code in <code>django_project/frontend/api_views/spatial_filter.py</code> <pre><code>def get_values(self, obj: Layer) -&gt; List[str]:\n    \"\"\"\n    Retrieve distinct spatial values for the given layer.\n\n    :param obj: Instance of Layer model\n    :type obj: Layer\n    \"\"\"\n    return list(\n        obj.spatialdatavaluemodel_set.distinct(\n            'context_layer_value'\n        ).values_list(\n            'context_layer_value',\n            flat=True\n        )\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.statistical.DownloadTrendDataAsJson","title":"DownloadTrendDataAsJson","text":"<p>               Bases: <code>SpeciesTrend</code></p> <p>Download trend data as json.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.statistical.SpeciesNationalTrend","title":"SpeciesNationalTrend","text":"<p>               Bases: <code>APIView</code></p> <p>Fetch national trend of species.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.statistical.SpeciesTrend","title":"SpeciesTrend","text":"<p>               Bases: <code>SpeciesNationalTrend</code></p> <p>Fetch trend of species.</p> <p>Returns:     Response: JSON response containing trend data.</p>"},{"location":"developer/manual/frontend/#filters","title":"Filters","text":"<p>Filters in Data table.</p> <p>Filters in metrics.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.filters.data_table.DataContributorsFilter","title":"DataContributorsFilter","text":"<p>               Bases: <code>FilterSet</code></p>"},{"location":"developer/manual/frontend/#django_project.frontend.filters.data_table.DataContributorsFilter.filter_property","title":"filter_property","text":"<pre><code>filter_property(queryset, name, value)\n</code></pre> <p>Filter queryset by given property Params:     queryset (QuerySet): The queryset to be filtered.     name (str): The name of the property to filter by.     value (str): A comma-separated list of property IDs.</p> Source code in <code>django_project/frontend/filters/data_table.py</code> <pre><code>def filter_property(self, queryset: QuerySet, name: str, value: str) \\\n    -&gt; QuerySet:\n    \"\"\"\n    Filter queryset by given property\n    Params:\n        queryset (QuerySet): The queryset to be filtered.\n        name (str): The name of the property to filter by.\n        value (str): A comma-separated list of property IDs.\n    \"\"\"\n    property_list = value.split(',')\n    return queryset.filter(id__in=property_list)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.filters.metrics.ActivityBaseMetricsFilter","title":"ActivityBaseMetricsFilter","text":"<p>               Bases: <code>BaseMetricsFilter</code></p> <p>Filter the queryset based on the start year and end year of activity data. Params:         queryset (QuerySet): The base queryset of Taxon model.         value (str): The start year of the annual population.         name (str): The name of the field to be filtered (property).</p>"},{"location":"developer/manual/frontend/#django_project.frontend.filters.metrics.BaseMetricsFilter","title":"BaseMetricsFilter","text":"<p>               Bases: <code>FilterSet</code></p> <p>Filter class for metrics based on species, start year, and property.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.filters.metrics.BaseMetricsFilter.filter_organisation","title":"filter_organisation","text":"<pre><code>filter_organisation(queryset, name, value)\n</code></pre> <p>Filter organisation based on annual population.</p> <p>Params:     queryset (QuerySet): The base queryset of Taxon model.     value (str): Comma-separated property IDs.     name (str): The name of the field to be filtered (organisation).</p> Source code in <code>django_project/frontend/filters/metrics.py</code> <pre><code>def filter_organisation(self, queryset: QuerySet, name: str, value: str) \\\n    -&gt; QuerySet:\n    \"\"\"\n    Filter organisation based on annual population.\n\n    Params:\n        queryset (QuerySet): The base queryset of Taxon model.\n        value (str): Comma-separated property IDs.\n        name (str): The name of the field to be filtered (organisation).\n    \"\"\"\n    organisation_list = value.split(',')\n    return queryset.filter(\n        annualpopulation__property__organisation__id__in=organisation_list\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.filters.metrics.BaseMetricsFilter.filter_property","title":"filter_property","text":"<pre><code>filter_property(queryset, name, value)\n</code></pre> <p>Filter properties based on annual population.</p> <p>Params:     queryset (QuerySet): The base queryset of Taxon model.     value (str): Comma-separated property IDs.     name (str): The name of the field to be filtered (property).</p> Source code in <code>django_project/frontend/filters/metrics.py</code> <pre><code>def filter_property(self, queryset: QuerySet, name: str, value: str) \\\n    -&gt; QuerySet:\n    \"\"\"\n    Filter properties based on annual population.\n\n    Params:\n        queryset (QuerySet): The base queryset of Taxon model.\n        value (str): Comma-separated property IDs.\n        name (str): The name of the field to be filtered (property).\n    \"\"\"\n    properties_list = value.split(',')\n    return queryset.filter(\n        annualpopulation__property__id__in=properties_list\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.filters.metrics.BaseMetricsFilter.filter_species","title":"filter_species","text":"<pre><code>filter_species(queryset, name, value)\n</code></pre> <p>Filter species based on common_name_verbatim.</p> <p>Params:     queryset (QuerySet): The base queryset of Taxon model.     value (str): Comma-separated species names.     name (str): The name of the field to be filtered (property).</p> Source code in <code>django_project/frontend/filters/metrics.py</code> <pre><code>def filter_species(self, queryset: QuerySet, name: str, value: str) \\\n    -&gt; QuerySet:\n    \"\"\"\n    Filter species based on common_name_verbatim.\n\n    Params:\n        queryset (QuerySet): The base queryset of Taxon model.\n        value (str): Comma-separated species names.\n        name (str): The name of the field to be filtered (property).\n    \"\"\"\n    species_list = value.split(',')\n    return queryset.filter(scientific_name__in=species_list)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.filters.metrics.BaseMetricsFilter.filter_start_year","title":"filter_start_year","text":"<pre><code>filter_start_year(queryset, name, value)\n</code></pre> <p>Filter annual populations based on range from start_year to end_year.</p> <p>Params:     queryset (QuerySet): The base queryset of Taxon model.     value (str): The start year of the annual population.     name (str): The name of the field to be filtered (property).</p> Source code in <code>django_project/frontend/filters/metrics.py</code> <pre><code>def filter_start_year(self, queryset: QuerySet, name: str, value: str) \\\n    -&gt; QuerySet:\n    \"\"\"\n    Filter annual populations based on range from start_year to end_year.\n\n    Params:\n        queryset (QuerySet): The base queryset of Taxon model.\n        value (str): The start year of the annual population.\n        name (str): The name of the field to be filtered (property).\n    \"\"\"\n    start_year = int(value)\n    end_year = int(self.data.get('end_year'))\n    return queryset.filter(\n        annualpopulation__year__range=(\n            start_year,\n            end_year\n        )\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.filters.metrics.PropertyFilter","title":"PropertyFilter","text":"<p>               Bases: <code>FilterSet</code></p> <p>A custom filter for filtering Property objects based on a comma-separated list of property IDs.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.filters.metrics.PropertyFilter.filter_property","title":"filter_property","text":"<pre><code>filter_property(queryset, name, value)\n</code></pre> <p>Custom filter method to filter properties by their IDs. params:     queryset (QuerySet): The initial queryset of Property objects.     name (str): The name of the field to be filtered (property).     value (str): A comma-separated list of property IDs.</p> Source code in <code>django_project/frontend/filters/metrics.py</code> <pre><code>def filter_property(self, queryset: QuerySet, name: str, value: str) \\\n    -&gt; QuerySet:\n    \"\"\"\n    Custom filter method to filter properties by their IDs.\n    params:\n        queryset (QuerySet): The initial queryset of Property objects.\n        name (str): The name of the field to be filtered (property).\n        value (str): A comma-separated list of property IDs.\n    \"\"\"\n    properties_list = value.split(',')\n    return queryset.filter(id__in=properties_list)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.filters.metrics.PropertyFilter.filter_start_year","title":"filter_start_year","text":"<pre><code>filter_start_year(queryset, name, value)\n</code></pre> <p>Filter property based on range from start_year to end_year.</p> <p>Params:     queryset (QuerySet): The base queryset of Taxon model.     value (str): The start year of the annual population.     name (str): The name of the field to be filtered (property).</p> Source code in <code>django_project/frontend/filters/metrics.py</code> <pre><code>def filter_start_year(self, queryset: QuerySet, name: str, value: str) \\\n    -&gt; QuerySet:\n    \"\"\"\n    Filter property based on range from start_year to end_year.\n\n    Params:\n        queryset (QuerySet): The base queryset of Taxon model.\n        value (str): The start year of the annual population.\n        name (str): The name of the field to be filtered (property).\n    \"\"\"\n    start_year = int(value)\n    end_year = int(self.data.get('end_year'))\n    return queryset.filter(\n        annualpopulation__year__range=(\n            start_year,\n            end_year\n        )\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#models","title":"Models","text":"<p>Base model for task.</p> <p>Classes for searching parcels.</p> <p>Context Layers with mapping table to tegola layers.</p> <p>Cadastral Land Parcel tables.</p> <p>Classes for upload helper.</p> <p>Classes for map filter session.</p> <p>Place tables from layer schema.</p> <p>Classes for Statistical R Model.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.base_task.BaseTaskRequest","title":"BaseTaskRequest","text":"<p>               Bases: <code>Model</code></p> <p>Abstract class for Base Task Request.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.base_task.BaseTaskRequest.Meta","title":"Meta","text":"<p>Meta class for abstract base task request.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.base_task.BaseTaskRequest.task_on_started","title":"task_on_started","text":"<pre><code>task_on_started()\n</code></pre> <p>Initialize properties when task is started.</p> Source code in <code>django_project/frontend/models/base_task.py</code> <pre><code>def task_on_started(self):\n    \"\"\"Initialize properties when task is started.\"\"\"\n    self.status = PROCESSING\n    self.started_at = timezone.now()\n    self.finished_at = None\n    self.progress = 0\n    self.progress_text = None\n    self.save()\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.models.base_task.BaseTaskRequest.update_progress","title":"update_progress","text":"<pre><code>update_progress(current_progress, total_progress)\n</code></pre> <p>Update progress percentage.</p> Source code in <code>django_project/frontend/models/base_task.py</code> <pre><code>def update_progress(self, current_progress, total_progress):\n    \"\"\"Update progress percentage.\"\"\"\n    if total_progress == 0:\n        self.progress = 0\n    else:\n        self.progress = current_progress * 100 / total_progress\n    self.save(update_fields=['progress'])\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.models.boundary_search.BoundaryFile","title":"BoundaryFile","text":"<p>               Bases: <code>Model</code></p> <p>Boundary uploaded file.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.boundary_search.BoundarySearchRequest","title":"BoundarySearchRequest","text":"<p>               Bases: <code>BaseTaskRequest</code>, <code>Model</code></p> <p>Boundary search request.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.context_layer.ContextLayer","title":"ContextLayer","text":"<p>               Bases: <code>Model</code></p> <p>A model for the context layer.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.context_layer.ContextLayerLegend","title":"ContextLayerLegend","text":"<p>               Bases: <code>Model</code></p> <p>Legend for context layer.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.context_layer.ContextLayerTilingTask","title":"ContextLayerTilingTask","text":"<p>               Bases: <code>Model</code></p> <p>Vector tile status for context layer.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.context_layer.Layer","title":"Layer","text":"<p>               Bases: <code>Model</code></p> <p>A model representing an individual layer within a context.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.parcels.Erf","title":"Erf","text":"<p>               Bases: <code>ParcelBase</code></p> <p>Erf Urban Parcel.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.parcels.Erf.Meta","title":"Meta","text":"<p>Meta class for Erf.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.parcels.FarmPortion","title":"FarmPortion","text":"<p>               Bases: <code>ParcelBase</code></p> <p>Farm Portion Rural Parcel.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.parcels.FarmPortion.Meta","title":"Meta","text":"<p>Meta class for FarmPortion.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.parcels.Holding","title":"Holding","text":"<p>               Bases: <code>ParcelBase</code></p> <p>Holding Semi Urban Parcel.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.parcels.Holding.Meta","title":"Meta","text":"<p>Meta class for Holding.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.parcels.ParcelBase","title":"ParcelBase","text":"<p>               Bases: <code>Model</code></p> <p>Base Model for Parcel Tables.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.parcels.ParcelBase.Meta","title":"Meta","text":"<p>Meta class for ParcelBase.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.parcels.ParentFarm","title":"ParentFarm","text":"<p>               Bases: <code>ParcelBase</code></p> <p>ParentFarm Rural Parcel.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.parcels.ParentFarm.Meta","title":"Meta","text":"<p>Meta class for ParentFarm.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.upload.DraftSpeciesUpload","title":"DraftSpeciesUpload","text":"<p>               Bases: <code>Model</code></p> <p>Store draft of species upload data.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.upload.UploadSpeciesCSV","title":"UploadSpeciesCSV","text":"<p>               Bases: <code>Model</code></p> <p>Upload species csv model</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.upload.UploadSpeciesCSV.Meta","title":"Meta","text":"<p>Metaclass for project.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.map_session.MapSession","title":"MapSession","text":"<p>               Bases: <code>Model</code></p> <p>Store session for map.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.places.PlaceBase","title":"PlaceBase","text":"<p>               Bases: <code>Model</code></p> <p>Base Model for Place Tables.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.places.PlaceBase.Meta","title":"Meta","text":"<p>Meta class for PlaceBase.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.places.PlaceNameLargerScale","title":"PlaceNameLargerScale","text":"<p>               Bases: <code>PlaceBase</code></p> <p>Place name larger scale.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.places.PlaceNameLargerScale.Meta","title":"Meta","text":"<p>Meta class for PlaceNameLargerScale.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.places.PlaceNameLargestScale","title":"PlaceNameLargestScale","text":"<p>               Bases: <code>PlaceBase</code></p> <p>Place name largest scale.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.places.PlaceNameLargestScale.Meta","title":"Meta","text":"<p>Meta class for PlaceNameLargestScale.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.places.PlaceNameMidScale","title":"PlaceNameMidScale","text":"<p>               Bases: <code>PlaceBase</code></p> <p>Place name mid scale.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.places.PlaceNameMidScale.Meta","title":"Meta","text":"<p>Meta class for PlaceNameMidScale.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.places.PlaceNameSmallScale","title":"PlaceNameSmallScale","text":"<p>               Bases: <code>PlaceBase</code></p> <p>Place name small scale.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.places.PlaceNameSmallScale.Meta","title":"Meta","text":"<p>Meta class for PlaceNameSmallScale.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.statistical.OutputTypeCategoryIndex","title":"OutputTypeCategoryIndex","text":"<p>               Bases: <code>Model</code></p> <p>Define a sort index for output type of categories.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.statistical.OutputTypeCategoryIndexManager","title":"OutputTypeCategoryIndexManager","text":"<p>               Bases: <code>Manager</code></p> <p>Manager class for output type category index.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.statistical.SpeciesModelOutput","title":"SpeciesModelOutput","text":"<p>               Bases: <code>BaseTaskRequest</code></p> <p>Store statistical model output for a species.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.statistical.StatisticalModel","title":"StatisticalModel","text":"<p>               Bases: <code>Model</code></p> <p>Model that stores R code of statistical model.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.statistical.StatisticalModelOutput","title":"StatisticalModelOutput","text":"<p>               Bases: <code>Model</code></p> <p>Output of statistical model.</p>"},{"location":"developer/manual/frontend/#views","title":"Views","text":"<p>View to switch organisation.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.views.about.AboutView","title":"AboutView","text":"<p>               Bases: <code>OrganisationBaseView</code></p> <p>AboutView displays the about page by rendering the 'about.html' template.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.views.base_view.OrganisationBaseView","title":"OrganisationBaseView","text":"<p>               Bases: <code>TemplateView</code></p> <p>Base view to provide organisation context</p>"},{"location":"developer/manual/frontend/#django_project.frontend.views.base_view.RegisteredOrganisationBaseView","title":"RegisteredOrganisationBaseView","text":"<p>               Bases: <code>LoginRequiredMixin</code>, <code>OrganisationBaseView</code></p> <p>Base view to provide organisation context for logged-in users.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.views.base_view.get_user_notifications","title":"get_user_notifications","text":"<pre><code>get_user_notifications(request)\n</code></pre> <p>Method checks if there are new notifications to send the user, these notifications are updated from stakeholder.tasks.</p> Source code in <code>django_project/frontend/views/base_view.py</code> <pre><code>def get_user_notifications(request):\n    \"\"\"Method checks if there are new notifications\n    to send the user, these notifications are\n    updated from stakeholder.tasks.\"\"\"\n    current_date = datetime.now().date()\n    reminders = Reminders.objects.filter(\n        user=request.user.id,  # Use the user ID instead of the object\n        status=Reminders.PASSED,\n        email_sent=True,\n        date__date=current_date\n    )\n    notifications = []\n    try:\n        user_profile = UserProfile.objects.get(user=request.user)\n        if not user_profile.received_notif:\n            for reminder in reminders:\n                messages.success(\n                    request,\n                    reminder.title,\n                    extra_tags='notification'\n                )\n                notifications.append(reminder.title)\n        if len(notifications) &gt; 0:\n            user_profile.received_notif = True\n            user_profile.save()\n        return JsonResponse(\n            {\n                'status': 'success',\n                'user_notifications': notifications\n            }\n        )\n    except Exception:\n        return JsonResponse(\n            {\n                'status': 'error',\n                'user_notifications': []\n            }\n        )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.views.base_view.validate_user_permission","title":"validate_user_permission","text":"<pre><code>validate_user_permission(user, permission_name)\n</code></pre> <p>Check if user has permission to upload data.</p> Source code in <code>django_project/frontend/views/base_view.py</code> <pre><code>def validate_user_permission(user: User, permission_name: str):\n    \"\"\"Check if user has permission to upload data.\"\"\"\n    if user.is_superuser:\n        return True\n    return check_user_has_permission(user, 'Can add species population data')\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.views.contact.ContactUsView","title":"ContactUsView","text":"<p>               Bases: <code>OrganisationBaseView</code>, <code>FormView</code></p> <p>ContactView</p>"},{"location":"developer/manual/frontend/#django_project.frontend.views.help.HelpView","title":"HelpView","text":"<p>               Bases: <code>OrganisationBaseView</code></p> <p>HelpView displays the help page by rendering the 'help.html' template.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.views.home.HomeView","title":"HomeView","text":"<p>               Bases: <code>OrganisationBaseView</code></p> <p>HomeView displays the home page by rendering the 'home.html' template.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.views.map.MapView","title":"MapView","text":"<p>               Bases: <code>RegisteredOrganisationBaseView</code></p> <p>MapView displays the map page by rendering the 'map.html' template.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.views.online_form.OnlineFormView","title":"OnlineFormView","text":"<p>               Bases: <code>RegisteredOrganisationBaseView</code></p> <p>OnlineFormView displays the page to upload species data.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.views.switch_organisation.switch_organisation","title":"switch_organisation","text":"<pre><code>switch_organisation(request, organisation_id)\n</code></pre> <p>Switch organisation.</p> Source code in <code>django_project/frontend/views/switch_organisation.py</code> <pre><code>@login_required\ndef switch_organisation(request, organisation_id):\n    \"\"\"Switch organisation.\"\"\"\n    organisation = get_object_or_404(\n        Organisation,\n        id=organisation_id\n    )\n\n    # Validate if the user can switch organisations\n    # only if the user is not a superadmin\n    if not request.user.is_superuser:\n        organisation_user = OrganisationUser.objects.filter(\n            user=request.user,\n            organisation__id=organisation_id\n        )\n        if not organisation_user.exists():\n            return HttpResponseForbidden()\n\n    # Update the current organisation in the user's profile\n    user_profile = request.user.user_profile\n    user_profile.current_organisation = organisation\n    user_profile.save()\n\n    # Redirect to the specified 'next' URL\n    next_url = request.GET.get('next', '/')\n    return HttpResponseRedirect(next_url)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.views.users.OrganisationUsersView","title":"OrganisationUsersView","text":"<p>               Bases: <code>RegisteredOrganisationBaseView</code>, <code>TemplateView</code></p> <p>OrganisationUsersView displays the organisations users page by rendering the 'users.html' template.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.views.users.OrganisationUsersView.is_new_invitation","title":"is_new_invitation","text":"<pre><code>is_new_invitation(email, organisation)\n</code></pre> <p>Check if an entry with the given email and organisation already exists. Returns True if exists, False otherwise.</p> Source code in <code>django_project/frontend/views/users.py</code> <pre><code>def is_new_invitation(self, email, organisation):\n    \"\"\"\n    Check if an entry with the given email and\n    organisation already exists.\n    Returns True if exists, False otherwise.\n    \"\"\"\n\n    invitation = OrganisationInvites.objects.filter(\n        email=email,\n        organisation_id=organisation\n    ).first()\n\n    if invitation:\n        return True\n    return False\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.views.organisations.OrganisationsView","title":"OrganisationsView","text":"<p>               Bases: <code>RegisteredOrganisationBaseView</code>, <code>TemplateView</code></p> <p>OrganisationsView displays the organisations the user can access.</p>"},{"location":"developer/manual/frontend/#serializers","title":"Serializers","text":"<p>Serializer for BoundaryFile model.</p> <p>Base serializer for common classes.</p> <p>Serializers for ContextLayer.</p> <p>Serializers for Parcel.</p> <p>Serializer for place classes.</p> <p>Serializer for population classess.</p> <p>Serializer for property classes.</p> <p>Serializer for stakeholder classes.</p> <p>Serializer for user info classes.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.boundary_file.BoundaryFileSerializer","title":"BoundaryFileSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>Serializer for BoundaryFile.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.common.NameObjectBaseSerializer","title":"NameObjectBaseSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>Base Serializer for object with id and name.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.context_layer.ContextLayerLegendSerializer","title":"ContextLayerLegendSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>Legend serializer.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.context_layer.ContextLayerSerializer","title":"ContextLayerSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>ContextLayer serializer.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.context_layer.ContextLayerSerializer.Meta","title":"Meta","text":"<p>Meta class for serializer.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.metrics.ActivityMatrixSerializer","title":"ActivityMatrixSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>Serializer class for serializing activity percentage data for species.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.metrics.ActivityMatrixSerializer.get_activities","title":"get_activities","text":"<pre><code>get_activities(obj)\n</code></pre> <p>Calculate activity percentage data for species. Params: obj (Taxon): The Taxon instance.</p> Source code in <code>django_project/frontend/serializers/metrics.py</code> <pre><code>def get_activities(self, obj) -&gt; List[dict]:\n    \"\"\"Calculate activity percentage data for species.\n    Params: obj (Taxon): The Taxon instance.\n    \"\"\"\n    property = self.context['request'].GET.get('property')\n    property_list = property.split(',') if property else []\n    populations = AnnualPopulation.objects.values(\n        \"taxon__common_name_verbatim\"\n    ).filter(taxon=obj)\n\n    if property_list:\n        populations = populations.filter(\n            property__id__in=property_list\n        )\n\n    populations = populations.annotate(\n        total=Sum(\"annualpopulationperactivity__total\")\n    ).values(\"annualpopulationperactivity__activity_type__name\", \"total\")\n\n    total_count = self.get_total(obj)\n    activities_list = []\n\n    for item in populations:\n        activity_type = item[\n            \"annualpopulationperactivity__activity_type__name\"\n        ]\n        total = item[\"total\"]\n\n        if activity_type and total:\n            percentage = (\n                total / total_count\n            ) * 100 if total_count else None\n            activity_data = {\n                activity_type: percentage,\n                \"activity_total\": total\n            }\n            activities_list.append(activity_data)\n\n    return activities_list\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.metrics.ActivityMatrixSerializer.get_species_name","title":"get_species_name","text":"<pre><code>get_species_name(obj)\n</code></pre> <p>Get the species name. Params: obj (Taxon): The Taxon instance.</p> Source code in <code>django_project/frontend/serializers/metrics.py</code> <pre><code>def get_species_name(self, obj) -&gt; str:\n    \"\"\"Get the species name.\n    Params: obj (Taxon): The Taxon instance.\n    \"\"\"\n    return obj.common_name_verbatim\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.metrics.ActivityMatrixSerializer.get_total","title":"get_total","text":"<pre><code>get_total(obj)\n</code></pre> <p>Get the total count of species. Params: obj (Taxon): The Taxon instance.</p> Source code in <code>django_project/frontend/serializers/metrics.py</code> <pre><code>def get_total(self, obj) -&gt; int:\n    \"\"\"Get the total count of species.\n    Params: obj (Taxon): The Taxon instance.\n    \"\"\"\n    property = self.context['request'].GET.get('property')\n    property_list = property.split(',') if property else []\n    populations = AnnualPopulation.objects.values(\n        \"taxon__common_name_verbatim\").filter(taxon=obj)\n    if property_list:\n        populations = populations.filter(\n            property__id__in=property_list,\n        )\n    populations = populations.annotate(\n        total=Sum(\"total\")\n    )\n    if populations.exists():\n        return populations[0].get(\"total\")\n    else:\n        return None\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.metrics.AnnualPopulationSerializer","title":"AnnualPopulationSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>Serializer class for serializing AnnualPopulation.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.metrics.PopulationPerAgeGroupSerialiser","title":"PopulationPerAgeGroupSerialiser","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>Serializer class for serializing population per age group.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.metrics.PopulationPerAgeGroupSerialiser.get_age_group","title":"get_age_group","text":"<pre><code>get_age_group(obj)\n</code></pre> <p>Calculate population per age group. Params: obj (Taxon): The Taxon instance.</p> Source code in <code>django_project/frontend/serializers/metrics.py</code> <pre><code>def get_age_group(self, obj) -&gt; dict:\n    \"\"\" Calculate population per age group.\n    Params: obj (Taxon): The Taxon instance.\n    \"\"\"\n    sum_fields = [\n        \"adult_male\",\n        \"adult_female\",\n        \"sub_adult_male\",\n        \"sub_adult_female\",\n        \"juvenile_male\",\n        \"juvenile_female\",\n        \"year\",\n        \"total\"\n    ]\n\n    filters = {\n        \"taxon\": obj\n    }\n\n    property_list = self.context['request'].GET.get(\"property\")\n    if property_list:\n        property_ids = property_list.split(\",\")\n        filters[\"property__id__in\"] = property_ids\n\n    start_year = self.context['request'].GET.get(\"start_year\")\n    if start_year:\n        end_year = self.context['request'].GET.get(\"end_year\")\n        filters[\"year__range\"] = (start_year, end_year)\n\n    age_groups_totals = (\n        AnnualPopulation.objects\n        .values(\"taxon__common_name_verbatim\")\n        .filter(**filters)\n        .annotate(\n            **{\n                f\"total_{field}\": (\n                    Sum(field) if field != 'year' else F('year')\n                )\n                for field in sum_fields\n            }\n        )\n    )\n\n    fields = set(sum_fields).difference({'year', 'total'})\n    total_unspecified = F('total_total') - sum(\n        [F(f'total_{field}') for field in fields]\n    )\n    age_groups_totals = age_groups_totals.annotate(\n        total_unspecified=\n        total_unspecified if\n        total_unspecified else F('total_total')\n    )\n    for age_group in age_groups_totals:\n        if age_group['total_unspecified'] is None:\n            age_group['total_unspecified'] = age_group['total_total']\n\n    return age_groups_totals\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.metrics.SpeciesPopuationCountPerYearSerializer","title":"SpeciesPopuationCountPerYearSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>Serializer class for serializing population count per year for a species.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.metrics.SpeciesPopuationCountPerYearSerializer.get_annualpopulation_count","title":"get_annualpopulation_count","text":"<pre><code>get_annualpopulation_count(obj)\n</code></pre> <p>Get the population count per year for the species. Params:     obj (Taxon): The Taxon instance representing the species.</p> Source code in <code>django_project/frontend/serializers/metrics.py</code> <pre><code>def get_annualpopulation_count(self, obj: Taxon) -&gt; List[dict]:\n    \"\"\"Get the population count per year for the species.\n    Params:\n        obj (Taxon): The Taxon instance representing the species.\n    \"\"\"\n    property = self.context['request'].GET.get('property')\n    annual_populations = (\n        AnnualPopulation.objects.filter(\n            Q(\n                property__id__in=property.split(\",\")\n            ) if property else Q(),\n            taxon=obj\n        )\n        .values(\"year\")\n        .annotate(year_total=Sum(\"total\"))\n        .values(\"year\", \"year_total\")\n        .order_by(\"-year\")[:10]\n    )\n    return list(annual_populations)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.metrics.SpeciesPopuationCountPerYearSerializer.get_species_colour","title":"get_species_colour","text":"<pre><code>get_species_colour(obj)\n</code></pre> <p>Get the color of the species. Params:     obj (Taxon): The Taxon instance representing the species.</p> Source code in <code>django_project/frontend/serializers/metrics.py</code> <pre><code>def get_species_colour(self, obj: Taxon) -&gt; str:\n    \"\"\"Get the color of the species.\n    Params:\n        obj (Taxon): The Taxon instance representing the species.\n    \"\"\"\n    return obj.colour\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.metrics.SpeciesPopuationCountPerYearSerializer.get_species_name","title":"get_species_name","text":"<pre><code>get_species_name(obj)\n</code></pre> <p>Get the common name of the species. Params:     obj (Taxon): The Taxon instance representing the species.</p> Source code in <code>django_project/frontend/serializers/metrics.py</code> <pre><code>def get_species_name(self, obj: Taxon) -&gt; str:\n    \"\"\"Get the common name of the species.\n    Params:\n        obj (Taxon): The Taxon instance representing the species.\n    \"\"\"\n    return obj.common_name_verbatim\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.metrics.SpeciesPopulationDensityPerPropertySerializer","title":"SpeciesPopulationDensityPerPropertySerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>Serializer class for serializing species population total and density.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.metrics.TotalCountPerActivitySerializer","title":"TotalCountPerActivitySerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>Serializer class for serializing the total count per activity data.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.metrics.TotalCountPerActivitySerializer.get_activities","title":"get_activities","text":"<pre><code>get_activities(obj)\n</code></pre> <p>Calculate total count per activity for species. Params: obj (Taxon): The Taxon instance.</p> Source code in <code>django_project/frontend/serializers/metrics.py</code> <pre><code>def get_activities(self, obj) -&gt; List[dict]:\n    \"\"\"Calculate total count per activity for species.\n    Params: obj (Taxon): The Taxon instance.\n    \"\"\"\n    property_param = self.context['request'].GET.get('property')\n    property_list = property_param.split(',') if property_param else []\n    start_year = self.context['request'].GET.get(\"start_year\", 0)\n    end_year = self.context['request'].GET.get(\n        \"end_year\", datetime.datetime.now().year\n    )\n    year_range = (int(start_year), int(end_year))\n    activity_filter = self.context['request'].GET.get('activity', \"\")\n    spatial_filter = self.context['request'].GET.get(\n        'spatial_filter_values', \"\").split(',')\n    spatial_filter = list(\n        filter(None, spatial_filter)\n    )\n\n    q_filters = Q(annual_population__taxon=obj, year__range=year_range)\n    if property_list:\n        q_filters &amp;= Q(annual_population__property_id__in=property_list)\n    if activity_filter:\n        q_filters &amp;= Q(activity_type_id__in=[\n            int(act) for act in activity_filter.split(',')\n        ])\n    if spatial_filter:\n        spatial_qs = SpatialDataValueModel.objects.filter(\n            spatial_data__property=OuterRef('annual_population__property'),\n            context_layer_value__in=spatial_filter\n        )\n        q_filters &amp;= Q(Exists(spatial_qs))\n\n    populations = AnnualPopulationPerActivity.objects.filter(\n        q_filters\n    ).values(\n        'year',\n        'activity_type__name'\n    ).annotate(\n        activity_total=Sum('total')\n    ).order_by()\n\n    activities_list = [\n        {\n            \"activity_type\": item[\"activity_type__name\"],\n            \"year\": item[\"year\"],\n            \"total\": item[\"activity_total\"],\n        }\n        for item in populations\n        if item[\"activity_type__name\"] and item[\"activity_total\"]\n    ]\n    return activities_list\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.metrics.TotalCountPerActivitySerializer.get_species_name","title":"get_species_name","text":"<pre><code>get_species_name(obj)\n</code></pre> <p>Get the species name. Params: obj (Taxon): The Taxon instance.</p> Source code in <code>django_project/frontend/serializers/metrics.py</code> <pre><code>def get_species_name(self, obj) -&gt; str:\n    \"\"\"Get the species name.\n    Params: obj (Taxon): The Taxon instance.\n    \"\"\"\n    return obj.common_name_verbatim\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.metrics.TotalCountPerActivitySerializer.get_total","title":"get_total","text":"<pre><code>get_total(obj)\n</code></pre> <p>Get the total count of species. Params: obj (Taxon): The Taxon instance.</p> Source code in <code>django_project/frontend/serializers/metrics.py</code> <pre><code>def get_total(self, obj) -&gt; int:\n    \"\"\"Get the total count of species.\n    Params: obj (Taxon): The Taxon instance.\n    \"\"\"\n    property = self.context['request'].GET.get('property')\n    property_list = property.split(',') if property else []\n    start_year = self.context['request'].GET.get(\"start_year\", 0)\n    end_year = self.context['request'].GET.get(\n        \"end_year\", datetime.datetime.now().year\n    )\n    year_range = (int(start_year), int(end_year))\n    activity_filter = self.context['request'].GET.get('activity', \"\")\n    spatial_filter = self.context['request'].GET.get(\n        'spatial_filter_values', \"\").split(',')\n    spatial_filter = list(\n        filter(None, spatial_filter)\n    )\n    populations = AnnualPopulation.objects.values(\n        \"taxon__common_name_verbatim\").filter(\n        taxon=obj,\n        year__range=year_range\n    )\n    if property_list:\n        populations = populations.filter(\n            property__id__in=property_list,\n        )\n\n    if activity_filter:\n        activity_qs = AnnualPopulationPerActivity.objects.filter(\n            annual_population=OuterRef('pk'),\n            activity_type_id__in=[\n                int(act) for act in activity_filter.split(',')\n            ]\n        )\n        populations = populations.filter(Exists(activity_qs))\n    if spatial_filter:\n        spatial_qs = SpatialDataValueModel.objects.filter(\n            spatial_data__property=OuterRef('property'),\n            context_layer_value__in=spatial_filter\n        )\n        populations = populations.filter(Exists(spatial_qs))\n\n    populations = populations.annotate(\n        total_population=Sum(\"total\")\n    )\n    if populations.exists():\n        return populations[0].get(\"total_population\")\n    else:\n        return None\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.metrics.TotalCountPerPopulationEstimateSerializer","title":"TotalCountPerPopulationEstimateSerializer","text":"<p>               Bases: <code>Serializer</code></p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.metrics.TotalCountPerPopulationEstimateSerializer.get_total_counts_per_population_estimate","title":"get_total_counts_per_population_estimate","text":"<pre><code>get_total_counts_per_population_estimate()\n</code></pre> <p>Retrieves and calculates the total counts per population estimate category.</p> <p>This function filters AnnualPopulation records based on the provided parameters (species_name, property_ids). It then iterates through the filtered records and calculates the total counts per population estimate category, along with the most recent year and total sums associated with each category.</p> <p>Returns: - result (dict): A dictionary containing total counts per population estimate category.     Each category includes count, years, total, and percentage.</p> Source code in <code>django_project/frontend/serializers/metrics.py</code> <pre><code>def get_total_counts_per_population_estimate(self):\n    \"\"\"\n    Retrieves and calculates the total counts per\n    population estimate category.\n\n    This function filters AnnualPopulation records\n    based on the provided parameters\n    (species_name, property_ids).\n    It then iterates through the filtered records and calculates\n    the total counts per population estimate category,\n    along with the most recent year and total sums associated\n    with each category.\n\n    Returns:\n    - result (dict): A dictionary containing total counts per\n    population estimate category.\n        Each category includes count, years, total, and percentage.\n    \"\"\"\n\n    # Extract filter parameters from the request context\n    species_name = self.context[\"request\"].GET.get(\"species\")\n    property_list = self.context['request'].GET.get('property')\n    property_ids = property_list.split(',') if property_list else []\n    activity_filter = self.context['request'].GET.get('activity', \"\")\n    spatial_filter_values = self.context['request'].GET.get(\n        'spatial_filter_values', \"\").split(',')\n    spatial_filter_values = list(\n        filter(None, spatial_filter_values)\n    )\n\n    # Initialize a dictionary to store the results\n    result = {}\n\n    start_year = self.context[\"request\"].GET.get('start_year')\n    end_year = self.context[\"request\"].GET.get('end_year')\n    try:\n        start_year = int(start_year)\n        end_year = int(end_year)\n        max_year = max(start_year, end_year)\n    except (ValueError, TypeError):\n        max_year = None  # if the input is not valid integers\n\n    # Query AnnualPopulation model to filter records\n    # for the most recent year\n    annual_populations = (\n        AnnualPopulation.objects.filter(\n            Q(\n                property__id__in=property_ids\n            ) if property_ids else Q(),\n            Q(\n                Q(\n                    taxon__common_name_verbatim=(\n                        species_name\n                    )\n                ) |\n                Q(taxon__scientific_name=species_name)\n            ) if species_name else Q(),\n            year=max_year,\n        )\n    )\n    if activity_filter:\n        activity_qs = AnnualPopulationPerActivity.objects.filter(\n            annual_population=OuterRef('pk'),\n            activity_type_id__in=[\n                int(act) for act in activity_filter.split(',')\n            ]\n        )\n        annual_populations = annual_populations.filter(\n            Exists(activity_qs))\n    if spatial_filter_values:\n        spatial_qs = SpatialDataValueModel.objects.filter(\n            spatial_data__property=OuterRef('property'),\n            context_layer_value__in=spatial_filter_values\n        )\n        annual_populations = annual_populations.filter(\n            Exists(spatial_qs))\n\n    # Iterate through filtered records\n    for record in annual_populations:\n        population_estimate_category = (\n            record.population_estimate_category.name\n            if record.population_estimate_category else ''\n        )\n        year = record.year\n        total = record.total\n\n        # Calculate percentage against the total\n        percentage = (total / total) * 100 if total &gt; 0 else 0\n\n        # Create or update the result dictionary\n        if population_estimate_category not in result:\n            result[population_estimate_category] = {\n                \"count\": 1,\n                \"years\": [year],\n                \"total\": total,\n                \"percentage\": percentage * 100\n            }\n        elif year in result[population_estimate_category][\"years\"]:\n            result[population_estimate_category][\"count\"] += 1\n            result[population_estimate_category][\"total\"] += total\n        else:\n            result[population_estimate_category][\"years\"].append(year)\n            result[population_estimate_category][\"count\"] += 1\n            result[population_estimate_category][\"total\"] += total\n\n    # Initialize a dictionary to store the final results\n    final_result = {}\n\n    # Iterate over the result again to calculate the percentages\n    for category, data in result.items():\n        count = data[\"count\"]\n        total = data[\"total\"]\n\n        # Calculate percentage as count divided by total * 100\n        percentage = (count / total) * 100 if total &gt; 0 else 0\n\n        # Create the final result entry\n        final_result[category] = {\n            \"count\": count,\n            \"years\": data[\"years\"],\n            \"total\": total,\n            \"percentage\": int(percentage * 100) / 100,\n        }\n\n    return final_result\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.national_statistics.SpeciesListSerializer","title":"SpeciesListSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>Serializer class for serializing species.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.national_statistics.SpeciesListSerializer.get_annualpopulation_count","title":"get_annualpopulation_count","text":"<pre><code>get_annualpopulation_count(obj)\n</code></pre> <p>Get the population count per year for the species. Params:     obj (Taxon): The Taxon instance representing the species.</p> Source code in <code>django_project/frontend/serializers/national_statistics.py</code> <pre><code>def get_annualpopulation_count(self, obj: Taxon) -&gt; List[dict]:\n    \"\"\"Get the population count per year for the species.\n    Params:\n        obj (Taxon): The Taxon instance representing the species.\n    \"\"\"\n\n    current_year = datetime.now().year\n    start_year = current_year - 10  # should start from 10 years before\n    end_year = current_year\n    annual_populations = (\n        AnnualPopulation.objects.filter(\n            Q(\n                year__range=(start_year, end_year)\n            ) if start_year and end_year else Q(),\n            taxon=obj\n        )\n        .values(\"year\")\n        .annotate(year_total=Sum(\"total\"))\n        .values(\n            \"year\",\n            \"year_total\",\n            \"sub_adult_male\",\n            \"sub_adult_female\",\n            \"adult_male\",\n            \"adult_female\",\n            \"juvenile_male\",\n            \"juvenile_female\"\n        )\n        .order_by(\"-year\")[:10]\n    )\n    return list(annual_populations)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.national_statistics.SpeciesListSerializer.get_species_colour","title":"get_species_colour","text":"<pre><code>get_species_colour(obj)\n</code></pre> <p>Get the color of the species. Params:     obj (Taxon): The Taxon instance representing the species.</p> Source code in <code>django_project/frontend/serializers/national_statistics.py</code> <pre><code>def get_species_colour(self, obj: Taxon) -&gt; str:\n    \"\"\"Get the color of the species.\n    Params:\n        obj (Taxon): The Taxon instance representing the species.\n    \"\"\"\n    return obj.colour\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.national_statistics.SpeciesListSerializer.get_species_icon","title":"get_species_icon","text":"<pre><code>get_species_icon(obj)\n</code></pre> <p>Get the icon of the species. Params:     obj (Taxon): The Taxon instance representing the species.</p> Source code in <code>django_project/frontend/serializers/national_statistics.py</code> <pre><code>def get_species_icon(self, obj: Taxon) -&gt; str:\n    \"\"\"Get the icon of the species.\n    Params:\n        obj (Taxon): The Taxon instance representing the species.\n    \"\"\"\n    return obj.icon.url\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.national_statistics.SpeciesListSerializer.get_species_name","title":"get_species_name","text":"<pre><code>get_species_name(obj)\n</code></pre> <p>Get the common name of the species. Params:     obj (Taxon): The Taxon instance representing the species.</p> Source code in <code>django_project/frontend/serializers/national_statistics.py</code> <pre><code>def get_species_name(self, obj: Taxon) -&gt; str:\n    \"\"\"Get the common name of the species.\n    Params:\n        obj (Taxon): The Taxon instance representing the species.\n    \"\"\"\n    return obj.common_name_verbatim\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.parcel.ErfParcelSerializer","title":"ErfParcelSerializer","text":"<p>               Bases: <code>ParcelBaseSerializer</code></p> <p>Serializer for Erf.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.parcel.FarmPortionParcelSerializer","title":"FarmPortionParcelSerializer","text":"<p>               Bases: <code>ParcelBaseSerializer</code></p> <p>Serializer for FarmPortion.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.parcel.HoldingParcelSerializer","title":"HoldingParcelSerializer","text":"<p>               Bases: <code>ParcelBaseSerializer</code></p> <p>Serializer for Holding.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.parcel.ParcelBaseSerializer","title":"ParcelBaseSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>Parcel Base Serializer.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.parcel.ParentFarmParcelSerializer","title":"ParentFarmParcelSerializer","text":"<p>               Bases: <code>ParcelBaseSerializer</code></p> <p>Serializer for ParentFarm.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.places.PlaceBaseSearchSerializer","title":"PlaceBaseSearchSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>Return id, name, bbox of place.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.population.ActivityFormSerializer","title":"ActivityFormSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>AnnualPopulationPerActivity serializer.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.population.AnnualPopulationFormSerializer","title":"AnnualPopulationFormSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>Annual Population data serializer.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.property.ParcelSerializer","title":"ParcelSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>Parcel Serializer.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.property.PropertyDetailSerializer","title":"PropertyDetailSerializer","text":"<p>               Bases: <code>PropertySerializer</code></p> <p>Property with more details.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.property.PropertySearchSerializer","title":"PropertySearchSerializer","text":"<p>               Bases: <code>PropertyDetailSerializer</code></p> <p>Return id, name, bbox of property.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.property.PropertySerializer","title":"PropertySerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>Property Serializer.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.property.PropertyTypeColourSerializer","title":"PropertyTypeColourSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>Property Type Serializer with Colour.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.property.PropertyTypeSerializer","title":"PropertyTypeSerializer","text":"<p>               Bases: <code>NameObjectBaseSerializer</code></p> <p>Property Type Serializer.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.property.ProvinceSerializer","title":"ProvinceSerializer","text":"<p>               Bases: <code>NameObjectBaseSerializer</code></p> <p>Province Serializer.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.report.ActivityReportSerializer","title":"ActivityReportSerializer","text":"<pre><code>ActivityReportSerializer(*args, **kwargs)\n</code></pre> <p>               Bases: <code>ModelSerializer</code>, <code>BaseReportSerializer</code></p> <p>Serializer for Activity Report. The serializer uses dynamic column based on the selected activity.</p> Source code in <code>django_project/frontend/serializers/report.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    activity = kwargs.pop('activity', None)\n    if not activity:\n        raise ValueError(\"'activity' argument is required!\")\n    super().__init__(*args, **kwargs)\n\n    base_fields = [\n        \"property_name\",\n        \"property_short_code\",\n        \"organisation_name\",\n        \"organisation_short_code\",\n        \"scientific_name\", \"common_name\",\n        \"year\", \"total\", \"adult_male\", \"adult_female\",\n        \"juvenile_male\", \"juvenile_female\"\n    ]\n    valid_fields = base_fields + activity.export_fields\n    allowed = set(valid_fields)\n    existing = set(self.fields.keys())\n    for field_name in existing - allowed:\n        self.fields.pop(field_name)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.report.BaseReportSerializer","title":"BaseReportSerializer","text":"<p>               Bases: <code>Serializer</code></p> <p>Base Serializer for Report.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.report.BaseSpeciesReportSerializer","title":"BaseSpeciesReportSerializer","text":"<p>               Bases: <code>ModelSerializer</code>, <code>BaseReportSerializer</code></p> <p>Serializer for Species Report (for exporting to csv/excel).</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.report.PropertyReportSerializer","title":"PropertyReportSerializer","text":"<p>               Bases: <code>ModelSerializer</code>, <code>BaseReportSerializer</code></p> <p>Serializer for Property Report.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.report.SamplingReportSerializer","title":"SamplingReportSerializer","text":"<p>               Bases: <code>ModelSerializer</code>, <code>BaseReportSerializer</code></p> <p>Serializer for Sampling Report.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.report.SpeciesReportSerializer","title":"SpeciesReportSerializer","text":"<p>               Bases: <code>BaseSpeciesReportSerializer</code></p> <p>Serializer for Species Report.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.stakeholder.OrganisationMemberSerializer","title":"OrganisationMemberSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>Organisation member serializer.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.stakeholder.OrganisationSerializer","title":"OrganisationSerializer","text":"<p>               Bases: <code>NameObjectBaseSerializer</code></p> <p>Organisation Serializer.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.serializers.stakeholder.OrganisationUsersSerializer","title":"OrganisationUsersSerializer","text":"<p>               Bases: <code>NameObjectBaseSerializer</code></p> <p>OrganisationUsersSerializer</p>"},{"location":"developer/manual/frontend/#tasks","title":"Tasks","text":"<p>Task to generate statistical model for a species.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tasks.generate_statistical_model.add_json_area_available_growth","title":"add_json_area_available_growth","text":"<pre><code>add_json_area_available_growth(model_output, json_data)\n</code></pre> <p>Generate area available vs total area data.</p> Source code in <code>django_project/frontend/tasks/generate_statistical_model.py</code> <pre><code>def add_json_area_available_growth(\n        model_output: SpeciesModelOutput, json_data):\n    \"\"\"Generate area available vs total area data.\"\"\"\n    current_year = 0\n    property_dict = {}\n    sum = 0\n    sum_area = 0\n    results = []\n    current_dict = {}\n    line_count = 0\n    with model_output.input_file.open('rb') as csv_file:\n        file = csv_file.read().decode(\n            'utf-8', errors='ignore').splitlines()\n        csv_reader = csv.reader(file)\n        for row in csv_reader:\n            if line_count == 0:\n                line_count += 1\n                continue\n            line_count += 1\n            row_year = int(row[3])\n            row_property = row[1]\n            row_area_available = float(row[10])\n            row_area_total = float(row[9])\n            if current_year == 0:\n                current_year = row_year\n            elif current_year != row_year:\n                diff_value, sum_new_area, updated_dict = (\n                    calculate_area_diff(property_dict, current_dict)\n                )\n                sum += diff_value\n                sum_area += sum_new_area\n                results.append({\n                    'year': current_year,\n                    'area_available': sum,\n                    'area_total': sum_area\n                })\n                property_dict = updated_dict\n                current_dict = {}\n                current_year = row_year\n            current_dict[row_property] = {\n                'area_available': row_area_available,\n                'area_total': row_area_total\n            }\n    if current_dict:\n        diff_value, sum_new_area, updated_dict = (\n            calculate_area_diff(property_dict, current_dict)\n        )\n        sum += diff_value\n        sum_area += sum_new_area\n        results.append({\n            'year': current_year,\n            'area_available': sum,\n            'area_total': sum_area\n        })\n    json_data[CUSTOM_AREA_AVAILABLE_GROWTH] = results\n    return json_data\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tasks.generate_statistical_model.add_json_metadata","title":"add_json_metadata","text":"<pre><code>add_json_metadata(json_data)\n</code></pre> <p>Generate metadata for category values sorted by OutputTypeCategoryIndex.</p> Source code in <code>django_project/frontend/tasks/generate_statistical_model.py</code> <pre><code>def add_json_metadata(json_data):\n    \"\"\"\n    Generate metadata for category values sorted\n    by OutputTypeCategoryIndex.\n    \"\"\"\n    metadata = json_data.get('metadata', {})\n    # growth output types should have categories in field_name:\n    # period and pop_change_cat\n    growth_output_types = [\n        NATIONAL_GROWTH, PROVINCIAL_GROWTH, NATIONAL_GROWTH_CAT\n    ]\n    for growth_type in growth_output_types:\n        if growth_type not in json_data:\n            continue\n        periods = set()\n        pop_change_cats = set()\n        period_cat_index = (\n            OutputTypeCategoryIndex.objects.find_category_index(\n                growth_type, 'period'\n            )\n        )\n        pop_change_cat_index = (\n            OutputTypeCategoryIndex.objects.find_category_index(\n                growth_type, 'pop_change_cat'\n            )\n        )\n        data = json_data[growth_type]\n        for item in data:\n            period_str = item.get('period', '')\n            pop_change_cat_str = item.get('pop_change_cat', '')\n            if period_str:\n                periods.add(period_str.lower())\n            if pop_change_cat_str:\n                pop_change_cats.add(pop_change_cat_str.lower())\n        metadata[growth_type] = {\n            'period': sort_output_type_categories(periods, period_cat_index),\n            'pop_change_cat': sort_output_type_categories(\n                pop_change_cats, pop_change_cat_index),\n        }\n    json_data['metadata'] = metadata\n    return json_data\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tasks.generate_statistical_model.calculate_area_diff","title":"calculate_area_diff","text":"<pre><code>calculate_area_diff(property_dict, current_dict)\n</code></pre> <p>Compare property dict with the current year property dict.</p> Source code in <code>django_project/frontend/tasks/generate_statistical_model.py</code> <pre><code>def calculate_area_diff(property_dict, current_dict):\n    \"\"\"Compare property dict with the current year property dict.\"\"\"\n    diff_value = 0\n    sum_new_area = 0\n    for property, values in current_dict.items():\n        if property in property_dict:\n            diff_value += (\n                values['area_available'] -\n                property_dict[property]['area_available']\n            )\n        else:\n            diff_value += values['area_available']\n            sum_new_area += values['area_total']\n        property_dict[property] = values\n    return diff_value, sum_new_area, property_dict\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tasks.generate_statistical_model.check_affected_model_output","title":"check_affected_model_output","text":"<pre><code>check_affected_model_output(model_id, is_created)\n</code></pre> <p>Triggered when model is created/updated.</p> Source code in <code>django_project/frontend/tasks/generate_statistical_model.py</code> <pre><code>@shared_task(name=\"check_affected_model_output\")\ndef check_affected_model_output(model_id, is_created):\n    \"\"\"\n    Triggered when model is created/updated.\n    \"\"\"\n    from frontend.tasks.start_plumber import (\n        start_plumber_process\n    )\n    if is_created:\n        time.sleep(2)\n    model = StatisticalModel.objects.get(id=model_id)\n    model_outputs = SpeciesModelOutput.objects.filter(\n        model=model\n    )\n    if model_outputs.exists():\n        mark_model_output_as_outdated_by_model(model)\n    else:\n        # create model output with outdated = True\n        if model.taxon:\n            # non generic model\n            init_species_model_output_from_non_generic_model(model)\n        else:\n            # generic model - create new\n            init_species_model_output_from_generic_model(model)\n    # restart plumber to load new R codes\n    start_plumber_process.apply_async(queue='plumber')\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tasks.generate_statistical_model.check_oudated_model_output","title":"check_oudated_model_output","text":"<pre><code>check_oudated_model_output()\n</code></pre> <p>Check for outdated model output and trigger a job to generate.</p> <p>CSV Data Upload Flow: CSV Upload -&gt; List of species -&gt; mark latest model output as outdated</p> <p>Online Form Flow: Input data for a species -&gt; mark latest model output as outdated</p> <p>R Code Update: StatisticalModel Update -&gt; mark latest model output as outdated -&gt; restart plumber -&gt; Plumber ready -&gt; trigger check_oudated_model_output manually</p> <p>R Code Create: StatisticalModel Create -&gt; create model output with outdated=True -&gt; restart plumber -&gt; Plumber ready -&gt; trigger check_oudated_model_output manually</p> <p>This check_outdated_model_output will check every model output that needs to be refreshed.</p> Source code in <code>django_project/frontend/tasks/generate_statistical_model.py</code> <pre><code>@shared_task(name=\"check_oudated_model_output\", ignore_result=True)\ndef check_oudated_model_output():\n    \"\"\"\n    Check for outdated model output and trigger a job to generate.\n\n    CSV Data Upload Flow:\n    CSV Upload -&gt; List of species -&gt; mark latest model output as outdated\n\n    Online Form Flow:\n    Input data for a species -&gt; mark latest model output as outdated\n\n    R Code Update:\n    StatisticalModel Update -&gt; mark latest model output as outdated\n    -&gt; restart plumber -&gt; Plumber ready\n    -&gt; trigger check_oudated_model_output manually\n\n    R Code Create:\n    StatisticalModel Create -&gt; create model output with outdated=True\n    -&gt; restart plumber -&gt; Plumber ready\n    -&gt; trigger check_oudated_model_output manually\n\n    This check_outdated_model_output will check every model output\n    that needs to be refreshed.\n    \"\"\"\n    outputs = SpeciesModelOutput.objects.filter(\n        is_outdated=True,\n        is_latest=True\n    )\n    for model_output in outputs:\n        if model_output.output_file:\n            # create a new model output\n            model_output.is_outdated = False\n            model_output.outdated_since = None\n            model_output.save(update_fields=['is_outdated', 'outdated_since'])\n            new_model_output = SpeciesModelOutput.objects.create(\n                model=model_output.model,\n                taxon=model_output.taxon,\n                is_latest=False,\n                is_outdated=True,\n                outdated_since=timezone.now()\n            )\n            trigger_generate_species_model_output(new_model_output)\n        else:\n            # this is from initialization\n            trigger_generate_species_model_output(model_output)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tasks.generate_statistical_model.clean_old_model_output","title":"clean_old_model_output","text":"<pre><code>clean_old_model_output()\n</code></pre> <p>Remove old model output that has more recent model.</p> Source code in <code>django_project/frontend/tasks/generate_statistical_model.py</code> <pre><code>@shared_task(name=\"clean_old_model_output\")\ndef clean_old_model_output():\n    \"\"\"Remove old model output that has more recent model.\"\"\"\n    datetime_filter = datetime.now() - timedelta(days=30)\n    old_outputs = SpeciesModelOutput.objects.filter(\n        is_latest=False,\n        status=DONE,\n        generated_on__lte=datetime_filter\n    )\n    total_count, _ = old_outputs.delete()\n    logger.info(f'Clear old model output: {total_count} counts')\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tasks.generate_statistical_model.export_annual_population_data","title":"export_annual_population_data","text":"<pre><code>export_annual_population_data(taxon)\n</code></pre> <p>Export annual population to csv data.</p> Source code in <code>django_project/frontend/tasks/generate_statistical_model.py</code> <pre><code>def export_annual_population_data(taxon: Taxon):\n    \"\"\"Export annual population to csv data.\"\"\"\n    csv_headers = [\n        'species', 'property', 'province', 'year', 'pop_est',\n        'lower_est', 'upper_est', 'survey_method',\n        'ownership', 'property_size_ha',\n        'area_available_to_species', 'open_closed'\n    ]\n    rows = AnnualPopulation.objects.select_related(\n        'survey_method',\n        'taxon',\n        'property',\n        'property__province',\n        'property__property_type',\n        'property__open'\n    ).filter(\n        taxon=taxon\n    ).order_by('year')\n    csv_data = [\n        [\n            taxon.scientific_name,\n            row.property.name,\n            row.property.province.name,\n            row.year,\n            row.total,\n            'NA',\n            'NA',\n            row.survey_method.name if row.survey_method else 'NA',\n            row.property.property_type.name,\n            row.property.property_size_ha,\n            row.area_available_to_species,\n            row.property.open.name if row.property.open else 'NA',\n        ] for row in rows\n    ]\n    return write_plumber_data(csv_headers, csv_data)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tasks.generate_statistical_model.generate_species_statistical_model","title":"generate_species_statistical_model","text":"<pre><code>generate_species_statistical_model(request_id)\n</code></pre> <p>Generate species statistical model.</p> Source code in <code>django_project/frontend/tasks/generate_statistical_model.py</code> <pre><code>@shared_task(name=\"generate_species_statistical_model\")\ndef generate_species_statistical_model(request_id):\n    \"\"\"Generate species statistical model.\"\"\"\n    model_output = SpeciesModelOutput.objects.get(id=request_id)\n    model_output.task_on_started()\n    data_filepath = None\n    try:\n        data_filepath = export_annual_population_data(model_output.taxon)\n        save_model_data_input(model_output, data_filepath)\n        model = model_output.model\n        if model.taxon is None:\n            # this is generic model\n            model = None\n        is_success, json_data = execute_statistical_model(\n            data_filepath, model_output.taxon, model=model)\n        if is_success:\n            save_model_output_on_success(model_output, json_data)\n        else:\n            save_model_output_on_failure(model_output, errors=str(json_data))\n    except Exception as ex:\n        logger.error(traceback.format_exc())\n        save_model_output_on_failure(model_output, errors=str(ex))\n    finally:\n        if data_filepath:\n            remove_plumber_data(data_filepath)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tasks.generate_statistical_model.save_model_data_input","title":"save_model_data_input","text":"<pre><code>save_model_data_input(model_output, data_filepath)\n</code></pre> <p>Store csv data of annual population data.</p> Source code in <code>django_project/frontend/tasks/generate_statistical_model.py</code> <pre><code>def save_model_data_input(model_output: SpeciesModelOutput, data_filepath):\n    \"\"\"Store csv data of annual population data.\"\"\"\n    taxon_name = slugify(model_output.taxon.scientific_name).replace('-', '_')\n    if data_filepath and os.path.exists(data_filepath):\n        with open(data_filepath, 'rb') as input_file:\n            input_name = f'{model_output.id}_{taxon_name}.csv'\n            model_output.input_file.save(input_name, File(input_file))\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tasks.generate_statistical_model.save_model_output_on_failure","title":"save_model_output_on_failure","text":"<pre><code>save_model_output_on_failure(model_output, errors=None)\n</code></pre> <p>Store failure from execution R statistical model.</p> Source code in <code>django_project/frontend/tasks/generate_statistical_model.py</code> <pre><code>def save_model_output_on_failure(model_output: SpeciesModelOutput,\n                                 errors=None):\n    \"\"\"Store failure from execution R statistical model.\"\"\"\n    model_output.finished_at = timezone.now()\n    model_output.status = ERROR\n    model_output.errors = errors\n    model_output.is_outdated = False\n    model_output.outdated_since = None\n    model_output.save(update_fields=['finished_at', 'status',\n                                     'errors', 'is_outdated',\n                                     'outdated_since'])\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tasks.generate_statistical_model.save_model_output_on_success","title":"save_model_output_on_success","text":"<pre><code>save_model_output_on_success(model_output, json_data)\n</code></pre> <p>Store the result from successful execution of R statistical model.</p> Source code in <code>django_project/frontend/tasks/generate_statistical_model.py</code> <pre><code>def save_model_output_on_success(model_output: SpeciesModelOutput, json_data):\n    \"\"\"Store the result from successful execution of R statistical model.\"\"\"\n    model_output.finished_at = timezone.now()\n    model_output.status = DONE\n    model_output.errors = None\n    model_output.generated_on = timezone.now()\n    model_output.is_outdated = False\n    model_output.outdated_since = None\n    model_output.save()\n    taxon_name = slugify(model_output.taxon.scientific_name).replace('-', '_')\n    json_data = add_json_metadata(json_data)\n    json_data = add_json_area_available_growth(model_output, json_data)\n    output_name = f'{model_output.id}_{taxon_name}.json'\n    model_output.output_file.save(\n        output_name, ContentFile(json.dumps(json_data)))\n    # update cache: national and provincial data\n    store_species_model_output_cache(model_output, json_data)\n    # set previous model is_latest to False\n    latest_output = SpeciesModelOutput.objects.filter(\n        taxon=model_output.taxon,\n        is_latest=True\n    ).exclude(id=model_output.id)\n    for output in latest_output:\n        clear_species_model_output_cache(output)\n        output.is_latest = False\n        output.save()\n    # last update the model output with is_latest = True\n    model_output.is_latest = True\n    model_output.save(update_fields=['is_latest'])\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tasks.generate_statistical_model.sort_output_type_categories","title":"sort_output_type_categories","text":"<pre><code>sort_output_type_categories(data_set, category_index_list)\n</code></pre> <p>Sort set of categories by OutputTypeCategoryIndex list.</p> Source code in <code>django_project/frontend/tasks/generate_statistical_model.py</code> <pre><code>def sort_output_type_categories(data_set: set, category_index_list):\n    \"\"\"Sort set of categories by OutputTypeCategoryIndex list.\"\"\"\n    result = []\n    for category in category_index_list:\n        find_val = [val for val in data_set if category.val in val]\n        if find_val:\n            result.append(find_val[0])\n            data_set.remove(find_val[0])\n    if data_set:\n        for val in data_set:\n            result.insert(0, val)\n    return result\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tasks.generate_statistical_model.trigger_generate_species_model_output","title":"trigger_generate_species_model_output","text":"<pre><code>trigger_generate_species_model_output(model_output)\n</code></pre> <p>Trigger generate species model output job.</p> Source code in <code>django_project/frontend/tasks/generate_statistical_model.py</code> <pre><code>def trigger_generate_species_model_output(model_output: SpeciesModelOutput):\n    \"\"\"Trigger generate species model output job.\"\"\"\n    logger.info(f'Regenerating statistical model output for {model_output}')\n    if model_output.task_id:\n        cancel_task(model_output.task_id)\n    model_output.status = PENDING\n    model_output.is_outdated = False\n    model_output.outdated_since = None\n    model_output.save(update_fields=['status', 'is_outdated',\n                                     'outdated_since'])\n    task = generate_species_statistical_model.delay(model_output.id)\n    model_output.task_id = task.id\n    model_output.save(update_fields=['task_id'])\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tasks.generate_vector_tile.resume_ongoing_vector_tile_task","title":"resume_ongoing_vector_tile_task","text":"<pre><code>resume_ongoing_vector_tile_task()\n</code></pre> <p>Resume any ongoing vector tile task.</p> <p>This should be called at startup.</p> Source code in <code>django_project/frontend/tasks/generate_vector_tile.py</code> <pre><code>def resume_ongoing_vector_tile_task():\n    \"\"\"\n    Resume any ongoing vector tile task.\n\n    This should be called at startup.\n    \"\"\"\n    from frontend.models.context_layer import ContextLayerTilingTask\n\n    tiling_task = ContextLayerTilingTask.objects.filter(\n        status=ContextLayerTilingTask.TileStatus.PROCESSING\n    ).order_by('-id').first()\n    if tiling_task:\n        task = generate_vector_tiles_task.delay(tiling_task.id, False)\n        tiling_task.task_id = task.id\n        tiling_task.save()\n        return tiling_task.id\n    return 0\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tasks.map_session.clear_expired_map_session","title":"clear_expired_map_session","text":"<pre><code>clear_expired_map_session()\n</code></pre> <p>Clear expired map session.</p> <p>This job will be run every 2 hours.</p> Source code in <code>django_project/frontend/tasks/map_session.py</code> <pre><code>@shared_task(name=\"clear_expired_map_session\", ignore_result=True)\ndef clear_expired_map_session():\n    \"\"\"\n    Clear expired map session.\n\n    This job will be run every 2 hours.\n    \"\"\"\n    from frontend.utils.map import delete_expired_map_materialized_view\n    total = delete_expired_map_materialized_view()\n    logger.info(f'System cleared {total} expired sessions')\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tasks.patch_province.patch_province_in_properties","title":"patch_province_in_properties","text":"<pre><code>patch_province_in_properties()\n</code></pre> <p>Patch province field in properties.</p> Source code in <code>django_project/frontend/tasks/patch_province.py</code> <pre><code>@shared_task(name=\"patch_province_in_properties\")\ndef patch_province_in_properties():\n    \"\"\"Patch province field in properties.\"\"\"\n    from frontend.utils.parcel import find_province\n    from property.models import Property\n    properties = Property.objects.all().order_by('id')\n    total = properties.count()\n    total_updated = 0\n    for property in properties:\n        geometry: GEOSGeometry = property.geometry\n        geom = geometry.transform(3857, clone=True)\n        province = find_province(geom, property.province)\n        if province and province.id != property.province.id:\n            property.province = province\n            property.save(update_fields=['province'])\n            total_updated += 1\n    logger.info(f'System has patched {total_updated}/{total} properties')\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tasks.start_plumber.start_plumber_process","title":"start_plumber_process","text":"<pre><code>start_plumber_process()\n</code></pre> <p>Start plumber process when there is R code change.</p> Source code in <code>django_project/frontend/tasks/start_plumber.py</code> <pre><code>@shared_task(name=\"start_plumber_process\")\ndef start_plumber_process():\n    \"\"\"Start plumber process when there is R code change.\"\"\"\n    from frontend.tasks.generate_statistical_model import (\n        check_oudated_model_output\n    )\n    logger.info('Starting plumber process')\n    # kill existing process\n    kill_r_plumber_process()\n    # Generate plumber.R file\n    write_plumber_file()\n    # spawn the process\n    plumber_process = spawn_r_plumber()\n    if plumber_process:\n        logger.info(f'plumber process pid {plumber_process.pid}')\n        check_oudated_model_output.delay()\n    else:\n        raise RuntimeError('Cannot execute plumber process!')\n</code></pre>"},{"location":"developer/manual/frontend/#tests","title":"Tests","text":"<p>Model factories for frontend.</p> <p>Test Frontend Models.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.model_factories.BoundaryFileF","title":"BoundaryFileF","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory for BoundaryFile.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.model_factories.BoundaryFileF.Meta","title":"Meta","text":"<p>Meta class Factory for BoundaryFile Model.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.model_factories.ContextLayerF","title":"ContextLayerF","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory for ContextLayer Model.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.model_factories.ContextLayerF.Meta","title":"Meta","text":"<p>Meta class Factory for ContextLayer Model.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.model_factories.ContextLayerLegendF","title":"ContextLayerLegendF","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory for ContextLayerLegend Model.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.model_factories.ContextLayerLegendF.Meta","title":"Meta","text":"<p>Meta class Factory for ContextLayerLegend Model.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.model_factories.ErfF","title":"ErfF","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory for Erf Model.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.model_factories.ErfF.Meta","title":"Meta","text":"<p>Meta class Factory for Erf Model.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.model_factories.FarmPortionF","title":"FarmPortionF","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory for FarmPortion Model.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.model_factories.FarmPortionF.Meta","title":"Meta","text":"<p>Meta class Factory for FarmPortion Model.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.model_factories.HoldingF","title":"HoldingF","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory for Holding Model.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.model_factories.HoldingF.Meta","title":"Meta","text":"<p>Meta class Factory for Holding Model.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.model_factories.LayerF","title":"LayerF","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory for Layer Model</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.model_factories.ParentFarmF","title":"ParentFarmF","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory for ParentFarm Model.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.model_factories.ParentFarmF.Meta","title":"Meta","text":"<p>Meta class Factory for ParentFarm Model.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.model_factories.SpatialDataModelF","title":"SpatialDataModelF","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factor for SpatialData model</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.model_factories.SpatialDataModelValueF","title":"SpatialDataModelValueF","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factor for SpatialDataModelValue model</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.model_factories.SpeciesModelOutputF","title":"SpeciesModelOutputF","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory for SpeciesModelOutput Model.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.model_factories.SpeciesModelOutputF.Meta","title":"Meta","text":"<p>Meta class Factory for SpeciesModelOutput Model.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.model_factories.StatisticalModelF","title":"StatisticalModelF","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory for StatisticalModel Model.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.model_factories.StatisticalModelF.Meta","title":"Meta","text":"<p>Meta class Factory for StatisticalModel Model.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.model_factories.StatisticalModelOutputF","title":"StatisticalModelOutputF","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory for StatisticalModelOutput Model.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.model_factories.StatisticalModelOutputF.Meta","title":"Meta","text":"<p>Meta class Factory for StatisticalModelOutput Model.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.model_factories.UploadSpeciesCSVF","title":"UploadSpeciesCSVF","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory for UploadSpeciesCSV Model.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.model_factories.UploadSpeciesCSVF.Meta","title":"Meta","text":"<p>Meta class Factory for UploadSpeciesCSV Model.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.model_factories.UserF","title":"UserF","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory for User model.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.model_factories.UserF.Meta","title":"Meta","text":"<p>Meta class for UserF.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.AnnualPopulationTestCase","title":"AnnualPopulationTestCase","text":"<p>               Bases: <code>AnnualPopulationTestMixins</code>, <code>TestCase</code></p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.AnnualPopulationTestCase.test_data_table_activity_report","title":"test_data_table_activity_report","text":"<pre><code>test_data_table_activity_report()\n</code></pre> <p>Test data table activity report</p> Source code in <code>django_project/frontend/tests/test_data_table.py</code> <pre><code>def test_data_table_activity_report(self) -&gt; None:\n    \"\"\"Test data table activity report\"\"\"\n    year = AnnualPopulationPerActivity.objects.first().year\n    value = self.annual_populations[0].annualpopulationperactivity_set.first()\n    url = self.url\n    data = {\n        \"species\": \"SpeciesA\",\n        \"start_year\": year,\n        \"end_year\": year,\n        \"reports\": \"Activity_report\",\n        \"activity\": str(value.activity_type.id),\n        \"organisation\": ','.join([str(id) for id in self.organisations]),\n        \"property\": ','.join([str(prop) for prop in Property.objects.values_list('id', flat=True)])\n    }\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(next(iter(response.data[0])), \"Activity_report\")\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.AnnualPopulationTestCase.test_data_table_filter_by_activity_type","title":"test_data_table_filter_by_activity_type","text":"<pre><code>test_data_table_filter_by_activity_type()\n</code></pre> <p>Test data table filter by activity type</p> Source code in <code>django_project/frontend/tests/test_data_table.py</code> <pre><code>def test_data_table_filter_by_activity_type(self) -&gt; None:\n    \"\"\"Test data table filter by activity type\"\"\"\n    url = self.url\n    value = self.annual_populations[0].annualpopulationperactivity_set.first()\n    data = {\n        \"activity\": str(value.activity_type.id),\n        \"reports\": \"Property_report\",\n        \"organisation\": ','.join([str(id) for id in self.organisations]),\n        \"property\": ','.join([str(prop) for prop in Property.objects.values_list('id', flat=True)]),\n        \"species\": self.taxon.scientific_name\n    }\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(\n        response.data[0][\"Property_report\"][0][\"scientific_name\"],\n        \"SpeciesA\"\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.AnnualPopulationTestCase.test_data_table_filter_by_no_activity","title":"test_data_table_filter_by_no_activity","text":"<pre><code>test_data_table_filter_by_no_activity()\n</code></pre> <p>Test data table filter without specifying any activity. It will return all data.</p> Source code in <code>django_project/frontend/tests/test_data_table.py</code> <pre><code>def test_data_table_filter_by_no_activity(self) -&gt; None:\n    \"\"\"Test data table filter without specifying any activity.\n    It will return all data.\n    \"\"\"\n    url = self.url\n    data = {\n        \"species\": \"SpeciesA\",\n        \"activity\": '',\n        \"reports\": \"Property_report\",\n        \"organisation\": ','.join([str(id) for id in self.organisations]),\n        \"property\": ','.join([str(prop) for prop in Property.objects.values_list('id', flat=True)])\n    }\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(len(response.data), 1)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.AnnualPopulationTestCase.test_data_table_filter_by_species_name","title":"test_data_table_filter_by_species_name","text":"<pre><code>test_data_table_filter_by_species_name()\n</code></pre> <p>Test data table filter by species name</p> Source code in <code>django_project/frontend/tests/test_data_table.py</code> <pre><code>def test_data_table_filter_by_species_name(self) -&gt; None:\n    \"\"\"Test data table filter by species name\"\"\"\n    url = self.url\n    value = self.annual_populations[0].annualpopulationperactivity_set.first()\n    data = {\n        \"species\": \"SpeciesA\",\n        \"activity\": str(value.activity_type.id),\n        \"reports\": \"Property_report\",\n        \"organisation\": ','.join([str(id) for id in self.organisations]),\n        \"property\": ','.join([str(prop) for prop in Property.objects.values_list('id', flat=True)])\n    }\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(len(response.data[0][\"Property_report\"]), 1)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(\n        response.data[0][\"Property_report\"][0][\"scientific_name\"],\n        \"SpeciesA\"\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.AnnualPopulationTestCase.test_data_table_post","title":"test_data_table_post","text":"<pre><code>test_data_table_post()\n</code></pre> <p>Test data table with post request</p> Source code in <code>django_project/frontend/tests/test_data_table.py</code> <pre><code>def test_data_table_post(self) -&gt; None:\n    \"\"\"Test data table with post request\"\"\"\n    year = self.annual_populations[1].year\n    value = self.annual_populations[1].annualpopulationperactivity_set.first()\n    url = self.url\n    data = {\n        \"species\": \"SpeciesA\",\n        \"start_year\": year,\n        \"end_year\": year,\n        \"reports\": \"Sampling_report\",\n        \"activity\": str(value.activity_type.id),\n        \"organisation\": ','.join([str(id) for id in self.organisations]),\n        \"property\": ','.join([str(prop) for prop in Property.objects.values_list('id', flat=True)])\n    }\n    response = self.client.post(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(\n        response.data[0][\"Sampling_report\"][0][\n            \"scientific_name\"\n        ],\n        \"SpeciesA\"\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.AnnualPopulationTestCase.test_data_table_sampling_report","title":"test_data_table_sampling_report","text":"<pre><code>test_data_table_sampling_report()\n</code></pre> <p>Test data table sampling report</p> Source code in <code>django_project/frontend/tests/test_data_table.py</code> <pre><code>def test_data_table_sampling_report(self) -&gt; None:\n    \"\"\"Test data table sampling report\"\"\"\n    year = self.annual_populations[1].year\n    value = self.annual_populations[1].annualpopulationperactivity_set.first()\n    url = self.url\n    data = {\n        \"species\": \"SpeciesA\",\n        \"start_year\": year,\n        \"end_year\": year,\n        \"reports\": \"Sampling_report\",\n        \"activity\": str(value.activity_type.id),\n        \"organisation\": ','.join([str(id) for id in self.organisations]),\n        \"property\": ','.join([str(prop) for prop in Property.objects.values_list('id', flat=True)])\n    }\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(\n        response.data[0][\"Sampling_report\"][0][\n            \"scientific_name\"\n        ],\n        \"SpeciesA\"\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.AnnualPopulationTestCase.test_filter_by_property","title":"test_filter_by_property","text":"<pre><code>test_filter_by_property()\n</code></pre> <p>Test data table filter by property</p> Source code in <code>django_project/frontend/tests/test_data_table.py</code> <pre><code>def test_filter_by_property(self) -&gt; None:\n    \"\"\"Test data table filter by property\"\"\"\n    value = self.annual_populations[0].annualpopulationperactivity_set.first()\n    data = {\n        \"species\": self.taxon.scientific_name,\n        \"property\": self.property.id,\n        \"start_year\": self.annual_populations[0].year,\n        \"end_year\": self.annual_populations[0].year,\n        \"spatial_filter_values\": \"spatial filter test\",\n        \"activity\": str(value.activity_type.id),\n        \"organisation\": ','.join([str(id) for id in self.organisations]),\n        \"reports\": \"Property_report\"\n    }\n    response = self.client.get(self.url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(\n        response.data[0][\"Property_report\"][0][\"property_name\"],\n        \"PropertyA\"\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.AnnualPopulationTestCase.test_filter_by_year_and_report","title":"test_filter_by_year_and_report","text":"<pre><code>test_filter_by_year_and_report()\n</code></pre> <p>Test data table filter by year and report</p> Source code in <code>django_project/frontend/tests/test_data_table.py</code> <pre><code>def test_filter_by_year_and_report(self) -&gt; None:\n    \"\"\"Test data table filter by year and report\"\"\"\n    year = self.annual_populations[1].year\n    data = {\n        \"species\": self.taxon.scientific_name,\n        \"start_year\": year,\n        \"end_year\": year,\n        \"reports\": \"Species_report\",\n        \"organisation\": self.organisation_1.id,\n        \"property\": self.property.id,\n        \"activity\": \",\".join(\n            [\n                str(act_id) for act_id in ActivityType.objects.values_list('id', flat=True)\n            ]\n        )\n    }\n    url = self.url\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(\n        response.data[0][\"Species_report\"][0][\"year\"],\n        int(year)\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.AnnualPopulationTestCase.test_filter_without_property","title":"test_filter_without_property","text":"<pre><code>test_filter_without_property()\n</code></pre> <p>Test data table filter without property</p> Source code in <code>django_project/frontend/tests/test_data_table.py</code> <pre><code>def test_filter_without_property(self) -&gt; None:\n    \"\"\"Test data table filter without property\"\"\"\n    data = {\n        \"property\": ''\n    }\n    response = self.client.get(self.url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(\n        len(response.data), 0,\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.AnnualPopulationTestCase.test_show_all_reports","title":"test_show_all_reports","text":"<pre><code>test_show_all_reports()\n</code></pre> <p>Test showing report for a species.</p> Source code in <code>django_project/frontend/tests/test_data_table.py</code> <pre><code>def test_show_all_reports(self) -&gt; None:\n    \"\"\"Test showing report for a species.\"\"\"\n    url = self.url\n    self.annual_populations[0].annualpopulationperactivity_set.all().delete()\n    self.annual_populations[1].annualpopulationperactivity_set.all().delete()\n\n    taxon = TaxonFactory.create()\n    # This will not be included since the Species is not\n    # the one specified in request parameter\n    AnnualPopulation.objects.create(\n        taxon=taxon,\n        user=self.annual_populations[0].user,\n        property=self.property,\n        total=20,\n        adult_male=8,\n        adult_female=12,\n        year=self.annual_populations[0].year,\n        area_available_to_species=5\n    )\n\n    property_obj = PropertyFactory.create(\n        organisation=self.property.organisation\n    )\n\n    # This will be included\n    AnnualPopulation.objects.create(\n        taxon=self.annual_populations[0].taxon,\n        user=self.annual_populations[0].user,\n        property=property_obj,\n        total=20,\n        adult_male=8,\n        adult_female=12,\n        year=self.annual_populations[0].year,\n        area_available_to_species=10\n    )\n\n    data = {\n        \"species\": \"SpeciesA\",\n        \"activity\": '',\n        \"reports\": \"Activity_report,Property_report,Province_report,Sampling_report,Species_report\",\n        \"organisation\": ','.join([str(id) for id in self.organisations]),\n        \"property\": ','.join([str(prop) for prop in Property.objects.values_list('id', flat=True)])\n    }\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n\n    # We delete 2 population per activity records, now it remains only 3\n    self.assertEqual(len(response.data[0][\"Activity_report\"]), 3)\n\n    # Show all property report (1)\n    # We only have 1 property with 5 years of data\n    self.assertEqual(len(response.data[1][\"Property_report\"]), 6)\n    for row in response.data[1][\"Property_report\"]:\n        if row['year'] == int(self.annual_populations[0].year):\n            self.assertEqual(row['area_available_to_species'], 10.0)\n        else:\n            self.assertEqual(row['area_available_to_species'], 10)\n\n    # Show all sampling report (5)\n    self.assertEqual(len(response.data[2][\"Sampling_report\"]), 6)\n    # Show all species report (5)\n    self.assertEqual(len(response.data[3][\"Species_report\"]), 6)\n    # Show province report\n    self.assertEqual(\n        response.data[4][\"Province_report\"],\n        [\n            {\n                \"year\": int(self.annual_populations[4].year),\n                \"common_name\": self.annual_populations[-1].taxon.common_name_verbatim,\n                \"scientific_name\": self.annual_populations[-1].taxon.scientific_name,\n                \"total_population_Western Cape\": 10,\n                f\"total_population_{property_obj.province.name}\": 0,\n            },\n            {\n                \"year\": int(self.annual_populations[3].year),\n                \"common_name\": self.annual_populations[-1].taxon.common_name_verbatim,\n                \"scientific_name\": self.annual_populations[-1].taxon.scientific_name,\n                \"total_population_Western Cape\": 10,\n                f\"total_population_{property_obj.province.name}\": 0,\n            },\n            {\n                \"year\": int(self.annual_populations[2].year),\n                \"common_name\": self.annual_populations[-1].taxon.common_name_verbatim,\n                \"scientific_name\": self.annual_populations[-1].taxon.scientific_name,\n                \"total_population_Western Cape\": 10,\n                f\"total_population_{property_obj.province.name}\": 0,\n            },\n            {\n                \"year\": int(self.annual_populations[1].year),\n                \"common_name\": self.annual_populations[-1].taxon.common_name_verbatim,\n                \"scientific_name\": self.annual_populations[-1].taxon.scientific_name,\n                \"total_population_Western Cape\": 10,\n                f\"total_population_{property_obj.province.name}\": 0,\n            },\n            {\n                \"year\": int(self.annual_populations[0].year),\n                \"common_name\": self.annual_populations[-1].taxon.common_name_verbatim,\n                \"scientific_name\": self.annual_populations[-1].taxon.scientific_name,\n                \"total_population_Western Cape\": 10,\n                f\"total_population_{property_obj.province.name}\": 20,\n            },\n        ]\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.DataScientistTestCase","title":"DataScientistTestCase","text":"<p>               Bases: <code>TestCase</code></p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.DataScientistTestCase.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>Setup test case</p> Source code in <code>django_project/frontend/tests/test_data_table.py</code> <pre><code>def setUp(self) -&gt; None:\n    \"\"\"Setup test case\"\"\"\n    taxon_rank = TaxonRank.objects.filter(\n        name='Species'\n    ).first()\n    if not taxon_rank:\n        taxon_rank = TaxonRankFactory.create(\n            name='Species'\n        )\n    self.taxon = TaxonFactory.create(\n        taxon_rank=taxon_rank,\n        scientific_name='SpeciesA'\n    )\n    user = User.objects.create_user(\n            username='testuserd',\n            password='testpasswordd'\n        )\n    self.organisation_1 = organisationFactory.create(national=True)\n\n    organisationUserFactory.create(\n        user=user,\n        organisation=self.organisation_1\n    )\n\n    group = GroupF.create(name=PROVINCIAL_DATA_SCIENTIST)\n    user.groups.add(group)\n    user.user_profile.current_organisation = self.organisation_1\n    user.save()\n\n    self.role_organisation_manager = userRoleTypeFactory.create(\n        name=\"Regional data scientist\",\n    )\n    user.user_profile.current_organisation = self.organisation_1\n    user.user_profile.user_role_type_id = self.role_organisation_manager\n    user.save()\n\n    self.property = PropertyFactory.create(\n        organisation=self.organisation_1,\n        name='PropertyA'\n    )\n\n    self.annual_populations = AnnualPopulationF.create_batch(\n        5,\n        taxon=self.taxon,\n        user=user,\n        property=self.property,\n        total=10,\n        adult_male=4,\n        adult_female=6\n    )\n    self.url = reverse('data-table')\n\n    self.auth_headers = {\n        'HTTP_AUTHORIZATION': 'Basic ' +\n        base64.b64encode(b'testuserd:testpasswordd').decode('ascii'),\n    }\n    self.client = Client()\n    session = self.client.session\n    session.save()\n    self.organisations = [self.organisation_1.id]\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.DataScientistTestCase.test_regional_data_scientist","title":"test_regional_data_scientist","text":"<pre><code>test_regional_data_scientist()\n</code></pre> <p>Test data table filter by regional data scientist</p> Source code in <code>django_project/frontend/tests/test_data_table.py</code> <pre><code>def test_regional_data_scientist(self) -&gt; None:\n    \"\"\"Test data table filter by regional data scientist\"\"\"\n    value = self.annual_populations[0].annualpopulationperactivity_set.first()\n    data = {\n        \"reports\": (\n            \"Species_report,Property_report\"\n        ),\n        \"activity\": str(value.activity_type.id),\n        \"organisation\": ','.join([str(id) for id in self.organisations]),\n        \"property\": ','.join([str(prop) for prop in Property.objects.values_list('id', flat=True)]),\n        \"species\": self.taxon.scientific_name\n    }\n    url = self.url\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(len(response.data), 2)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.DownloadDataDataConsumerTestCase","title":"DownloadDataDataConsumerTestCase","text":"<p>               Bases: <code>AnnualPopulationTestMixins</code>, <code>TestCase</code></p> <p>Test Case for download data</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.DownloadDataDataConsumerTestCase.test_download_all_reports_by_all_activity_type","title":"test_download_all_reports_by_all_activity_type","text":"<pre><code>test_download_all_reports_by_all_activity_type()\n</code></pre> <p>Test download data table filter by activity name</p> Source code in <code>django_project/frontend/tests/test_data_table.py</code> <pre><code>def test_download_all_reports_by_all_activity_type(self) -&gt; None:\n    \"\"\"Test download data table filter by activity name\"\"\"\n    url = self.url\n    self.annual_populations[0].annualpopulationperactivity_set.all().delete()\n    self.annual_populations[1].annualpopulationperactivity_set.all().delete()\n\n    data = {\n        \"file\": \"csv\",\n        \"species\": \"SpeciesA\",\n        \"activity\": ','.join([str(act_id) for act_id in ActivityType.objects.values_list('id', flat=True)]),\n        \"reports\": \"Activity_report,Property_report,Species_report,Province_report\",\n        \"organisation\": ','.join([str(id) for id in self.organisations]),\n        \"property\": ','.join([str(prop) for prop in Property.objects.values_list('id', flat=True)])\n    }\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n\n    # Test if file output is zip\n    self.assertIn(\"data_report.zip\", response.data['file'])\n    data_path = get_path_from_media_url(response.data['file'])\n    self.assertTrue(os.path.exists(data_path))\n    path = os.path.dirname(data_path)\n\n    # check if all csv files exist in the folder\n    self.assertTrue(os.path.exists(os.path.join(path, \"data_report_Species_report.csv\")))\n    self.assertTrue(os.path.exists(os.path.join(path, \"data_report_Activity_report.csv\")))\n    self.assertTrue(os.path.exists(os.path.join(path, \"data_report_Property_report.csv\")))\n\n    # check fields in Activity report\n    activity_path = os.path.join(path, \"data_report_Activity_report.csv\")\n    with open(activity_path, encoding='utf-8-sig') as csv_file:\n        file = csv.DictReader(csv_file)\n        headers = file.fieldnames\n        self.assertTrue(any(\"total_population_\" in header for header in headers))\n        self.assertTrue(\"scientific_name\" in headers)\n        self.assertTrue(\"common_name\" in headers)\n        self.assertTrue(\"year\" in headers)\n\n    activity_path = os.path.join(path, \"data_report_Province_report.csv\")\n    with open(activity_path, encoding='utf-8-sig') as csv_file:\n        file = csv.DictReader(csv_file)\n        headers = file.fieldnames\n        self.assertTrue(any(\"total_population_\" in header for header in headers))\n        self.assertTrue(\"scientific_name\" in headers)\n        self.assertTrue(\"common_name\" in headers)\n        self.assertTrue(\"year\" in headers)\n\n    activity_path = os.path.join(path, \"data_report_Species_report.csv\")\n    with open(activity_path, encoding='utf-8-sig') as csv_file:\n        file = csv.DictReader(csv_file)\n        headers = file.fieldnames\n        self.assertTrue(\"scientific_name\" in headers)\n        self.assertTrue(\"common_name\" in headers)\n        self.assertTrue(\"year\" in headers)\n\n    activity_path = os.path.join(path, \"data_report_Property_report.csv\")\n    with open(activity_path, encoding='utf-8-sig') as csv_file:\n        file = csv.DictReader(csv_file)\n        headers = file.fieldnames\n        self.assertTrue(any(\"total_population_\" in header for header in headers))\n        self.assertTrue(\"scientific_name\" in headers)\n        self.assertTrue(\"common_name\" in headers)\n        self.assertTrue(\"year\" in headers)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.DownloadDataDataConsumerTestCase.test_download_one_report","title":"test_download_one_report","text":"<pre><code>test_download_one_report()\n</code></pre> <p>Test download data table with only one report</p> Source code in <code>django_project/frontend/tests/test_data_table.py</code> <pre><code>def test_download_one_report(self) -&gt; None:\n    \"\"\"Test download data table with only one report\"\"\"\n    url = self.url\n\n    data = {\n        \"file\": \"csv\",\n        \"species\": \"SpeciesA\",\n        \"activity\": ','.join([str(act_id) for act_id in ActivityType.objects.values_list('id', flat=True)]),\n        \"reports\": \"Species_report\",\n        \"property\": ','.join([str(prop) for prop in Property.objects.values_list('id', flat=True)])\n    }\n    response = self.client.post(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertIn(\"data_report_Species_report.csv\", response.data['file'])\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.DownloadDataDataConsumerTestCase.test_download_xlsx_data_all_reports_by_all_activity_type","title":"test_download_xlsx_data_all_reports_by_all_activity_type","text":"<pre><code>test_download_xlsx_data_all_reports_by_all_activity_type()\n</code></pre> <p>Test download data table filter by activity name</p> Source code in <code>django_project/frontend/tests/test_data_table.py</code> <pre><code>def test_download_xlsx_data_all_reports_by_all_activity_type(self) -&gt; None:\n    \"\"\"Test download data table filter by activity name\"\"\"\n    url = self.url\n\n    data = {\n        \"file\": \"xlsx\",\n        \"species\": \"SpeciesA\",\n        \"activity\": ','.join([str(act_id) for act_id in ActivityType.objects.values_list('id', flat=True)]),\n        \"reports\": \"Activity_report,Property_report,Species_report,Province_report\",\n        \"property\": ','.join([str(prop) for prop in Property.objects.values_list('id', flat=True)])\n    }\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n\n    # Test if file output is xlsx\n    self.assertIn(\"data_report.xlsx\", response.data['file'])\n    data_path = get_path_from_media_url(response.data['file'])\n    self.assertTrue(os.path.exists(data_path))\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.DownloadDataDataConsumerTestCase.test_path_not_exist","title":"test_path_not_exist","text":"<pre><code>test_path_not_exist()\n</code></pre> <p>Test download data table when file path does not exist</p> Source code in <code>django_project/frontend/tests/test_data_table.py</code> <pre><code>def test_path_not_exist(self):\n    \"\"\"Test download data table when file path does not exist\"\"\"\n\n    path = os.path.join(settings.MEDIA_ROOT, \"download_data\")\n    shutil.rmtree(path, ignore_errors=True)\n\n    url = self.url\n\n    data = {\n        \"file\": \"csv\",\n        \"species\": \"SpeciesA\",\n        \"activity\": ','.join([str(act_id) for act_id in ActivityType.objects.values_list('id', flat=True)]),\n        \"reports\": \"Species_report\",\n        \"property\": ','.join([str(prop) for prop in Property.objects.values_list('id', flat=True)])\n    }\n    response = self.client.post(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertIn(\"data_report_Species_report.csv\", response.data['file'])\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.DownloadDataTestCase","title":"DownloadDataTestCase","text":"<p>               Bases: <code>AnnualPopulationTestMixins</code>, <code>TestCase</code></p> <p>Test Case for download data</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.DownloadDataTestCase.test_download_all_reports_by_all_activity_type","title":"test_download_all_reports_by_all_activity_type","text":"<pre><code>test_download_all_reports_by_all_activity_type()\n</code></pre> <p>Test download data table filter by activity name</p> Source code in <code>django_project/frontend/tests/test_data_table.py</code> <pre><code>def test_download_all_reports_by_all_activity_type(self) -&gt; None:\n    \"\"\"Test download data table filter by activity name\"\"\"\n    url = self.url\n    self.annual_populations[0].annualpopulationperactivity_set.all().delete()\n    self.annual_populations[1].annualpopulationperactivity_set.all().delete()\n\n    data = {\n        \"file\": \"csv\",\n        \"species\": \"SpeciesA\",\n        \"activity\": ','.join([str(act_id) for act_id in ActivityType.objects.values_list('id', flat=True)]),\n        \"reports\": \"Activity_report,Property_report,Sampling_report,Species_report\",\n        \"organisation\": ','.join([str(id) for id in self.organisations]),\n        \"property\": ','.join([str(prop) for prop in Property.objects.values_list('id', flat=True)])\n    }\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n\n    # Test if file output is zip\n    self.assertIn(\"data_report.zip\", response.data['file'])\n    data_path = get_path_from_media_url(response.data['file'])\n    self.assertTrue(os.path.exists(data_path))\n    path = os.path.dirname(data_path)\n\n    # check if all csv files exist in the folder\n    self.assertTrue(os.path.exists(os.path.join(path, \"data_report_Species_report.csv\")))\n    self.assertTrue(os.path.exists(os.path.join(path, \"data_report_Activity_report.csv\")))\n    self.assertTrue(os.path.exists(os.path.join(path, \"data_report_Property_report.csv\")))\n    self.assertTrue(os.path.exists(os.path.join(path, \"data_report_Sampling_report.csv\")))\n\n    # check fields in Activity report\n    activity_path = os.path.join(path, \"data_report_Activity_report.csv\")\n    with open(activity_path, encoding='utf-8-sig') as csv_file:\n        file = csv.DictReader(csv_file)\n        headers = file.fieldnames\n        self.assertTrue(any(\"_total\" in header for header in headers))\n        self.assertTrue(any(\"_adult_male\" in header for header in headers))\n        self.assertTrue(any(\"_adult_female\" in header for header in headers))\n        self.assertTrue(any(\"_juvenile_male\" in header for header in headers))\n        self.assertTrue(any(\"_juvenile_female\" in header for header in headers))\n        self.assertTrue(\"property_name\" in headers)\n        self.assertTrue(\"scientific_name\" in headers)\n        self.assertTrue(\"common_name\" in headers)\n        self.assertTrue(\"year\" in headers)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.DownloadDataTestCase.test_download_xlsx_data_all_reports_by_all_activity_type","title":"test_download_xlsx_data_all_reports_by_all_activity_type","text":"<pre><code>test_download_xlsx_data_all_reports_by_all_activity_type()\n</code></pre> <p>Test download data table filter by activity name</p> Source code in <code>django_project/frontend/tests/test_data_table.py</code> <pre><code>def test_download_xlsx_data_all_reports_by_all_activity_type(self) -&gt; None:\n    \"\"\"Test download data table filter by activity name\"\"\"\n    url = self.url\n\n    data = {\n        \"file\": \"xlsx\",\n        \"species\": \"SpeciesA\",\n        \"activity\": ','.join([str(act_id) for act_id in ActivityType.objects.values_list('id', flat=True)]),\n        \"reports\": \"Activity_report,Property_report,Sampling_report,Species_report\",\n        \"property\": ','.join([str(prop) for prop in Property.objects.values_list('id', flat=True)])\n    }\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n\n    # Test if file output is xlsx\n    self.assertIn(\"data_report.xlsx\", response.data['file'])\n    data_path = get_path_from_media_url(response.data['file'])\n    self.assertTrue(os.path.exists(data_path))\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.DownloadDataTestCase.test_download_xlsx_data_all_reports_without_activity_filter","title":"test_download_xlsx_data_all_reports_without_activity_filter","text":"<pre><code>test_download_xlsx_data_all_reports_without_activity_filter()\n</code></pre> <p>Test download data table filter by activity name</p> Source code in <code>django_project/frontend/tests/test_data_table.py</code> <pre><code>def test_download_xlsx_data_all_reports_without_activity_filter(self) -&gt; None:\n    \"\"\"Test download data table filter by activity name\"\"\"\n    url = self.url\n\n    data = {\n        \"file\": \"xlsx\",\n        \"species\": \"SpeciesA\",\n        \"reports\": \"Activity_report,Property_report,Sampling_report,Species_report\",\n        \"property\": ','.join([str(prop) for prop in Property.objects.values_list('id', flat=True)])\n    }\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n\n    # Test if file output is xlsx\n    self.assertIn(\"data_report.xlsx\", response.data['file'])\n    data_path = get_path_from_media_url(response.data['file'])\n    self.assertTrue(os.path.exists(data_path))\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.NationalUserTestCase","title":"NationalUserTestCase","text":"<p>               Bases: <code>TestCase</code></p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.NationalUserTestCase.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>Setup test case</p> Source code in <code>django_project/frontend/tests/test_data_table.py</code> <pre><code>def setUp(self) -&gt; None:\n    \"\"\"Setup test case\"\"\"\n    taxon_rank = TaxonRank.objects.filter(\n        name='Species'\n    ).first()\n    if not taxon_rank:\n        taxon_rank = TaxonRankFactory.create(\n            name='Species'\n        )\n    self.taxon = TaxonFactory.create(\n        taxon_rank=taxon_rank,\n        scientific_name='SpeciesA'\n    )\n    user = User.objects.create_user(\n        username='testuserd',\n        password='testpasswordd'\n    )\n    self.organisation_1 = organisationFactory.create()\n    # add user 1 to organisation 1 and 3\n    self.role_organisation_manager = userRoleTypeFactory.create(\n        name=\"National data consumer\",\n    )\n    user.user_profile.current_organisation = self.organisation_1\n    user.save()\n    self.national_data_consumer_group, _ = Group.objects.get_or_create(name=NATIONAL_DATA_CONSUMER)\n    user.groups.add(self.national_data_consumer_group)\n\n    self.property = PropertyFactory.create(\n        organisation=self.organisation_1,\n        name='PropertyA'\n    )\n\n    self.annual_populations = AnnualPopulationF.create_batch(\n        5,\n        taxon=self.taxon,\n        user=user,\n        property=self.property,\n        total=10,\n        adult_male=4,\n        adult_female=6\n    )\n    self.url = reverse('data-table')\n\n    self.auth_headers = {\n        'HTTP_AUTHORIZATION': 'Basic ' +\n        base64.b64encode(b'testuserd:testpasswordd').decode('ascii'),\n    }\n    self.client = Client()\n    session = self.client.session\n    session.save()\n\n    self.spatial_data = SpatialDataModelF.create(\n        property=self.property\n    )\n    self.spatial_data_value = SpatialDataModelValueF.create(\n        spatial_data=self.spatial_data,\n        context_layer_value='spatial filter test'\n    )\n    self.organisations = [self.organisation_1.id]\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.NationalUserTestCase.test_national_activity_report_all_activity","title":"test_national_activity_report_all_activity","text":"<pre><code>test_national_activity_report_all_activity()\n</code></pre> <p>Test activity report for national data consumer</p> Source code in <code>django_project/frontend/tests/test_data_table.py</code> <pre><code>def test_national_activity_report_all_activity(self) -&gt; None:\n    \"\"\"Test activity report for national data consumer\"\"\"\n    url = self.url\n    params = {\n        'activity': ','.join([str(act_id) for act_id in ActivityType.objects.values_list('id', flat=True)]),\n        'reports': ACTIVITY_REPORT,\n        \"organisation\": ','.join([str(id) for id in self.organisations]),\n        \"property\": ','.join([str(prop) for prop in Property.objects.values_list('id', flat=True)]),\n        \"species\": self.taxon.scientific_name\n    }\n    response = self.client.get(url, params, **self.auth_headers)\n    expected_response = [\n        {\n            \"Activity_report\": []\n        }\n    ]\n    for i in range(0, len(self.annual_populations)):\n        activity_types = ActivityType.objects.exclude(\n            name=self.annual_populations[i].annualpopulationperactivity_set.first().activity_type.name\n        ).values_list('name', flat=True)\n        base_dict = {\n            'year': int(self.annual_populations[i].year),\n            'common_name': self.taxon.common_name_verbatim,\n            'scientific_name': self.taxon.scientific_name,\n            f'total_population_{self.annual_populations[i].annualpopulationperactivity_set.first().activity_type.name}': 100  # noqa\n        }\n        additional_fields = {f\"total_population_{key}\": 0 for key in activity_types}\n        base_dict.update(additional_fields)\n        expected_response[0][ACTIVITY_REPORT].append(base_dict)\n    expected_response[0][ACTIVITY_REPORT] = sorted(\n        expected_response[0][ACTIVITY_REPORT],\n        key=lambda a: a['year'],\n        reverse=True\n    )\n\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.json(), expected_response)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.NationalUserTestCase.test_national_property_report_all_activity","title":"test_national_property_report_all_activity","text":"<pre><code>test_national_property_report_all_activity()\n</code></pre> <p>Test property report for national data consumer</p> Source code in <code>django_project/frontend/tests/test_data_table.py</code> <pre><code>def test_national_property_report_all_activity(self) -&gt; None:\n    \"\"\"Test property report for national data consumer\"\"\"\n    annual_population = AnnualPopulation.objects.create(\n        taxon=self.taxon,\n        property=PropertyFactory.create(),\n        year=self.annual_populations[0].year,\n        total=21\n    )\n    url = self.url\n    params = {\n        'activity': '',\n        \"organisation\": ','.join([str(id) for id in self.organisations]),\n        \"property\": ','.join([str(prop) for prop in Property.objects.values_list('id', flat=True)]),\n        \"species\": self.taxon.scientific_name\n    }\n    response = self.client.get(url, params, **self.auth_headers)\n    expected_response = [\n        {\n            PROPERTY_REPORT: [{\n                'year': int(self.annual_populations[0].year),\n                'common_name': self.taxon.common_name_verbatim,\n                'scientific_name': self.taxon.scientific_name,\n                f'total_population_{self.property.property_type.name}_property': 10,\n                f'total_area_{self.property.property_type.name}_property': 200,\n                f'total_population_{annual_population.property.property_type.name}_property': 21,\n                f'total_area_{annual_population.property.property_type.name}_property': 200\n            }]\n        }\n    ]\n    expected_response[0][PROPERTY_REPORT].extend([{\n        'year': int(self.annual_populations[i].year),\n        'common_name': self.taxon.common_name_verbatim,\n        'scientific_name': self.taxon.scientific_name,\n        f'total_population_{self.property.property_type.name}_property': 10,\n        f'total_area_{self.property.property_type.name}_property': 200,\n        f'total_population_{annual_population.property.property_type.name}_property': 0,\n        f'total_area_{annual_population.property.property_type.name}_property': 0\n    } for i in range(1, len(self.annual_populations))])\n    expected_response[0][PROPERTY_REPORT] = sorted(\n        expected_response[0][PROPERTY_REPORT],\n        key=lambda a: a['year'],\n        reverse=True\n    )\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.json(), expected_response)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.NationalUserTestCase.test_national_province_report_all_activity","title":"test_national_province_report_all_activity","text":"<pre><code>test_national_province_report_all_activity()\n</code></pre> <p>Test property report for national data consumer</p> Source code in <code>django_project/frontend/tests/test_data_table.py</code> <pre><code>def test_national_province_report_all_activity(self) -&gt; None:\n    \"\"\"Test property report for national data consumer\"\"\"\n    annual_population = AnnualPopulation.objects.create(\n        taxon=self.taxon,\n        property=PropertyFactory.create(),\n        year=self.annual_populations[0].year,\n        total=21\n    )\n    url = self.url\n    params = {\n        'activity': '',\n        'reports': PROVINCE_REPORT,\n        \"organisation\": ','.join([str(id) for id in self.organisations]),\n        \"property\": ','.join([str(prop) for prop in Property.objects.values_list('id', flat=True)]),\n        \"species\": self.taxon.scientific_name\n    }\n    response = self.client.get(url, params, **self.auth_headers)\n\n    expected_response = [\n        {\n            PROVINCE_REPORT: [{\n                'year': int(self.annual_populations[0].year),\n                'common_name': self.taxon.common_name_verbatim,\n                'scientific_name': self.taxon.scientific_name,\n                f'total_population_{self.property.province.name}': 10,\n                f'total_population_{annual_population.property.province.name}': 21\n            }]\n        }\n    ]\n    expected_response[0][PROVINCE_REPORT].extend([{\n        'year': int(self.annual_populations[i].year),\n        'common_name': self.taxon.common_name_verbatim,\n        'scientific_name': self.taxon.scientific_name,\n        f'total_population_{self.property.province.name}': 10,\n        f'total_population_{annual_population.property.province.name}': 0\n    } for i in range(1, len(self.annual_populations))])\n    expected_response[0][PROVINCE_REPORT] = sorted(\n        expected_response[0][PROVINCE_REPORT],\n        key=lambda a: a['year'],\n        reverse=True\n    )\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.json(), expected_response)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.NationalUserTestCase.test_national_species_report_all_activity","title":"test_national_species_report_all_activity","text":"<pre><code>test_national_species_report_all_activity()\n</code></pre> <p>Test species report for national data consumer</p> Source code in <code>django_project/frontend/tests/test_data_table.py</code> <pre><code>def test_national_species_report_all_activity(self) -&gt; None:\n    \"\"\"Test species report for national data consumer\"\"\"\n    url = self.url\n    params = {\n        'activity': ','.join([str(act_id) for act_id in ActivityType.objects.values_list('id', flat=True)]),\n        'reports': SPECIES_REPORT,\n        \"organisation\": ','.join([str(id) for id in self.organisations]),\n        \"property\": ','.join([str(prop) for prop in Property.objects.values_list('id', flat=True)]),\n        \"species\": self.taxon.scientific_name\n    }\n    response = self.client.get(url, params, **self.auth_headers)\n\n    expected_response = [\n        {\n            SPECIES_REPORT: [{\n                'year': int(self.annual_populations[i].year),\n                'common_name': self.taxon.common_name_verbatim,\n                'scientific_name': self.taxon.scientific_name,\n                \"total_property_area\": 200,\n                \"total_area_available\": 10,\n                \"total_population\": 10,\n                \"adult_male_total_population\": 4,\n                \"adult_female_total_population\": 6,\n                \"sub_adult_male_total_population\": 10,\n                \"sub_adult_female_total_population\": 10,\n                \"juvenile_male_total_population\": 30,\n                \"juvenile_female_total_population\": 30,\n            } for i in range(0, len(self.annual_populations))]\n        }\n    ]\n    expected_response[0][SPECIES_REPORT] = sorted(\n        expected_response[0][SPECIES_REPORT],\n        key=lambda a: a['year'],\n        reverse=True\n    )\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.json(), expected_response)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.NationalUserTestCase.test_national_user_reports","title":"test_national_user_reports","text":"<pre><code>test_national_user_reports()\n</code></pre> <p>Test national data consumer reports</p> Source code in <code>django_project/frontend/tests/test_data_table.py</code> <pre><code>def test_national_user_reports(self) -&gt; None:\n    \"\"\"Test national data consumer reports\"\"\"\n    year = self.annual_populations[0].year\n    property = self.annual_populations[0].property.id\n    organisation = self.annual_populations[0].property.organisation_id\n    value = self.annual_populations[0].annualpopulationperactivity_set.first()\n    data = {\n        \"species\": \"SpeciesA\",\n        \"property\": property,\n        \"organisation\": '',\n        \"start_year\": year,\n        \"end_year\": year,\n        \"reports\": (\n            \"Activity_report,Province_report,\"\n            \"Species_report,Property_report\"\n        ),\n        \"activity\": str(value.activity_type.id),\n        'spatial_filter_values': 'spatial filter test',\n    }\n    url = self.url\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(len(response.data), 0)\n    # test with organisation\n    data = {\n        \"species\": \"SpeciesA\",\n        \"property\": property,\n        \"organisation\": f'{str(organisation)}',\n        \"start_year\": year,\n        \"end_year\": year,\n        \"reports\": (\n            \"Activity_report,Province_report,\"\n            \"Species_report,Property_report\"\n        ),\n        \"activity\": str(value.activity_type.id),\n        'spatial_filter_values': 'spatial filter test',\n    }\n    url = self.url\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(len(response.data), 4)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.RegionalUserTestCase","title":"RegionalUserTestCase","text":"<p>               Bases: <code>TestCase</code></p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.RegionalUserTestCase.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>Setup test case</p> Source code in <code>django_project/frontend/tests/test_data_table.py</code> <pre><code>def setUp(self) -&gt; None:\n    \"\"\"Setup test case\"\"\"\n    taxon_rank = TaxonRank.objects.filter(\n        name='Species'\n    ).first()\n    if not taxon_rank:\n        taxon_rank = TaxonRankFactory.create(\n            name='Species'\n        )\n    self.taxon = TaxonFactory.create(\n        taxon_rank=taxon_rank,\n        scientific_name='SpeciesA'\n    )\n    user = User.objects.create_user(\n            username='testuserd',\n            password='testpasswordd'\n        )\n    self.province = ProvinceFactory.create(\n        name='Limpopo'\n    )\n    self.organisation_1 = organisationFactory.create(\n        province=self.province\n    )\n    # add user 1 to organisation 1 and 3\n    organisationUserFactory.create(\n        user=user,\n        organisation=self.organisation_1\n    )\n    self.role_organisation_manager = userRoleTypeFactory.create(\n        name=\"Provincial data consumer\",\n    )\n\n    group = GroupF.create(name=PROVINCIAL_DATA_CONSUMER)\n    user.groups.add(group)\n\n    OrganisationInvites.objects.create(\n        email=user.email,\n        assigned_as=MANAGER\n    )\n\n    user.user_profile.current_organisation = self.organisation_1\n    user.save()\n\n    self.property = PropertyFactory.create(\n        organisation=self.organisation_1,\n        name='PropertyA'\n    )\n\n    self.annual_populations = AnnualPopulationF.create_batch(\n        5,\n        taxon=self.taxon,\n        user=user,\n        property=self.property,\n        total=10,\n        adult_male=4,\n        adult_female=6\n    )\n    self.url = reverse('data-table')\n\n    self.auth_headers = {\n        'HTTP_AUTHORIZATION': 'Basic ' +\n        base64.b64encode(b'testuserd:testpasswordd').decode('ascii'),\n    }\n    self.client = Client()\n    session = self.client.session\n    session.save()\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.RegionalUserTestCase.test_has_province_data","title":"test_has_province_data","text":"<pre><code>test_has_province_data()\n</code></pre> <p>Test data table filter by regional data consumer. The response would not be empty since there are Annual Population data for the user's organisation's province.</p> Source code in <code>django_project/frontend/tests/test_data_table.py</code> <pre><code>def test_has_province_data(self) -&gt; None:\n    \"\"\"Test data table filter by regional data consumer.\n    The response would not be empty since there are Annual Population data\n    for the user's organisation's province.\n    \"\"\"\n    self.property.province = self.organisation_1.province\n    self.property.save()\n    data = {\n        \"reports\": \"Activity_report,Species_report,Property_report\",\n        \"activity\": \",\".join(\n            [\n                str(act_id) for act_id in ActivityType.objects.values_list('id', flat=True)\n            ]\n        ),\n        \"species\": self.taxon.scientific_name\n    }\n    url = self.url\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(len(response.data), 3)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_data_table.RegionalUserTestCase.test_no_province_data","title":"test_no_province_data","text":"<pre><code>test_no_province_data()\n</code></pre> <p>Test data table filter by regional data consumer. The response would be empty since there are no Annual Population data for the user's organisation's province.</p> Source code in <code>django_project/frontend/tests/test_data_table.py</code> <pre><code>def test_no_province_data(self) -&gt; None:\n    \"\"\"Test data table filter by regional data consumer.\n    The response would be empty since there are no Annual Population data\n    for the user's organisation's province.\n    \"\"\"\n    data = {\n        \"reports\": \"Activity_report,Species_report,Property_report\",\n        \"activity\": \",\".join(\n            [\n                str(act_id) for act_id in ActivityType.objects.values_list('id', flat=True)\n            ]\n        )\n    }\n    url = self.url\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(len(response.data), 0)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_frontend_models.TestUploadSpeciesCSV","title":"TestUploadSpeciesCSV","text":"<p>               Bases: <code>TestCase</code></p> <p>Test upload species csv model.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_frontend_models.TestUploadSpeciesCSV.test_create_new_upload_species_csv","title":"test_create_new_upload_species_csv","text":"<pre><code>test_create_new_upload_species_csv()\n</code></pre> <p>Test creating new upload species csv.</p> Source code in <code>django_project/frontend/tests/test_frontend_models.py</code> <pre><code>def test_create_new_upload_species_csv(self):\n    \"\"\"Test creating new upload species csv.\"\"\"\n    upload_species_csv = UploadSpeciesCSVF.create(\n        id=1,\n        success_notes='success_message',\n        property=self.property\n    )\n    self.assertEqual(UploadSpeciesCSV.objects.count(), 1)\n    self.assertEqual(\n        upload_species_csv.success_notes,\n        'success_message'\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_frontend_models.TestUploadSpeciesCSV.test_delete_upload_species_csv","title":"test_delete_upload_species_csv","text":"<pre><code>test_delete_upload_species_csv()\n</code></pre> <p>Test deleting upload species csv.</p> Source code in <code>django_project/frontend/tests/test_frontend_models.py</code> <pre><code>def test_delete_upload_species_csv(self):\n    \"\"\"Test deleting upload species csv.\"\"\"\n    upload_species_csv = UploadSpeciesCSVF.create(\n        id=1,\n        success_notes='success_message',\n        property=self.property\n    )\n    upload_species_csv.delete()\n    self.assertEqual(UploadSpeciesCSV.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_frontend_models.TestUploadSpeciesCSV.test_update_upload_species_csv","title":"test_update_upload_species_csv","text":"<pre><code>test_update_upload_species_csv()\n</code></pre> <p>Test updating a upload species csv.</p> Source code in <code>django_project/frontend/tests/test_frontend_models.py</code> <pre><code>def test_update_upload_species_csv(self):\n    \"\"\"Test updating a upload species csv.\"\"\"\n    UploadSpeciesCSVF.create(\n        id=1,\n        success_notes='success_message',\n        property=self.property\n    )\n    upload_species_csv = UploadSpeciesCSV.objects.get(\n        id=1\n    )\n    upload_species_csv.success_notes = 'success message'\n    upload_species_csv.save()\n    self.assertEqual(upload_species_csv.success_notes, 'success message')\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.ActivityPercentageTestCase","title":"ActivityPercentageTestCase","text":"<p>               Bases: <code>BaseTestCase</code></p> <p>Test the activity percentage API endpoint.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.ActivityPercentageTestCase.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>Set up the test case.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def setUp(self) -&gt; None:\n    \"\"\"\n    Set up the test case.\n    \"\"\"\n    super().setUp()\n    self.url = reverse(\"activity_percentage\")\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.ActivityPercentageTestCase.test_activity_percentage","title":"test_activity_percentage","text":"<pre><code>test_activity_percentage()\n</code></pre> <p>Test activity percentage calculation.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def test_activity_percentage(self) -&gt; None:\n    \"\"\"\n    Test activity percentage calculation.\n    \"\"\"\n    url = self.url\n    response = self.client.get(url, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.data['data'][0]['total'], 500)\n    self.assertEqual(\n        list(response.data['data'][0]['activities'][0].values())[0], 20.0\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.ActivityPercentageTestCase.test_activity_percentage_filter_by_year","title":"test_activity_percentage_filter_by_year","text":"<pre><code>test_activity_percentage_filter_by_year()\n</code></pre> <p>Test activity percentage calculation with year-based filters.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def test_activity_percentage_filter_by_year(self) -&gt; None:\n    \"\"\"\n    Test activity percentage calculation with year-based filters.\n    \"\"\"\n    year = self.annual_populations[1].annualpopulationperactivity_set.first().year\n    data = {'start_year': year, \"end_year\":year}\n    url = self.url\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(\n        response.data.get('data')[0].get('total'), 500)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.BaseTestCase","title":"BaseTestCase","text":"<p>               Bases: <code>TestCase</code></p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.BaseTestCase.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>Set up test data and environment for the test cases.</p> <p>This method creates necessary test objects like TaxonRank, Taxon, User, Organisation, Property, and AnnualPopulation. It also sets up the client and session for testing.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def setUp(self):\n    \"\"\"\n    Set up test data and environment for the test cases.\n\n    This method creates necessary test objects like TaxonRank, Taxon, User, Organisation,\n    Property, and AnnualPopulation. It also sets up the client and session for testing.\n    \"\"\"\n    taxon_rank = TaxonRank.objects.filter(name=\"Species\").first()\n    if not taxon_rank:\n        taxon_rank = TaxonRankFactory.create(name=\"Species\")\n\n    self.taxon = TaxonFactory.create(\n        taxon_rank=taxon_rank, common_name_verbatim=\"Lion\",\n        scientific_name = \"Penthera leo\"\n    )\n\n    self.user = User.objects.create_user(\n        username=\"testuserd\",\n        password=\"testpasswordd\"\n    )\n\n    self.organisation_1 = organisationFactory.create()\n    organisationUserFactory.create(\n        user=self.user,\n        organisation=self.organisation_1\n    )\n\n    self.user.user_profile.current_organisation = self.organisation_1\n    self.user.save()\n\n    self.property = PropertyFactory.create(\n        organisation=self.organisation_1, name=\"PropertyA\"\n    )\n    category_a = PopulationEstimateCategory.objects.create(name=\"Category A\")\n\n    self.annual_populations = AnnualPopulationF.create_batch(\n        5,\n        taxon=self.taxon,\n        user=self.user,\n        property=self.property,\n        population_estimate_category=category_a\n    )\n\n    self.auth_headers = {\n        \"HTTP_AUTHORIZATION\": \"Basic \"\n        + base64.b64encode(b\"testuserd:testpasswordd\").decode(\"ascii\"),\n    }\n    self.client = Client()\n\n    session = self.client.session\n    session.save()\n\n    # add superuser\n    self.superuser = User.objects.create_user(\n        username=\"testadmin\",\n        password=\"testpasswordd\",\n        is_superuser=True\n    )\n    self.auth_headers_superuser = {\n        \"HTTP_AUTHORIZATION\": \"Basic \"\n        + base64.b64encode(b\"testadmin:testpasswordd\").decode(\"ascii\"),\n    }\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.PopulationEstimateCategoryTestCase","title":"PopulationEstimateCategoryTestCase","text":"<p>               Bases: <code>BaseTestCase</code></p> <p>This is to test if the API is reachable and returns a success response.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.PopulationEstimateCategoryTestCase.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>Set up the test case.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def setUp(self) -&gt; None:\n    \"\"\"\n    Set up the test case.\n    \"\"\"\n    super().setUp()\n    self.url = reverse(\"total-count-per-population-estimate\")\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.PopulationPerAgeGroupTestCase","title":"PopulationPerAgeGroupTestCase","text":"<p>               Bases: <code>BaseTestCase</code></p> <p>Test case for the endpoint that retrieves population per age group.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.PopulationPerAgeGroupTestCase.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>Set up the test case.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def setUp(self) -&gt; None:\n    \"\"\"\n    Set up the test case.\n    \"\"\"\n    super().setUp()\n    self.url = reverse(\"population_per_age_group\")\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.PopulationPerAgeGroupTestCase.test_species_population_count_filter_by_year","title":"test_species_population_count_filter_by_year","text":"<pre><code>test_species_population_count_filter_by_year()\n</code></pre> <p>Test spopulation per age group filtered by year.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def test_species_population_count_filter_by_year(self) -&gt; None:\n    \"\"\"\n    Test spopulation per age group filtered by year.\n    \"\"\"\n    year = self.annual_populations[1].year\n    data = {'start_year': year, \"end_year\":year}\n    url = self.url\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(\n    response.data[0]['age_group'][0]['total_sub_adult_male'], 10\n    )\n    self.assertEqual(\n        response.data[0]['age_group'][0]['total_sub_adult_female'], 10\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.PopulationPerAgeGroupTestCase.test_total_area_per_property_type","title":"test_total_area_per_property_type","text":"<pre><code>test_total_area_per_property_type()\n</code></pre> <p>Test population per age group</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def test_total_area_per_property_type(self) -&gt; None:\n    \"\"\"\n    Test population per age group\n    \"\"\"\n    url = self.url\n    response = self.client.get(url, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(\n        response.data[0]['age_group'][0]['total_adult_male'], 50\n    )\n    self.assertEqual(\n        response.data[0]['age_group'][0]['total_adult_female'], 50\n    )\n    self.assertEqual(\n        response.data[0]['age_group'][0]['total_sub_adult_male'], 10\n    )\n    self.assertEqual(\n        response.data[0]['age_group'][0]['total_sub_adult_female'], 10\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.PopulationPerAgeGroupTestCase.test_total_area_per_property_type_filter_by_property","title":"test_total_area_per_property_type_filter_by_property","text":"<pre><code>test_total_area_per_property_type_filter_by_property()\n</code></pre> <p>Test population per age group filtered by property.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def test_total_area_per_property_type_filter_by_property(self):\n    \"\"\"\n    Test population per age group filtered by property.\n    \"\"\"\n    id = self.annual_populations[0].property_id\n    data = {'property':id}\n    url = self.url\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(\n        response.data[0]['age_group'][0]['total_juvenile_female'], 30\n    )\n    self.assertEqual(\n        response.data[0]['age_group'][0]['total_juvenile_female'], 30\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.PropertiesPerPopulationCategoryTestCase","title":"PropertiesPerPopulationCategoryTestCase","text":"<p>               Bases: <code>BaseTestCase</code></p> <p>Test case for the endpoint that retrieves properties population categories.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.PropertiesPerPopulationCategoryTestCase.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>Set up the test case.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def setUp(self) -&gt; None:\n    \"\"\"\n    Set up the test case.\n    \"\"\"\n    super().setUp()\n    self.url = reverse(\"properties_per_population_category\")\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.PropertiesPerPopulationCategoryTestCase.test_properties_per_population_category","title":"test_properties_per_population_category","text":"<pre><code>test_properties_per_population_category()\n</code></pre> <p>Test properties per population category.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def test_properties_per_population_category(self) -&gt; None:\n    \"\"\"\n    Test properties per population category.\n    \"\"\"\n    url = self.url\n    # test without species name\n    response = self.client.get(url, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n\n    # test with property id only to check if response is oke\n    id = self.annual_populations[0].property_id\n    data = {'property':id}\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n\n    # test property id\n    id = self.annual_populations[0].property_id\n    data = {'property':id, 'species': 'Penthera leo'}\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.SpeciesPopuationCountPerProvinceTestCase","title":"SpeciesPopuationCountPerProvinceTestCase","text":"<p>               Bases: <code>BaseTestCase</code></p> <p>This is to test if the API is reachable and returns a success response.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.SpeciesPopuationCountPerProvinceTestCase.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>Set up the test case.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def setUp(self) -&gt; None:\n    \"\"\"\n    Set up the test case.\n    \"\"\"\n    super().setUp()\n    self.url = reverse(\"species_count_per_province\")\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.SpeciesPopuationCountPerYearTestCase","title":"SpeciesPopuationCountPerYearTestCase","text":"<p>               Bases: <code>BaseTestCase</code></p> <p>Test the species population count API endpoint.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.SpeciesPopuationCountPerYearTestCase.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>Set up the test case.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def setUp(self) -&gt; None:\n    \"\"\"\n    Set up the test case.\n    \"\"\"\n    super().setUp()\n    self.url = reverse(\"species_population_count\")\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.SpeciesPopuationCountPerYearTestCase.test_species_population_count","title":"test_species_population_count","text":"<pre><code>test_species_population_count()\n</code></pre> <p>Test species population count.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def test_species_population_count(self) -&gt; None:\n    \"\"\"\n    Test species population count.\n    \"\"\"\n    url = self.url\n    response = self.client.get(url, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.data[0].get('species_name'), 'Lion')\n    self.assertEqual(\n        response.data[0]['annualpopulation_count'][0].get('year_total'),\n        response.data[0]['annualpopulation_count'][4]['year_total']\n    )\n    # test using superuser\n    response = self.client.get(url, **self.auth_headers_superuser)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.data[0].get('species_name'), 'Lion')\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.SpeciesPopuationCountPerYearTestCase.test_species_population_count_filter_by_name","title":"test_species_population_count_filter_by_name","text":"<pre><code>test_species_population_count_filter_by_name()\n</code></pre> <p>Test species population count filtered by species name.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def test_species_population_count_filter_by_name(self) -&gt; None:\n    \"\"\"\n    Test species population count filtered by species name.\n    \"\"\"\n    data = {'species': 'Penthera leo'}\n    url = self.url\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.data[0]['species_name'], 'Lion')\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.SpeciesPopuationCountPerYearTestCase.test_species_population_count_filter_by_property","title":"test_species_population_count_filter_by_property","text":"<pre><code>test_species_population_count_filter_by_property()\n</code></pre> <p>Test species population count filtered by property.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def test_species_population_count_filter_by_property(self) -&gt; None:\n    \"\"\"\n    Test species population count filtered by property.\n    \"\"\"\n    id = self.annual_populations[0].property_id\n    data = {'property':id}\n    url = self.url\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(\n        response.data[0]['annualpopulation_count'][0].get('year_total'),\n        response.data[0]['annualpopulation_count'][4]['year_total']\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.SpeciesPopuationCountPerYearTestCase.test_species_population_count_filter_by_year","title":"test_species_population_count_filter_by_year","text":"<pre><code>test_species_population_count_filter_by_year()\n</code></pre> <p>Test species population count filtered by year.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def test_species_population_count_filter_by_year(self) -&gt; None:\n    \"\"\"\n    Test species population count filtered by year.\n    \"\"\"\n    year = self.annual_populations[1].year\n    data = {'start_year': year, \"end_year\":year}\n    url = self.url\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    year_data = [p for p in response.data[0]['annualpopulation_count'] if int(p['year']) == int(year)]\n    self.assertEqual(len(year_data), 1)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.SpeciesPopulationDensityPerPropertyTestCase","title":"SpeciesPopulationDensityPerPropertyTestCase","text":"<p>               Bases: <code>BaseTestCase</code></p> <p>Test the species population total density API endpoint.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.SpeciesPopulationDensityPerPropertyTestCase.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>Set up the test case.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def setUp(self) -&gt; None:\n    \"\"\"\n    Set up the test case.\n    \"\"\"\n    super().setUp()\n    self.url = reverse(\"species_population_total_density\")\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.SpeciesPopulationDensityPerPropertyTestCase.test_species_population_density_filter_by_year","title":"test_species_population_density_filter_by_year","text":"<pre><code>test_species_population_density_filter_by_year()\n</code></pre> <p>Test species population density per property filtered by year.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def test_species_population_density_filter_by_year(self) -&gt; None:\n    \"\"\"\n    Test species population density per property filtered by year.\n    \"\"\"\n    year = self.annual_populations[1].year\n    data = {'start_year': year, \"end_year\":year, \"species\": \"Penthera leo\"}\n    url = self.url\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    first_item = response.data[0]\n    # Check if the 'density' property exists and is a list\n    if 'density' in first_item and isinstance(first_item['density'], list):\n        # Access property name\n        if first_item['density'] and isinstance(first_item['density'][0], dict):\n            property_name = first_item['density'][0].get('property_name')\n\n            self.assertEqual(property_name, 'Propertya')\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.SpeciesPopulationDensityPerPropertyTestCase.test_species_population_density_per_property","title":"test_species_population_density_per_property","text":"<pre><code>test_species_population_density_per_property()\n</code></pre> <p>Test species population density per property.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def test_species_population_density_per_property(self) -&gt; None:\n    \"\"\"\n    Test species population density per property.\n    \"\"\"\n    url = self.url\n    data = {\"species\": \"Penthera leo\"}\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n\n    # test with no species or property\n    response = self.client.get(url, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(len(response.data), 1)\n\n    # test with non existent owned species\n    data = {\"species\": \"leo\"}\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(len(response.data), 1)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.TestPropertyCountPerAreaAvailableToSpeciesCategory","title":"TestPropertyCountPerAreaAvailableToSpeciesCategory","text":"<p>               Bases: <code>TestPropertyCountPerCategoryMixins</code>, <code>BaseTestCase</code></p> <p>Test case for the endpoint that retrieves property count per area available to species category.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.TestPropertyCountPerAreaAvailableToSpeciesCategory.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>Set up the test case.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def setUp(self) -&gt; None:\n    \"\"\"\n    Set up the test case.\n    \"\"\"\n    super().setUp()\n    self.url = reverse(\"property-count-per-area-available-to-species-category\")\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.TestPropertyCountPerAreaAvailableToSpeciesCategory.test_filter","title":"test_filter","text":"<pre><code>test_filter()\n</code></pre> <p>Test filtered total property count per area  available to species category.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def test_filter(self) -&gt; None:\n    \"\"\"\n    Test filtered total property count per area  available to species category.\n    \"\"\"\n    year = self.annual_populations[1].year\n    data = {\n        'year': year,\n        'species': self.annual_populations[1].taxon.scientific_name,\n        'property': self.annual_populations[1].property_id\n    }\n    url = self.url\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(\n        response.json(),\n        [\n            {\n                'category': '8 - 10',\n                self.property.property_type.name.lower().replace(' ', '_'): 1,\n                'common_name_verbatim': self.taxon.common_name_verbatim\n            }\n        ]\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.TestPropertyCountPerAreaCategory","title":"TestPropertyCountPerAreaCategory","text":"<p>               Bases: <code>TestPropertyCountPerCategoryMixins</code>, <code>BaseTestCase</code></p> <p>Test case for the endpoint that retrieves property count per area category.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.TestPropertyCountPerAreaCategory.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>Set up the test case.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def setUp(self) -&gt; None:\n    \"\"\"\n    Set up the test case.\n    \"\"\"\n    super().setUp()\n    self.url = reverse(\"property-count-per-area-category\")\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.TestPropertyCountPerAreaCategory.test_filter","title":"test_filter","text":"<pre><code>test_filter()\n</code></pre> <p>Test filtered total property count per area category.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def test_filter(self) -&gt; None:\n    \"\"\"\n    Test filtered total property count per area category.\n    \"\"\"\n    year = self.annual_populations[1].year\n    data = {\n        'year': year,\n        'species': self.annual_populations[1].taxon.scientific_name,\n        'property': self.annual_populations[1].property_id\n    }\n    url = self.url\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(\n        response.json(),\n        [\n            {\n                'category': '198 - 200',\n                self.property.property_type.name.lower().replace(' ', '_'): 1,\n                'common_name_verbatim': self.taxon.common_name_verbatim\n            }\n        ]\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.TestPropertyCountPerCategoryMixins","title":"TestPropertyCountPerCategoryMixins","text":""},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.TestPropertyCountPerCategoryMixins.test_empty_result","title":"test_empty_result","text":"<pre><code>test_empty_result()\n</code></pre> <p>Test empty result when there is no data.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def test_empty_result(self) -&gt; None:\n    \"\"\"\n    Test empty result when there is no data.\n    \"\"\"\n    year = self.annual_populations[1].year\n    data = {\n        'year': year,\n        'species': 'Species A',\n        'property': self.annual_populations[1].property_id\n    }\n    url = self.url\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEquals(\n        response.json(),\n        []\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.TestPropertyCountPerPopulationDensityCategory","title":"TestPropertyCountPerPopulationDensityCategory","text":"<p>               Bases: <code>TestPropertyCountPerCategoryMixins</code>, <code>BaseTestCase</code></p> <p>Test case for the endpoint that retrieves property count per population density category.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.TestPropertyCountPerPopulationDensityCategory.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>Set up the test case.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def setUp(self) -&gt; None:\n    \"\"\"\n    Set up the test case.\n    \"\"\"\n    super().setUp()\n    self.url = reverse(\"property-count-per-population-density-category\")\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.TestPropertyCountPerPopulationDensityCategory.test_filter","title":"test_filter","text":"<pre><code>test_filter()\n</code></pre> <p>Test filtered total property count per population density category.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def test_filter(self) -&gt; None:\n    \"\"\"\n    Test filtered total property count per population density category.\n    \"\"\"\n    year = self.annual_populations[1].year\n    data = {\n        'year': year,\n        'species': self.annual_populations[1].taxon.scientific_name,\n        'property': self.annual_populations[1].property_id\n    }\n    url = self.url\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(\n        response.json(),\n        [\n            {\n                'category': '10.0 - 10.0',\n                self.property.property_type.name.lower().replace(' ', '_'): 1,\n                'common_name_verbatim': self.taxon.common_name_verbatim\n            }\n        ]\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.TestPropertyCountPerPopulationSizeCategory","title":"TestPropertyCountPerPopulationSizeCategory","text":"<p>               Bases: <code>TestPropertyCountPerCategoryMixins</code>, <code>BaseTestCase</code></p> <p>Test case for the endpoint that retrieves property count per population size category.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.TestPropertyCountPerPopulationSizeCategory.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>Set up the test case.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def setUp(self) -&gt; None:\n    \"\"\"\n    Set up the test case.\n    \"\"\"\n    super().setUp()\n    self.url = reverse(\"property-count-per-population-category-size\")\n    self.new_property = PropertyFactory.create()\n    self.population = AnnualPopulation.objects.create(\n        total=30,\n        property=self.new_property,\n        year=self.annual_populations[1].year,\n        taxon=self.annual_populations[1].taxon,\n        adult_male=10,\n        adult_female=20\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.TestPropertyCountPerPopulationSizeCategory.test_filter","title":"test_filter","text":"<pre><code>test_filter()\n</code></pre> <p>Test filtered total property count per population category.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def test_filter(self) -&gt; None:\n    \"\"\"\n    Test filtered total property count per population category.\n    \"\"\"\n    year = self.annual_populations[1].year\n    data = {\n        'year': year,\n        'species': self.annual_populations[1].taxon.scientific_name\n    }\n    url = self.url\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(\n        response.json(),\n        [\n            {\n                'category': '28 - 30',\n                self.new_property.property_type.name.lower().replace(' ', '_'): 1,\n                'common_name_verbatim': self.taxon.common_name_verbatim\n            },\n            {\n                'category': '&gt;30',\n                self.property.property_type.name.lower().replace(' ', '_'): 1,\n                'common_name_verbatim': self.taxon.common_name_verbatim\n            }\n        ]\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.TestPropertyCountPerPopulationSizeCategory.test_lower_bound_negative","title":"test_lower_bound_negative","text":"<pre><code>test_lower_bound_negative()\n</code></pre> <p>Test negative lower bound.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def test_lower_bound_negative(self) -&gt; None:\n    \"\"\"\n    Test negative lower bound.\n    \"\"\"\n    new_property = PropertyFactory.create()\n    AnnualPopulation.objects.create(\n        total=1,\n        property=new_property,\n        year=self.annual_populations[1].year,\n        taxon=self.annual_populations[1].taxon,\n        adult_male=1,\n        adult_female=0\n    )\n    year = self.annual_populations[1].year\n    data = {\n        'year': year,\n        'species': self.annual_populations[1].taxon.scientific_name\n    }\n    url = self.url\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(\n        response.json(),\n        [\n            {\n                'category': '1 - 30',\n                'common_name_verbatim': self.taxon.common_name_verbatim,\n                new_property.property_type.name.lower().replace(' ', '_'): 1,\n                self.new_property.property_type.name.lower().replace(' ', '_'): 1\n            },\n            {\n                'category': '&gt;30',\n                self.property.property_type.name.lower().replace(' ', '_'): 1,\n                'common_name_verbatim': self.taxon.common_name_verbatim\n            }\n        ]\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.TestPropertyCountPerPopulationSizeCategory.test_lower_bound_zero","title":"test_lower_bound_zero","text":"<pre><code>test_lower_bound_zero(mocked_breaks)\n</code></pre> <p>Test zero lower bound.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>@patch('jenkspy.jenks_breaks')\ndef test_lower_bound_zero(self, mocked_breaks) -&gt; None:\n    \"\"\"\n    Test zero lower bound.\n    \"\"\"\n    mocked_breaks.return_value = [0, 0, 0, 100]\n    new_property = PropertyFactory.create()\n    AnnualPopulation.objects.create(\n        total=1,\n        property=new_property,\n        year=self.annual_populations[1].year,\n        taxon=self.annual_populations[1].taxon,\n        adult_male=1,\n        adult_female=0\n    )\n    year = self.annual_populations[1].year\n    data = {\n        'year': year,\n        'species': self.annual_populations[1].taxon.scientific_name\n    }\n    url = self.url\n    response = self.client.get(url, data, **self.auth_headers)\n    mocked_breaks.assert_called_once()\n    self.assertEqual(\n        response.json(),\n        [\n            {\n                'category': '&gt;1',\n                self.property.property_type.name.lower().replace(' ', '_'): 1,\n                self.new_property.property_type.name.lower().replace(' ', '_'): 1,\n                new_property.property_type.name.lower().replace(' ', '_'): 1,\n                'common_name_verbatim': self.taxon.common_name_verbatim\n            }\n        ]\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.TestPropertyCountPerPopulationSizeCategory.test_with_activity_spatial_filters","title":"test_with_activity_spatial_filters","text":"<pre><code>test_with_activity_spatial_filters()\n</code></pre> <p>Test filtered total property count per population category.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def test_with_activity_spatial_filters(self) -&gt; None:\n    \"\"\"\n    Test filtered total property count per population category.\n    \"\"\"\n    activity_type = ActivityType.objects.create(name='test_activity')\n    AnnualPopulationPerActivityFactory.create(\n        activity_type=activity_type,\n        annual_population=self.population,\n        intake_permit='1',\n        offtake_permit='1'\n    )\n    for pop in self.annual_populations:\n        AnnualPopulationPerActivityFactory.create(\n            activity_type=activity_type,\n            annual_population=pop,\n            intake_permit='1',\n            offtake_permit='1'\n        )\n    year = self.annual_populations[1].year\n    # test filter using activity type id\n    data = {\n        'year': year,\n        'species': self.annual_populations[1].taxon.scientific_name,\n        'activity': f'{str(activity_type.id)}'\n    }\n    url = self.url\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(\n        response.json(),\n        [\n            {\n                'category': '28 - 30',\n                self.new_property.property_type.name.lower().replace(' ', '_'): 1,\n                'common_name_verbatim': self.taxon.common_name_verbatim\n            },\n            {\n                'category': '&gt;30',\n                self.property.property_type.name.lower().replace(' ', '_'): 1,\n                'common_name_verbatim': self.taxon.common_name_verbatim\n            }\n        ]\n    )\n    # create spatial values\n    spatial_data_1 = SpatialDataModelF.create(\n        property=self.new_property\n    )\n    SpatialDataModelValueF.create(\n        spatial_data=spatial_data_1,\n        context_layer_value='spatial filter test'\n    )\n    spatial_data_2 = SpatialDataModelF.create(\n        property=self.property\n    )\n    SpatialDataModelValueF.create(\n        spatial_data=spatial_data_2,\n        context_layer_value='spatial filter test'\n    )\n    # test filter using spatial value\n    data = {\n        'year': year,\n        'species': self.annual_populations[1].taxon.scientific_name,\n        'spatial_filter_values': 'spatial filter test'\n    }\n    url = self.url\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(\n        response.json(),\n        [\n            {\n                'category': '28 - 30',\n                self.new_property.property_type.name.lower().replace(' ', '_'): 1,\n                'common_name_verbatim': self.taxon.common_name_verbatim\n            },\n            {\n                'category': '&gt;30',\n                self.property.property_type.name.lower().replace(' ', '_'): 1,\n                'common_name_verbatim': self.taxon.common_name_verbatim\n            }\n        ]\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.TotalAreaAvailableToSpeciesTestCase","title":"TotalAreaAvailableToSpeciesTestCase","text":"<p>               Bases: <code>BaseTestCase</code></p> <p>Test case for the endpoint that retrieves total area available to species.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.TotalAreaAvailableToSpeciesTestCase.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>Set up the test case.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def setUp(self) -&gt; None:\n    \"\"\"\n    Set up the test case.\n    \"\"\"\n    super().setUp()\n    self.url = reverse(\"total_area_available_to_species\")\n    self.organisations = [self.organisation_1.id]\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.TotalAreaAvailableToSpeciesTestCase.test_total_area_available_to_species","title":"test_total_area_available_to_species","text":"<pre><code>test_total_area_available_to_species()\n</code></pre> <p>Test total area available to species.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def test_total_area_available_to_species(self) -&gt; None:\n    \"\"\"\n    Test total area available to species.\n    \"\"\"\n    url = self.url\n    data = {\n        'property': ','.join([str(prop) for prop in Property.objects.values_list('id', flat=True)]),\n        \"organisation\": ','.join([str(id) for id in self.organisations]),\n    }\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(len(response.data), len(self.annual_populations))\n    self.assertEqual(response.data[0]['area'], 10)\n\n    data = {\n        \"organisation\": ','.join([str(id) for id in self.organisations]),\n        'property': self.annual_populations[0].property_id,\n        'species': \"Penthera leo\",\n        'start_year': self.annual_populations[0].year,\n        'end_year': self.annual_populations[0].year\n    }\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(len(response.data), 1)\n    self.assertEqual(response.data[0]['area'], 10)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.TotalAreaAvailableToSpeciesTestCase.test_total_area_available_to_species_filter_by_property","title":"test_total_area_available_to_species_filter_by_property","text":"<pre><code>test_total_area_available_to_species_filter_by_property()\n</code></pre> <p>Test total area available to species filtered by property.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def test_total_area_available_to_species_filter_by_property(self) -&gt; None:\n    \"\"\"\n    Test total area available to species filtered by property.\n    \"\"\"\n    prop_id = self.annual_populations[0].property_id\n    data = {\n        \"organisation\": ','.join([str(id) for id in self.organisations]),\n        'property': prop_id\n    }\n    url = self.url\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.data[0]['property_name'], 'PropertyA')\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.TotalAreaPerPropertyTypeTestCase","title":"TotalAreaPerPropertyTypeTestCase","text":"<p>               Bases: <code>BaseTestCase</code></p> <p>Test case for the endpoint that retrieves total area per property type.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.TotalAreaPerPropertyTypeTestCase.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>Set up the test case.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def setUp(self) -&gt; None:\n    \"\"\"\n    Set up the test case.\n    \"\"\"\n    super().setUp()\n    self.url = reverse(\"total_area_per_property_type\")\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.TotalAreaPerPropertyTypeTestCase.test_total_area_per_property_type","title":"test_total_area_per_property_type","text":"<pre><code>test_total_area_per_property_type()\n</code></pre> <p>Test total area per property type</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def test_total_area_per_property_type(self) -&gt; None:\n    \"\"\"\n    Test total area per property type\n    \"\"\"\n    url = self.url\n    data = {'species': self.annual_populations[0].taxon.scientific_name}\n    response = self.client.get(url, data, **self.auth_headers)\n    property_type = self.property.property_type.name\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.data[0]['total_area'], 200)\n    self.assertEqual(\n        response.data[0]['property_type__name'],\n        property_type\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.TotalAreaPerPropertyTypeTestCase.test_total_area_per_property_type_filter_by_property","title":"test_total_area_per_property_type_filter_by_property","text":"<pre><code>test_total_area_per_property_type_filter_by_property()\n</code></pre> <p>Test total area per property type filtered by property.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def test_total_area_per_property_type_filter_by_property(self):\n    \"\"\"\n    Test total area per property type filtered by property.\n    \"\"\"\n    id = self.annual_populations[0].property_id\n    data = {'property':id, 'species': self.annual_populations[0].taxon.scientific_name}\n    url = self.url\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.data[0]['total_area'], 200)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.TotalCountPerActivityTestCase","title":"TotalCountPerActivityTestCase","text":"<p>               Bases: <code>BaseTestCase</code></p> <p>Test the total count per activity API endpoint.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.TotalCountPerActivityTestCase.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>Set up the test case.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def setUp(self) -&gt; None:\n    \"\"\"\n    Set up the test case.\n    \"\"\"\n    super().setUp()\n    self.annual_populations[0].annualpopulationperactivity_set.all().delete()\n    self.url = reverse(\"total_count_per_activity\")\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_metrics.TotalCountPerActivityTestCase.test_total_count_per_activity","title":"test_total_count_per_activity","text":"<pre><code>test_total_count_per_activity()\n</code></pre> <p>Test total count per activity calculation.</p> Source code in <code>django_project/frontend/tests/test_metrics.py</code> <pre><code>def test_total_count_per_activity(self) -&gt; None:\n    \"\"\"\n    Test total count per activity calculation.\n    \"\"\"\n    url = self.url\n    response = self.client.get(url, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.data[0]['total'], 500)\n    self.assertEqual(len(response.data[0]['activities']), 4)\n    self.assertGreater(len(response.data), 0)\n    # test with property id\n    data = {'property': self.property.id}\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    # test using superuser\n    response = self.client.get(url, data, **self.auth_headers_superuser)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    # test with activity id and spatial filter\n    activity_type = ActivityType.objects.create(name='test_activity')\n    data = {\n        'property': self.property.id,\n        'activity': f'{str(activity_type.id)}',\n        'spatial_filter_values': 'test'\n    }\n    response = self.client.get(url, data, **self.auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_organisations.TestOrganisationAPIView","title":"TestOrganisationAPIView","text":"<p>               Bases: <code>TestCase</code></p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_organisations.TestOrganisationAPIView.test_organisation_list","title":"test_organisation_list","text":"<pre><code>test_organisation_list()\n</code></pre> <p>Test organisation for organisation member</p> Source code in <code>django_project/frontend/tests/test_organisations.py</code> <pre><code>def test_organisation_list(self):\n    \"\"\"Test organisation for organisation member\"\"\"\n    factory = OrganisationAPIRequestFactory(self.organisation_1)\n    organisationUserFactory.create(\n        organisation=self.organisation_1,\n        user=self.user_1\n    )\n    request = factory.get(\n        reverse('organisation')\n    )\n    request.user = self.user_1\n    view = OrganisationAPIView.as_view()\n    response = view(request)\n    self.assertEqual(response.status_code, 200)\n    # assert can see his own organisation\n    self.assertEqual(len(response.data), 1)\n    _organisation = response.data[0]\n    self.assertEqual(_organisation['id'], self.organisation_1.id)\n    self.assertEqual(_organisation['name'], self.organisation_1.name)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_organisations.TestOrganisationAPIView.test_organisation_list_for_national","title":"test_organisation_list_for_national","text":"<pre><code>test_organisation_list_for_national()\n</code></pre> <p>Test organisation for national roles</p> Source code in <code>django_project/frontend/tests/test_organisations.py</code> <pre><code>def test_organisation_list_for_national(self):\n    \"\"\"Test organisation for national roles\"\"\"\n    national_dc_group, _ = Group.objects.get_or_create(name=NATIONAL_DATA_CONSUMER)\n    factory = OrganisationAPIRequestFactory(self.organisation_2)\n    organisationUserFactory.create(\n        organisation=self.organisation_2,\n        user=self.user_1\n    )\n    self.user_1.groups.add(national_dc_group)\n\n    request = factory.get(\n        reverse('organisation')\n    )\n    request.user = self.user_1\n    view = OrganisationAPIView.as_view()\n    response = view(request)\n    self.assertEqual(response.status_code, 200)\n    # assert can see all organisations\n    self.assertEqual(len(response.data), 2)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_organisations.TestOrganisationAPIView.test_organisation_list_for_provincial","title":"test_organisation_list_for_provincial","text":"<pre><code>test_organisation_list_for_provincial()\n</code></pre> <p>Test organisation for provincial roles</p> Source code in <code>django_project/frontend/tests/test_organisations.py</code> <pre><code>def test_organisation_list_for_provincial(self):\n    \"\"\"Test organisation for provincial roles\"\"\"\n    provincial_ds_group, _ = Group.objects.get_or_create(name=PROVINCIAL_DATA_SCIENTIST)\n    PropertyFactory.create(\n        province=self.province,\n        organisation=self.organisation_1\n    )\n    self.user_1.user_profile.current_organisation = self.organisation_1\n    self.user_1.save()\n    self.user_1.groups.add(provincial_ds_group)\n    self.organisation_1.province = None\n    self.organisation_1.save()\n    factory = OrganisationAPIRequestFactory(self.organisation_1)\n    # test with empty province\n    request = factory.get(\n        reverse('organisation')\n    )\n    request.user = self.user_1\n    view = OrganisationAPIView.as_view()\n    response = view(request)\n    self.assertEqual(response.status_code, 200)\n    self.assertEqual(len(response.data), 0)\n    # test with empty current organisation\n    self.organisation_1.province = self.province\n    self.organisation_1.save()\n    self.user_1.user_profile.current_organisation = None\n    self.user_1.save()\n    request = factory.get(\n        reverse('organisation')\n    )\n    request.user = self.user_1\n    view = OrganisationAPIView.as_view()\n    response = view(request)\n    self.assertEqual(response.status_code, 200)\n    self.assertEqual(len(response.data), 0)\n    # test with existing province\n    self.user_1.user_profile.current_organisation = self.organisation_1\n    self.user_1.save()\n    request = factory.get(\n        reverse('organisation')\n    )\n    request.user = self.user_1\n    view = OrganisationAPIView.as_view()\n    response = view(request)\n    self.assertEqual(response.status_code, 200)\n    self.assertEqual(len(response.data), 1)\n    find_organisation = [org for org in response.data if org['id'] == self.organisation_1.id]\n    self.assertEqual(len(find_organisation), 1)\n    # assert can see diff organisation in same province\n    property_2 = PropertyFactory.create(\n        province=self.province,\n        organisation=self.organisation_2\n    )\n    request = factory.get(\n        reverse('organisation')\n    )\n    request.user = self.user_1\n    view = OrganisationAPIView.as_view()\n    response = view(request)\n    self.assertEqual(response.status_code, 200)\n    self.assertEqual(len(response.data), 2)\n    find_organisation = [org for org in response.data if org['id'] == self.organisation_1.id]\n    self.assertEqual(len(find_organisation), 1)\n    find_organisation = [org for org in response.data if org['id'] == self.organisation_2.id]\n    self.assertEqual(len(find_organisation), 1)\n    # assert cannot see organisation in other province\n    property_2.province = ProvinceFactory.create()\n    property_2.save()\n    request = factory.get(\n        reverse('organisation')\n    )\n    request.user = self.user_1\n    view = OrganisationAPIView.as_view()\n    response = view(request)\n    self.assertEqual(response.status_code, 200)\n    self.assertEqual(len(response.data), 1)\n    find_organisation = [org for org in response.data if org['id'] == self.organisation_1.id]\n    self.assertEqual(len(find_organisation), 1)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_property.TestPropertyAPIViews","title":"TestPropertyAPIViews","text":"<p>               Bases: <code>TestCase</code></p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_property.TestPropertyAPIViews.test_get_property_list_for_organisations","title":"test_get_property_list_for_organisations","text":"<pre><code>test_get_property_list_for_organisations()\n</code></pre> <p>Taxon list API test for organisations.</p> Source code in <code>django_project/frontend/tests/test_property.py</code> <pre><code>def test_get_property_list_for_organisations(self):\n    \"\"\"Taxon list API test for organisations.\"\"\"\n    organisation = organisationFactory.create(national=True)\n\n    user = User.objects.create_user(\n        username='testuserd',\n        password='testpasswordd'\n    )\n\n    user.user_profile.current_organisation = organisation\n    user.save()\n\n    property = PropertyFactory.create(\n        organisation=organisation,\n        name='PropertyA'\n    )\n\n    auth_headers = {\n        'HTTP_AUTHORIZATION': 'Basic ' +\n        base64.b64encode(b'testuserd:testpasswordd').decode('ascii'),\n    }\n\n    url = reverse(\"property-list\")\n    client = Client()\n    data = {\"organisation\":organisation.id}\n    response = client.get(url, data, **auth_headers)\n    self.assertEqual(response.status_code, 200)\n    self.assertEqual(len(response.data), 1)\n    self.assertEqual(response.data[0]['name'], \"PropertyA\")\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_property.TestPropertyAPIViews.test_property_list_multiple_organisations_data_contributor","title":"test_property_list_multiple_organisations_data_contributor","text":"<pre><code>test_property_list_multiple_organisations_data_contributor()\n</code></pre> <p>Test property list for data contributor, which will only return property directly related to their current organisation.</p> Source code in <code>django_project/frontend/tests/test_property.py</code> <pre><code>def test_property_list_multiple_organisations_data_contributor(self):\n    \"\"\"\n    Test property list for data contributor, which will only return\n    property directly related to their current organisation.\n    \"\"\"\n    organisation = organisationFactory.create(national=True)\n    organisation_2 = organisationFactory.create(national=False)\n\n    user = User.objects.create_user(\n        username='testuserd',\n        password='testpasswordd'\n    )\n\n    organisationUserFactory.create(\n        user=user,\n        organisation=organisation\n    )\n\n    user.user_profile.current_organisation = organisation\n    user.save()\n    # Create properties related to the organisation\n    PropertyFactory.create(\n        organisation=organisation,\n        name='PropertyA'\n    )\n    PropertyFactory.create(\n        organisation=organisation,\n        name='PropertyB'\n    )\n    PropertyFactory.create(\n        organisation=organisation_2,\n        name='PropertyC'\n    )\n\n    auth_headers = {\n        'HTTP_AUTHORIZATION': 'Basic ' +\n        base64.b64encode(b'testuserd:testpasswordd').decode('ascii'),\n    }\n\n    url = reverse(\"property-list\")\n    client = Client()\n    response = client.get(\n        url,\n        {'organisation': f'{organisation.id}, {organisation_2.id}'},\n        **auth_headers\n    )\n\n    # PropertyC is not returned because it does not belong to\n    # user's current organisation\n    self.assertEqual(response.status_code, 200)\n    self.assertEqual(len(response.data), 3)\n    self.assertEqual(response.data[0]['name'], \"PropertyA\")\n    self.assertEqual(response.data[1]['name'], \"PropertyB\")\n    self.assertEqual(response.data[2]['name'], \"PropertyC\")\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_property.TestPropertyAPIViews.test_property_list_multiple_organisations_data_scientist","title":"test_property_list_multiple_organisations_data_scientist","text":"<pre><code>test_property_list_multiple_organisations_data_scientist()\n</code></pre> <p>Test property list for data scientist, which will return all property related to the organisation ID supplied in parameter.</p> Source code in <code>django_project/frontend/tests/test_property.py</code> <pre><code>def test_property_list_multiple_organisations_data_scientist(self):\n    \"\"\"\n    Test property list for data scientist, which will return\n    all property related to the organisation ID supplied in parameter.\n    \"\"\"\n    organisation = organisationFactory.create(national=True)\n    organisation_2 = organisationFactory.create(national=False)\n\n    user = User.objects.create_user(\n        username='testuserd',\n        password='testpasswordd'\n    )\n\n    user.user_profile.current_organisation = organisation\n    user.save()\n    # Create properties related to the organisation\n    PropertyFactory.create(\n        organisation=organisation,\n        name='PropertyA'\n    )\n    PropertyFactory.create(\n        organisation=organisation,\n        name='PropertyB'\n    )\n    PropertyFactory.create(\n        organisation=organisation_2,\n        name='PropertyC'\n    )\n\n    auth_headers = {\n        'HTTP_AUTHORIZATION': 'Basic ' +\n        base64.b64encode(b'testuserd:testpasswordd').decode('ascii'),\n    }\n\n    url = reverse(\"property-list\")\n    client = Client()\n    response = client.get(\n        url,\n        {'organisation': f'{organisation.id}, {organisation_2.id}'},\n        **auth_headers\n    )\n    self.assertEqual(response.status_code, 200)\n    self.assertEqual(len(response.data), 3)\n    self.assertEqual(response.data[0]['name'], \"PropertyA\")\n    self.assertEqual(response.data[1]['name'], \"PropertyB\")\n    self.assertEqual(response.data[2]['name'], \"PropertyC\")\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_statistical_model.StatisticalModelAdminTestCase","title":"StatisticalModelAdminTestCase","text":"<p>               Bases: <code>TestCase</code></p> <p>StatisticalModel admin test case.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_templatetags.SentryDsnTagTestCase","title":"SentryDsnTagTestCase","text":"<p>               Bases: <code>TestCase</code></p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_templatetags.SentryDsnTagTestCase.render_template","title":"render_template","text":"<pre><code>render_template(string, context=None)\n</code></pre> <p>Helper method to render templates</p> Source code in <code>django_project/frontend/tests/test_templatetags.py</code> <pre><code>def render_template(self, string, context=None):\n    \"\"\"Helper method to render templates\"\"\"\n    context = context or {}\n    t = Template(string)\n    return t.render(Context(context))\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_users_view.OrganisationUsersViewTest","title":"OrganisationUsersViewTest","text":"<p>               Bases: <code>TestCase</code></p> <p>This covers the testcases on the view functions</p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_users_view.UserApiTest","title":"UserApiTest","text":"<p>               Bases: <code>TestCase</code></p>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_users_view.UserApiTest.test_get_user_info","title":"test_get_user_info","text":"<pre><code>test_get_user_info()\n</code></pre> <p>Test getting non superuser user info.</p> Source code in <code>django_project/frontend/tests/test_users_view.py</code> <pre><code>def test_get_user_info(self):\n    \"\"\"\n    Test getting non superuser user info.\n    \"\"\"\n    client = Client()\n    user = User.objects.create_user(\n        username='testuser',\n        password='testpassword',\n        email='test@gmail.com'\n    )\n    group = GroupF.create(name=PROVINCIAL_DATA_CONSUMER)\n    content_type = ContentType.objects.get_for_model(ExtendedGroup)\n    all_permissions = Permission.objects.filter(content_type=content_type)\n    group.permissions.add(all_permissions[0])\n\n    user.groups.add(group)\n    login = client.login(\n        username='testuser',\n        password='testpassword'\n    )\n    self.assertTrue(login, True)\n    device = TOTPDevice(\n        user=user,\n        name='device_name'\n    )\n    device.save()\n\n    # Test with no organisation\n    response = client.get('/api/user-info/')\n    self.assertEqual(response.status_code, 200)\n\n    self.assertTrue(PROVINCIAL_DATA_CONSUMER in response.data['user_roles'])\n\n    # Test with organisation\n    organisation = Organisation.objects.create(\n        name=\"test_organisation\",\n        national=True\n    )\n    user.user_profile.current_organisation = organisation\n    user.save()\n\n    response = client.get('/api/user-info/')\n    self.assertEqual(response.data['current_organisation_id'], organisation.id)\n    self.assertEqual(response.data['current_organisation'], organisation.name)\n\n    # Permission 2 should not be in the user permisions because:\n    # - It is not assigned to user's group\n    # - It is not allowed for organisation member or manager\n    self.assertEqual(\n        sorted(response.data['user_permissions']),\n        sorted([\n            all_permissions[0].name,\n            'Can view province report',\n            'Can view report as data consumer',\n            'Can view report as provincial data consumer'\n        ])\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_users_view.UserApiTest.test_get_user_info_superuser","title":"test_get_user_info_superuser","text":"<pre><code>test_get_user_info_superuser()\n</code></pre> <p>Test getting superuser user info. All permissions should be assigned.</p> Source code in <code>django_project/frontend/tests/test_users_view.py</code> <pre><code>def test_get_user_info_superuser(self):\n    \"\"\"\n    Test getting superuser user info. All permissions should be assigned.\n    \"\"\"\n    client = Client()\n    user = User.objects.create_user(\n        username='testuser',\n        password='testpassword',\n        email='test@gmail.com',\n        is_superuser=True\n    )\n    content_type = ContentType.objects.get_for_model(ExtendedGroup)\n    all_permissions = Permission.objects.filter(content_type=content_type)\n    login = client.login(\n        username='testuser',\n        password='testpassword'\n    )\n    self.assertTrue(login, True)\n    device = TOTPDevice(\n        user=user,\n        name='device_name'\n    )\n    device.save()\n\n    # Test with no organisation\n    response = client.get('/api/user-info/')\n    self.assertEqual(response.status_code, 200)\n    self.assertEqual(\n        response.json()['user_permissions'],\n        sorted(list(\n            all_permissions.values_list('name', flat=True).exclude(\n                name__in=DATA_CONSUMERS_PERMISSIONS\n            )\n        ))\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.tests.test_utils_vector_tile.TestVectorTileUtils","title":"TestVectorTileUtils","text":"<p>               Bases: <code>TestCase</code></p> <p>Test Vector tile utils.</p>"},{"location":"developer/manual/frontend/#utils","title":"Utils","text":"<p>Helper function for colors.</p> <p>Reference: https://github.com/bsouthga/blog/blob /master/public/posts/color-gradients-with-python.md</p> <p>Helper function for map.</p> <p>Common functions for parcel.</p> <p>Utilities function for process management.</p> <p>Utility functions for shapefile.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.celery.cancel_task","title":"cancel_task","text":"<pre><code>cancel_task(task_id)\n</code></pre> <p>Cancel task if it's ongoing.</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>str</code> <p>task identifier</p> required Source code in <code>django_project/frontend/utils/celery.py</code> <pre><code>def cancel_task(task_id: str):\n    \"\"\"\n    Cancel task if it's ongoing.\n\n    :param task_id: task identifier\n    \"\"\"\n    try:\n        res = AsyncResult(task_id)\n        if not res.ready():\n            # find if there is running task and stop it\n            app.control.revoke(\n                task_id,\n                terminate=True,\n                signal='SIGKILL'\n            )\n    except Exception as ex:\n        logger.error(f'Failed cancel_task: {task_id}')\n        logger.error(ex)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.color.RGB_to_hex","title":"RGB_to_hex","text":"<pre><code>RGB_to_hex(RGB)\n</code></pre> <p>[255,255,255] -&gt; \"#FFFFFF\"</p> Source code in <code>django_project/frontend/utils/color.py</code> <pre><code>def RGB_to_hex(RGB):\n    ''' [255,255,255] -&gt; \"#FFFFFF\" '''\n    # Components need to be integers for hex to make sense\n    RGB = [int(x) for x in RGB]\n    return \"#\" + \"\".join([\"0{0:x}\".format(v) if v &lt; 16 else\n                          \"{0:x}\".format(v) for v in RGB])\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.color.color_dict","title":"color_dict","text":"<pre><code>color_dict(gradient)\n</code></pre> <p>Takes in a list of RGB sub-lists and returns dictionary of colors in RGB and hex form for use in a graphing function defined later on</p> Source code in <code>django_project/frontend/utils/color.py</code> <pre><code>def color_dict(gradient):\n    ''' Takes in a list of RGB sub-lists and returns dictionary of\n      colors in RGB and hex form for use in a graphing function\n      defined later on '''\n    return {\"hex\": [RGB_to_hex(RGB) for RGB in gradient],\n            \"r\": [RGB[0] for RGB in gradient],\n            \"g\": [RGB[1] for RGB in gradient],\n            \"b\": [RGB[2] for RGB in gradient]}\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.color.hex_to_RGB","title":"hex_to_RGB","text":"<pre><code>hex_to_RGB(hex)\n</code></pre> <p>\"#FFFFFF\" -&gt; [255,255,255]</p> Source code in <code>django_project/frontend/utils/color.py</code> <pre><code>def hex_to_RGB(hex):\n    ''' \"#FFFFFF\" -&gt; [255,255,255] '''\n    # Pass 16 to the integer function for change of base\n    return [int(hex[i:i + 2], 16) for i in range(1, 6, 2)]\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.color.linear_gradient","title":"linear_gradient","text":"<pre><code>linear_gradient(start_hex, finish_hex='#FFFFFF', n=10)\n</code></pre> <p>returns a gradient list of (n) colors between two hex colors. start_hex and finish_hex should be the full six-digit color string, inlcuding the number sign (\"#FFFFFF\")</p> Source code in <code>django_project/frontend/utils/color.py</code> <pre><code>def linear_gradient(start_hex, finish_hex=\"#FFFFFF\", n=10):\n    ''' returns a gradient list of (n) colors between\n      two hex colors. start_hex and finish_hex\n      should be the full six-digit color string,\n      inlcuding the number sign (\"#FFFFFF\") '''\n    # Starting and ending colors in RGB form\n    s = hex_to_RGB(start_hex)\n    f = hex_to_RGB(finish_hex)\n    # Initilize a list of the output colors with the starting color\n    RGB_list = [s]\n    # Calcuate a color at each evenly spaced value of t from 1 to n\n    for t in range(1, n):\n        # Interpolate RGB vector for color at the current value of t\n        curr_vector = [\n            int(s[j] + (float(t) / (n - 1)) * (f[j] - s[j]))\n            for j in range(3)\n        ]\n        # Add it to our list of output colors\n        RGB_list.append(curr_vector)\n\n    return color_dict(RGB_list)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.data_table.activity_report","title":"activity_report","text":"<pre><code>activity_report(queryset, request)\n</code></pre> <p>Generate property reports based on the user's request. Params:     queryset (QuerySet): Properties queryset to generate reports from.     request: The HTTP request object.</p> Source code in <code>django_project/frontend/utils/data_table.py</code> <pre><code>def activity_report(queryset: QuerySet, request) -&gt; Dict[str, List[Dict]]:\n    \"\"\"\n    Generate property reports based on the user's request.\n    Params:\n        queryset (QuerySet): Properties queryset to generate reports from.\n        request: The HTTP request object.\n    \"\"\"\n    filters = get_report_filter(request, ACTIVITY_REPORT)\n    activity_field = (\n        'annualpopulationperactivity__'\n        'activity_type_id__in'\n    )\n    if activity_field in filters:\n        activity_type_ids = filters[activity_field]\n        del filters[activity_field]\n    else:\n        activity_type_ids = ActivityType.objects.values_list('id', flat=True)\n\n    activity_reports = {}\n    valid_activities = ActivityType.objects.filter(id__in=activity_type_ids)\n    for activity in valid_activities:\n        activity_data = AnnualPopulationPerActivity.objects.filter(\n            annual_population__property__in=queryset,\n            activity_type=activity,\n            **filters\n        )\n        serializer = ActivityReportSerializer(\n            activity_data,\n            many=True,\n            activity=activity\n        )\n        activity_reports[activity.name] = serializer.data\n\n    activity_reports = {k: v for k, v in activity_reports.items() if v}\n\n    return activity_reports\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.data_table.activity_report_rows","title":"activity_report_rows","text":"<pre><code>activity_report_rows(queryset, request)\n</code></pre> <p>Generate property reports for csv and Excel file based on the user's request. Params:     queryset (QuerySet): Properties queryset to generate reports from.     request: The HTTP request object.</p> Source code in <code>django_project/frontend/utils/data_table.py</code> <pre><code>def activity_report_rows(queryset: QuerySet, request) -&gt; Dict[str, List[Dict]]:\n    \"\"\"\n    Generate property reports for csv and Excel file\n    based on the user's request.\n    Params:\n        queryset (QuerySet): Properties queryset to generate reports from.\n        request: The HTTP request object.\n    \"\"\"\n    filters = get_report_filter(request, ACTIVITY_REPORT)\n    activity_field = (\n        'annualpopulationperactivity__'\n        'activity_type_id__in'\n    )\n    if activity_field in filters:\n        activity_type_ids = filters[activity_field]\n        del filters[activity_field]\n    else:\n        activity_type_ids = ActivityType.objects.values_list('id', flat=True)\n    valid_activities = ActivityType.objects.filter(id__in=activity_type_ids)\n    activity_data = AnnualPopulationPerActivity.objects.filter(\n        annual_population__property__in=queryset,\n        **filters\n    )\n    years = activity_data.order_by().values_list('year', flat=True).distinct()\n    properties = activity_data.order_by(\n    ).values_list('annual_population__property__name', flat=True).distinct()\n    rows = []\n\n    for year in list(years):\n        for property_name in list(properties):\n            activity_report_one_row = {}\n            for activity in valid_activities:\n                activity_data = AnnualPopulationPerActivity.objects.filter(\n                    annual_population__property__name=property_name,\n                    activity_type=activity,\n                    year=year,\n                    **filters\n                )\n                serializer = ActivityReportSerializer(\n                    activity_data,\n                    many=True,\n                    activity=activity\n                )\n                total_field = activity.name + \"_total\"\n                adult_male_field = activity.name + \"_adult_male\"\n                adult_female_field = activity.name + \"_adult_female\"\n                juvenile_male_field = activity.name + \"_juvenile_male\"\n                juvenile_female_field = activity.name + \"_juvenile_female\"\n                for activity_data in serializer.data:\n                    activity_report_one_row['property_name'] = \\\n                        activity_data['property_name']\n                    activity_report_one_row['scientific_name'] = \\\n                        activity_data['scientific_name']\n                    activity_report_one_row['common_name'] = \\\n                        activity_data['common_name']\n                    activity_report_one_row['year'] = year\n                    activity_report_one_row[total_field] = \\\n                        activity_data['total']\n                    activity_report_one_row[adult_male_field] = \\\n                        activity_data['adult_male']\n                    activity_report_one_row[juvenile_male_field] = \\\n                        activity_data['adult_female']\n                    activity_report_one_row[adult_female_field] = \\\n                        activity_data['juvenile_male']\n                    activity_report_one_row[juvenile_female_field] = \\\n                        activity_data['juvenile_female']\n\n            if activity_report_one_row:\n                rows.append(activity_report_one_row)\n    return rows\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.data_table.common_filters","title":"common_filters","text":"<pre><code>common_filters(request, user_roles)\n</code></pre> <p>Generate common filters for data retrieval based on the user's role and request parameters.</p> <p>Params:     request : The HTTP request object containing query parameters.     user_roles : The roles of the user.</p> Source code in <code>django_project/frontend/utils/data_table.py</code> <pre><code>def common_filters(request: HttpRequest, user_roles: List[str]) -&gt; Dict:\n    \"\"\"\n    Generate common filters for data retrieval based on\n    the user's role and request parameters.\n\n    Params:\n        request : The HTTP request object containing query parameters.\n        user_roles : The roles of the user.\n    \"\"\"\n    filters = {}\n    properties = Property.objects.all()\n\n    start_year = get_param_from_request(request, \"start_year\")\n    if start_year:\n        end_year = get_param_from_request(request, \"end_year\")\n        filters[\"year__range\"] = (\n            start_year, end_year\n        )\n\n    property_param = get_param_from_request(request, \"property\")\n    if property_param:\n        properties = properties.filter(\n            id__in=property_param.split(',')\n        )\n\n    spatial_filter_values = get_param_from_request(\n        request,\n        'spatial_filter_values',\n        ''\n    ).split(',')\n\n    spatial_filter_values = list(\n        filter(None, spatial_filter_values)\n    )\n\n    if spatial_filter_values:\n        spatial_qs = SpatialDataValueModel.objects.filter(\n            spatial_data__property=OuterRef('pk'),\n            context_layer_value__in=spatial_filter_values\n        )\n        properties = properties.filter(\n            Exists(spatial_qs)\n        )\n\n    activity = get_param_from_request(request, \"activity\", \"\")\n    activity = urllib.parse.unquote(activity)\n    if activity:\n        activity_qs = AnnualPopulationPerActivity.objects.filter(\n            annual_population=OuterRef('pk'),\n            activity_type_id__in=[\n                int(act) for act in activity.split(',')\n            ]\n        )\n        filters['annualpopulationperactivity__activity_type_id__in'] = (\n            Exists(activity_qs)\n        )\n\n    if PROVINCIAL_DATA_CONSUMER in user_roles:\n        organisation_id = get_current_organisation_id(request.user)\n        if organisation_id:\n            organisation = Organisation.objects.get(id=organisation_id)\n            properties = properties.filter(\n                province=organisation.province\n            )\n\n    filters['property__id__in'] = list(\n        properties.values_list('id', flat=True)\n    )\n\n    return filters\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.data_table.data_table_reports","title":"data_table_reports","text":"<pre><code>data_table_reports(queryset, request, user_roles)\n</code></pre> <p>Generate data table reports based on the user's request. Params:     queryset (QuerySet): The initial queryset to generate reports from.     request: The HTTP request object.</p> Source code in <code>django_project/frontend/utils/data_table.py</code> <pre><code>def data_table_reports(queryset: QuerySet, request, user_roles) -&gt; List[Dict]:\n    \"\"\"\n    Generate data table reports based on the user's request.\n    Params:\n        queryset (QuerySet): The initial queryset to generate reports from.\n        request: The HTTP request object.\n    \"\"\"\n    reports_list = get_param_from_request(request, \"reports\", None)\n    reports = []\n\n    if reports_list:\n        reports_list = reports_list.split(\",\")\n        report_functions = {\n            ACTIVITY_REPORT: activity_report,\n            PROPERTY_REPORT: property_report,\n            SAMPLING_REPORT: sampling_report,\n            SPECIES_REPORT: species_report,\n        }\n\n        for report_name in reports_list:\n            if report_name in report_functions:\n                report_data = report_functions[report_name](queryset, request)\n                reports.append(\n                    {report_name: report_data}\n                ) if report_data else []\n\n    return reports\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.data_table.national_level_activity_report","title":"national_level_activity_report","text":"<pre><code>national_level_activity_report(queryset, request)\n</code></pre> <p>Generate a national-level activity report based on the provided queryset and request parameters.</p> <p>Args:     queryset : The initial queryset containing species data.     request : The HTTP request object containing query parameters.</p> Source code in <code>django_project/frontend/utils/data_table.py</code> <pre><code>def national_level_activity_report(\n        queryset: QuerySet, request: HttpRequest\n) -&gt; List[Dict]:\n    \"\"\"\n    Generate a national-level activity report based on\n    the provided queryset and request parameters.\n\n    Args:\n        queryset : The initial queryset containing species data.\n        request : The HTTP request object containing query parameters.\n\n    \"\"\"\n    user_roles = get_user_roles(request.user)\n    filters = {}\n\n    start_year = get_param_from_request(request, \"start_year\")\n    if start_year:\n        end_year = get_param_from_request(request, \"end_year\")\n        filters[\n            \"annual_population__year__range\"\n        ] = (start_year, end_year)\n\n    property_param = get_param_from_request(request, \"property\")\n    if property_param:\n        property_list = property_param.split(\",\")\n        filters[\"annual_population__property__id__in\"] = property_list\n\n    if PROVINCIAL_DATA_CONSUMER in user_roles:\n        organisation_id = get_current_organisation_id(request.user)\n        if organisation_id:\n            organisation = Organisation.objects.get(id=organisation_id)\n            filters[\n                \"annual_population__property__province\"\n            ] = organisation.province\n\n    serializer = NationalLevelActivityReport(\n        queryset,\n        many=True,\n        context={\n            'filters': filters\n        }\n    )\n    return serializer.data[0] if serializer.data else []\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.data_table.national_level_property_report","title":"national_level_property_report","text":"<pre><code>national_level_property_report(queryset, request)\n</code></pre> <p>Generate a national-level property report based on the provided queryset and request parameters.</p> <p>Args:     queryset : The initial queryset containing species data.     request : The HTTP request object containing query parameters.</p> Source code in <code>django_project/frontend/utils/data_table.py</code> <pre><code>def national_level_property_report(\n        queryset: QuerySet, request: HttpRequest\n) -&gt; List[Dict]:\n    \"\"\"\n    Generate a national-level property report based on\n    the provided queryset and request parameters.\n\n    Args:\n        queryset : The initial queryset containing species data.\n        request : The HTTP request object containing query parameters.\n\n    \"\"\"\n    user_roles = get_user_roles(request.user)\n    filters = common_filters(request, user_roles)\n    serializer = NationalLevelPropertyReport(\n        queryset,\n        many=True,\n        context={\n            'filters': filters\n        }\n    )\n\n    return serializer.data[0] if serializer.data else []\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.data_table.national_level_province_report","title":"national_level_province_report","text":"<pre><code>national_level_province_report(queryset, request)\n</code></pre> <p>Generate a national-level species report based on the provided queryset and request parameters.</p> <p>Args:     queryset : The initial queryset containing species data.     request : The HTTP request object containing query parameters.</p> Source code in <code>django_project/frontend/utils/data_table.py</code> <pre><code>def national_level_province_report(\n        queryset: QuerySet, request: HttpRequest\n) -&gt; List[Dict]:\n    \"\"\"\n    Generate a national-level species report based on\n    the provided queryset and request parameters.\n\n    Args:\n        queryset : The initial queryset containing species data.\n        request : The HTTP request object containing query parameters.\n\n    \"\"\"\n    user_roles = get_user_roles(request.user)\n    filters = common_filters(request, user_roles)\n    serializer = NationalLevelProvinceReport(\n        queryset,\n        many=True,\n        context={\n            'filters': filters\n        }\n    )\n    data_dict = {}\n    provinces = set()\n    for d in serializer.data:\n        data = d['province_data']\n        for year, values in data.items():\n            if year in data_dict:\n                data_dict[year].append(values)\n            else:\n                data_dict[year] = [values]\n        provinces.update(d['province_set'])\n    years = list(data_dict.keys())\n    years.sort(reverse=True)\n    data = []\n    for year in years:\n        items = data_dict[year]\n        for item in items:\n            dt_prov_fields = {\n                key for key in item.keys() if\n                key.startswith('total_population')\n            }\n            item.update(\n                {key: 0 for key in provinces.difference(dt_prov_fields)}\n            )\n            data.append(item)\n    return data\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.data_table.national_level_species_report","title":"national_level_species_report","text":"<pre><code>national_level_species_report(queryset, request)\n</code></pre> <p>Generate a national-level species report based on the provided queryset and request parameters.</p> <p>Args:     queryset : The initial queryset containing species data.     request : The HTTP request object containing query parameters.</p> Source code in <code>django_project/frontend/utils/data_table.py</code> <pre><code>def national_level_species_report(\n        queryset: QuerySet, request: HttpRequest\n) -&gt; List[Dict]:\n    \"\"\"\n    Generate a national-level species report based on\n    the provided queryset and request parameters.\n\n    Args:\n        queryset : The initial queryset containing species data.\n        request : The HTTP request object containing query parameters.\n\n    \"\"\"\n    user_roles = get_user_roles(request.user)\n    filters = common_filters(request, user_roles)\n    activity_field = (\n        'annualpopulationperactivity__activity_type_id__in'\n    )\n    activity_filter = None\n    if activity_field in filters:\n        activity_filter = filters[activity_field]\n        del filters[activity_field]\n    report_data = AnnualPopulation.objects. \\\n        filter(**filters, taxon__in=queryset)\n    if activity_filter:\n        report_data = report_data.filter(activity_filter)\n    report_data = report_data.values(\n        'taxon__common_name_verbatim',\n        'taxon__scientific_name',\n        'year'\n    ).annotate(\n        common_name=F(\"taxon__common_name_verbatim\"),\n        scientific_name=F(\"taxon__scientific_name\"),\n        total_property_area=Sum(\"property__property_size_ha\"),\n        total_area_available=Sum(\"area_available_to_species\"),\n        total_population=Sum(\n            \"total\"\n        ),\n        adult_male_total_population=Sum(\n            \"adult_male\"\n        ),\n        adult_female_total_population=Sum(\n            \"adult_female\"\n        ),\n        sub_adult_male_total_population=Sum(\n            \"sub_adult_male\"\n        ),\n        sub_adult_female_total_population=Sum(\n            \"sub_adult_female\"\n        ),\n        juvenile_male_total_population=Sum(\n            \"juvenile_male\"\n        ),\n        juvenile_female_total_population=Sum(\n            \"juvenile_female\"\n        ),\n    ).order_by('-year')\n    return NationalLevelSpeciesReport(report_data, many=True).data\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.data_table.national_level_user_table","title":"national_level_user_table","text":"<pre><code>national_level_user_table(queryset, request)\n</code></pre> <p>Generate national-level reports for a user based on their role.</p> <p>Params:     queryset : The initial queryset for data retrieval.     request : The HTTP request object containing query parameters.</p> Source code in <code>django_project/frontend/utils/data_table.py</code> <pre><code>def national_level_user_table(\n        queryset: QuerySet, request: HttpRequest\n) -&gt; List[Dict]:\n    \"\"\"\n    Generate national-level reports for a user based on their role.\n\n    Params:\n        queryset : The initial queryset for data retrieval.\n        request : The HTTP request object containing query parameters.\n    \"\"\"\n    user_roles = get_user_roles(request.user)\n    reports_list = get_param_from_request(request, \"reports\")\n    reports = []\n    if reports_list:\n        reports_list = reports_list.split(\",\")\n        report_functions = {\n            PROPERTY_REPORT: national_level_property_report,\n            ACTIVITY_REPORT: national_level_activity_report,\n            SPECIES_REPORT: national_level_species_report,\n        }\n\n        if PROVINCIAL_DATA_CONSUMER not in user_roles:\n            report_functions[\n                PROVINCE_REPORT\n            ] = national_level_province_report\n\n        for report_name in reports_list:\n            if report_name in report_functions:\n                report_data = report_functions[\n                    report_name\n                ](queryset, request)\n                if report_data:\n                    reports.append({report_name: report_data})\n\n    else:\n        data = national_level_property_report(queryset, request)\n        if data:\n            reports.append({PROPERTY_REPORT: data})\n\n    return reports\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.data_table.property_report","title":"property_report","text":"<pre><code>property_report(queryset, request)\n</code></pre> <p>Generate property reports based on the user's request. Params:     queryset (QuerySet): Properties queryset to generate reports from.     request: The HTTP request object.</p> Source code in <code>django_project/frontend/utils/data_table.py</code> <pre><code>def property_report(queryset: QuerySet, request) -&gt; List:\n    \"\"\"\n    Generate property reports based on the user's request.\n    Params:\n        queryset (QuerySet): Properties queryset to generate reports from.\n        request: The HTTP request object.\n    \"\"\"\n    filters = get_report_filter(request, PROPERTY_REPORT)\n    area_available_values = AnnualPopulation.objects.filter(\n        property__in=queryset,\n        **filters\n    ).distinct('property', 'year')\n\n    property_reports = PropertyReportSerializer(\n        area_available_values, many=True\n    ).data\n\n    return property_reports\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.data_table.sampling_report","title":"sampling_report","text":"<pre><code>sampling_report(queryset, request)\n</code></pre> <p>Generate sampling reports based on the user's request. Params:     queryset (QuerySet): Properties queryset to generate reports from.     request: The HTTP request object.</p> Source code in <code>django_project/frontend/utils/data_table.py</code> <pre><code>def sampling_report(queryset: QuerySet, request) -&gt; List:\n    \"\"\"\n    Generate sampling reports based on the user's request.\n    Params:\n        queryset (QuerySet): Properties queryset to generate reports from.\n        request: The HTTP request object.\n    \"\"\"\n    filters = get_report_filter(request, SAMPLING_REPORT)\n\n    sampling_reports_data = AnnualPopulation.objects.filter(\n        property__in=queryset,\n        **filters\n    )\n    sampling_reports = SamplingReportSerializer(\n        sampling_reports_data,\n        many=True\n    ).data\n\n    return sampling_reports\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.data_table.species_report","title":"species_report","text":"<pre><code>species_report(queryset, request)\n</code></pre> <p>Generate species reports based on the user's request. Params:     queryset (QuerySet): Properties queryset to generate reports from.     request: The HTTP request object.</p> Source code in <code>django_project/frontend/utils/data_table.py</code> <pre><code>def species_report(queryset: QuerySet, request) -&gt; List:\n    \"\"\"\n    Generate species reports based on the user's request.\n    Params:\n        queryset (QuerySet): Properties queryset to generate reports from.\n        request: The HTTP request object.\n    \"\"\"\n    filters = get_report_filter(request, SPECIES_REPORT)\n    species_population_data = AnnualPopulation.objects.select_related(\n        'taxon', 'property', 'property__organisation', 'user'\n    ).filter(\n        property_id__in=queryset.values_list('id', flat=True),\n        **filters\n    ).distinct()\n    if get_param_from_request(request, \"file\"):\n        species_reports = BaseSpeciesReportSerializer(\n            species_population_data, many=True,\n        ).data\n    else:\n        # fetch organisations ids where user is manager\n        managed_ids = OrganisationRepresentative.objects.filter(\n            user=request.user\n        ).values_list('organisation_id', flat=True)\n        species_reports = SpeciesReportSerializer(\n            species_population_data,\n            many=True,\n            context={\n                'user': request.user,\n                'managed_ids': managed_ids\n            }\n        ).data\n    return species_reports\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.data_table.write_report_to_rows","title":"write_report_to_rows","text":"<pre><code>write_report_to_rows(\n    queryset, request, report_functions=None\n)\n</code></pre> <p>Write report rows.</p> Source code in <code>django_project/frontend/utils/data_table.py</code> <pre><code>def write_report_to_rows(queryset, request, report_functions=None):\n    \"\"\"\n    Write report rows.\n    \"\"\"\n    reports_list = get_param_from_request(request, \"reports\", None)\n    request_dir = str(uuid.uuid4())\n    path = os.path.join(\n        settings.MEDIA_ROOT,\n        \"download_data\",\n        request_dir\n    )\n    if not os.path.exists(path):\n        os.makedirs(path)\n    if reports_list:\n        reports_list = reports_list.split(\",\")\n\n        default_report_functions = {\n            ACTIVITY_REPORT: activity_report_rows,\n            PROPERTY_REPORT: property_report,\n            SAMPLING_REPORT: sampling_report,\n            SPECIES_REPORT: species_report,\n            PROVINCE_REPORT: national_level_province_report\n        }\n        report_functions = report_functions \\\n            if report_functions \\\n            else default_report_functions\n        if get_param_from_request(request, 'file') == 'xlsx':\n            filename = (\n                'data_report' + '.' + get_param_from_request(request, 'file')\n            )\n            path_file = os.path.join(path, filename)\n            if os.path.exists(path_file):\n                os.remove(path_file)\n\n            with pd.ExcelWriter(path_file, engine='openpyxl', mode='w') \\\n                    as writer:\n                for report_name in reports_list:\n                    logger.log(\n                        level=logging.ERROR,\n                        msg=str(report_name)\n                    )\n                    if report_name in report_functions:\n                        if report_name == PROVINCE_REPORT:\n                            taxon_qs = get_taxon_queryset(request)\n                            rows = report_functions[\n                                report_name\n                            ](taxon_qs, request)\n                        else:\n                            rows = report_functions[\n                                report_name\n                            ](queryset, request)\n                        dataframe = pd.DataFrame(rows)\n                        dataframe.to_excel(\n                            writer,\n                            sheet_name=report_name,\n                            index=False\n                        )\n                return settings.MEDIA_URL + 'download_data/' \\\n                    + request_dir + '/' + os.path.basename(path_file)\n\n        csv_reports = []\n        for report_name in reports_list:\n            if report_name in report_functions:\n                if report_name == PROVINCE_REPORT:\n                    taxon_qs = get_taxon_queryset(request)\n                    rows = report_functions[\n                        report_name\n                    ](taxon_qs, request)\n                else:\n                    rows = report_functions[report_name](queryset, request)\n                dataframe = pd.DataFrame(rows)\n                filename = \"data_report_\" + report_name\n                filename = (\n                    filename + '.' + get_param_from_request(request, 'file')\n                )\n                path_file = os.path.join(path, filename)\n\n                if os.path.exists(path_file):\n                    os.remove(path_file)\n                dataframe.to_csv(path_file)\n                csv_reports.append(path_file)\n\n        if len(csv_reports) == 1:\n            return settings.MEDIA_URL + 'download_data/' \\\n                + request_dir + '/' + os.path.basename(csv_reports[0])\n        path_zip = os.path.join(path, 'data_report.zip')\n        if os.path.exists(path_zip):\n            os.remove(path_zip)\n        with ZipFile(path_zip, 'w') as zip:\n            for file in csv_reports:\n                zip.write(file, os.path.basename(file))\n        return settings.MEDIA_URL + 'download_data/' \\\n            + request_dir + '/' + os.path.basename(path_zip)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.map.create_map_materialized_view","title":"create_map_materialized_view","text":"<pre><code>create_map_materialized_view(view_name, sql, query_values)\n</code></pre> <p>Execute sql to create materialized view.</p> <p>Parameters:</p> Name Type Description Default <code>view_name</code> <code>str</code> <p>name of the materialized view</p> required <code>sql</code> <code>str</code> <p>the SQL for the materialized view</p> required <code>query_values</code> <p>list of query values</p> required Source code in <code>django_project/frontend/utils/map.py</code> <pre><code>def create_map_materialized_view(view_name: str, sql: str, query_values):\n    \"\"\"\n    Execute sql to create materialized view.\n\n    :param view_name: name of the materialized view\n    :param sql: the SQL for the materialized view\n    :param query_values: list of query values\n    \"\"\"\n    view_sql = (\n        \"\"\"\n        CREATE MATERIALIZED VIEW \"{view_name}\"\n        AS {sql}\n        \"\"\"\n    ).format(\n        view_name=view_name,\n        sql=sql\n    )\n    index_sql = (\n        \"\"\"\n        CREATE UNIQUE INDEX \"{view_name}_idx\" ON \"{view_name}\" (id)\n        \"\"\"\n    ).format(view_name=view_name)\n    with connection.cursor() as cursor:\n        cursor.execute(view_sql, query_values)\n        cursor.execute(index_sql)\n        if '_province' in view_name:\n            # need to add index by name\n            index_sql = (\n                \"\"\"\n                CREATE UNIQUE INDEX \"{view_name}_name_idx\"\n                ON \"{view_name}\" (name)\n                \"\"\"\n            ).format(view_name=view_name)\n            cursor.execute(index_sql)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.map.delete_expired_map_materialized_view","title":"delete_expired_map_materialized_view","text":"<pre><code>delete_expired_map_materialized_view()\n</code></pre> <p>Remove expired materialized view.</p> Source code in <code>django_project/frontend/utils/map.py</code> <pre><code>def delete_expired_map_materialized_view():\n    \"\"\"Remove expired materialized view.\"\"\"\n    sessions = MapSession.objects.filter(\n        expired_date__lt=timezone.now()\n    )\n    total_count = sessions.count()\n    for session in sessions:\n        session.delete()\n    return total_count\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.map.drop_map_materialized_view","title":"drop_map_materialized_view","text":"<pre><code>drop_map_materialized_view(view_name)\n</code></pre> <p>Execute sql to drop materialized view.</p> <p>Parameters:</p> Name Type Description Default <code>view_name</code> <code>str</code> <p>name of the materialized view</p> required Source code in <code>django_project/frontend/utils/map.py</code> <pre><code>def drop_map_materialized_view(view_name: str):\n    \"\"\"\n    Execute sql to drop materialized view.\n\n    :param view_name: name of the materialized view\n    \"\"\"\n    view_sql = (\n        \"\"\"\n        DROP MATERIALIZED VIEW IF EXISTS \"{view_name}\"\n        \"\"\"\n    ).format(view_name=view_name)\n    with connection.cursor() as cursor:\n        cursor.execute(view_sql)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.map.generate_map_view","title":"generate_map_view","text":"<pre><code>generate_map_view(\n    session,\n    is_province_view,\n    filter_year=None,\n    filter_species_name=None,\n    filter_organisation=None,\n    filter_activity=None,\n    filter_spatial=None,\n    filter_property=None,\n)\n</code></pre> <p>Generate materialized view from map filter session.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>MapSession</code> <p>map filter session</p> required <code>is_province_view</code> <code>bool</code> <p>True only if there is filter_species_name and user can view province layer</p> required <code>filter_year</code> <code>int</code> <p>filter by year</p> <code>None</code> <code>filter_species_name</code> <code>str</code> <p>filter by species name</p> <code>None</code> <code>filter_organisation</code> <code>str</code> <p>filter by organisation id list</p> <code>None</code> <code>filter_activity</code> <code>str</code> <p>filter by activity list</p> <code>None</code> <code>filter_spatial</code> <code>str</code> <p>property spatial filter list</p> <code>None</code> <code>filter_property</code> <code>str</code> <p>filter by property id list</p> <code>None</code> Source code in <code>django_project/frontend/utils/map.py</code> <pre><code>def generate_map_view(\n        session: MapSession,\n        is_province_view: bool,\n        filter_year: int = None,\n        filter_species_name: str = None,\n        filter_organisation: str = None,\n        filter_activity: str = None,\n        filter_spatial: str = None,\n        filter_property: str = None):\n    \"\"\"\n    Generate materialized view from map filter session.\n\n    :param session: map filter session\n    :param is_province_view: True only if there is filter_species_name\n    and user can view province layer\n    :param filter_year: filter by year\n    :param filter_species_name: filter by species name\n    :param filter_organisation: filter by organisation id list\n    :param filter_activity: filter by activity list\n    :param filter_spatial: property spatial filter list\n    :param filter_property: filter by property id list\n    \"\"\"\n    if is_province_view:\n        drop_map_materialized_view(session.province_view_name)\n    else:\n        drop_map_materialized_view(session.properties_view_name)\n    is_choropleth_layer = True if filter_species_name else False\n    if is_choropleth_layer:\n        if is_province_view:\n            sql_view, query_values = get_province_population_query(\n                filter_year, filter_species_name,\n                filter_organisation, filter_activity, filter_spatial,\n                filter_property\n            )\n        else:\n            sql_view, query_values = get_properties_population_query(\n                filter_year, filter_species_name,\n                filter_organisation, filter_activity, filter_spatial,\n                filter_property\n            )\n    else:\n        sql_view, query_values = get_properties_query(\n            filter_organisation, filter_spatial, filter_property\n        )\n    create_map_materialized_view(\n        session.province_view_name if is_province_view else\n        session.properties_view_name, sql_view, query_values\n    )\n    # store queryparams\n    query_params = (\n        \"\"\"\n        end_year={end_year}&amp;species={species}&amp;\n        organisation={organisation}&amp;activity={activity}&amp;\n        spatial_filter_values={spatial_filter_values}&amp;property={property}\n        \"\"\"\n    ).format(\n        end_year=filter_year,\n        species=filter_species_name,\n        organisation=filter_organisation,\n        activity=filter_activity,\n        spatial_filter_values=filter_spatial,\n        property=filter_property\n    )\n    session.query_params = query_params\n    session.save(update_fields=['query_params'])\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.map.generate_population_count_categories","title":"generate_population_count_categories","text":"<pre><code>generate_population_count_categories(\n    is_province_layer, session, filter_species_name\n)\n</code></pre> <p>Generate population count categories from species. This function will read from materialized view from MapSession.</p> <p>Parameters:</p> Name Type Description Default <code>is_province_layer</code> <code>bool</code> <p>True if this is for province layer</p> required <code>session</code> <code>MapSession</code> <p>map filter session</p> required <code>filter_species_name</code> <code>str</code> <p>map filter by species name</p> required <p>Returns:</p> Type Description <p>list of dict of minLabel, maxLabel, value and color</p> Source code in <code>django_project/frontend/utils/map.py</code> <pre><code>def generate_population_count_categories(\n        is_province_layer: bool,\n        session: MapSession,\n        filter_species_name: str):\n    \"\"\"\n    Generate population count categories from species.\n    This function will read from materialized view from MapSession.\n\n    :param is_province_layer: True if this is for province layer\n    :param session: map filter session\n    :param filter_species_name: map filter by species name\n    :return: list of dict of minLabel, maxLabel, value and color\n    \"\"\"\n    min, max = get_count_summary_of_population(is_province_layer, session)\n    base_color = DEFAULT_BASE_COLOR\n    taxon = Taxon.objects.filter(scientific_name=filter_species_name).first()\n    if taxon and taxon.colour:\n        base_color = taxon.colour\n    return generate_population_count_categories_base(min, max, base_color)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.map.generate_population_count_categories_base","title":"generate_population_count_categories_base","text":"<pre><code>generate_population_count_categories_base(\n    min, max, base_color\n)\n</code></pre> <p>Generate population count categories for choropleth map. Using equal interval classification. http://wiki.gis.com/wiki/index.php/Equal_Interval_classification</p> <p>Parameters:</p> Name Type Description Default <code>min</code> <code>int</code> <p>minimum population count</p> required <code>max</code> <code>int</code> <p>maximum population count</p> required <code>base_color</code> <code>str</code> <p>base color in hex to calculate color gradient</p> required <p>Returns:</p> Type Description <p>list of dict of minLabel, maxLabel, value and color.</p> Source code in <code>django_project/frontend/utils/map.py</code> <pre><code>def generate_population_count_categories_base(\n        min: int,\n        max: int,\n        base_color: str):\n    \"\"\"\n    Generate population count categories for choropleth map.\n    Using equal interval classification.\n    http://wiki.gis.com/wiki/index.php/Equal_Interval_classification\n\n    :param min: minimum population count\n    :param max: maximum population count\n    :param base_color: base color in hex to calculate color gradient\n    :return: list of dict of minLabel, maxLabel, value and color.\n    \"\"\"\n    result = []\n    colors = linear_gradient(base_color, n=CHOROPLETH_NUMBER_OF_BREAKS)['hex']\n    colors = colors[::-1]\n    if max == 0 and min == 0:\n        max = 100\n    break_val = math.ceil((max - min) / CHOROPLETH_NUMBER_OF_BREAKS)\n    if break_val == 0:\n        # case min = max\n        break_val = 20\n    val = min\n    for t in range(0, CHOROPLETH_NUMBER_OF_BREAKS):\n        result.append({\n            'minLabel': val,\n            'maxLabel': val + break_val,\n            'value': val,\n            'color': ''\n        })\n        val += break_val\n    t = CHOROPLETH_NUMBER_OF_BREAKS - 1\n    for element in reversed(result):\n        element['color'] = colors[t]\n        t -= 1\n        if t &lt;= -1:\n            break\n    return result\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.map.get_count_summary_of_population","title":"get_count_summary_of_population","text":"<pre><code>get_count_summary_of_population(is_province_layer, session)\n</code></pre> <p>Return (Min, Max) for population query count. Materialized view for current session must be created.</p> <p>Parameters:</p> Name Type Description Default <code>is_province_layer</code> <code>bool</code> <p>True if the summary is for province layer</p> required <code>session</code> <code>MapSession</code> <p>map filter session</p> required <p>Returns:</p> Type Description <p>Tuple[int, int]: A tuple of (Min, Max) population count</p> Source code in <code>django_project/frontend/utils/map.py</code> <pre><code>def get_count_summary_of_population(\n        is_province_layer: bool,\n        session: MapSession):\n    \"\"\"\n    Return (Min, Max) for population query count.\n    Materialized view for current session must be created.\n\n    :param is_province_layer: True if the summary is for province layer\n    :param session: map filter session\n    :return: Tuple[int, int]: A tuple of (Min, Max) population count\n    \"\"\"\n    where_sql = ''\n    sql = (\n        \"\"\"\n        select min(count), max(count) from \"{view_name}\"\n        {where_sql}\n        \"\"\"\n    ).format(\n        view_name=(\n            session.province_view_name if is_province_layer else\n            session.properties_view_name\n        ),\n        where_sql=where_sql\n    )\n    max = 0\n    min = 0\n    with connection.cursor() as cursor:\n        cursor.execute(sql)\n        row = cursor.fetchone()\n        if row:\n            min = row[0] if row[0] else 0\n            max = row[1] if row[1] else 0\n    return (min, max)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.map.get_map_template_style","title":"get_map_template_style","text":"<pre><code>get_map_template_style(\n    request, session=None, theme_choice=0, token=None\n)\n</code></pre> <p>Fetch map template style from file.</p> <p>Parameters:</p> Name Type Description Default <code>theme_choice</code> <code>int</code> <p>0 light, 1 dark</p> <code>0</code> <p>Returns:</p> Type Description <p>json map style</p> Source code in <code>django_project/frontend/utils/map.py</code> <pre><code>def get_map_template_style(request, session = None, theme_choice: int = 0,\n                           token: str = None):\n    \"\"\"\n    Fetch map template style from file.\n\n    :param theme_choice: 0 light, 1 dark\n    :return: json map style\n    \"\"\"\n    load_normal_map = True\n    if hasattr(request.user, 'user_profile'):\n        user_role = str(\n            request.user.user_profile.user_role_type_id\n        )\n        if \"Decision Maker\" in user_role:\n            style_file_path = absolute_path(\n                'frontend', 'utils', 'country_level_light_v2.json'\n            )\n            if theme_choice == 1:\n                style_file_path = absolute_path(\n                    'frontend', 'utils', 'country_level_dark_v2.json'\n                )\n            load_normal_map = False\n    if load_normal_map:\n        style_file_path = absolute_path(\n            'frontend', 'utils', 'sanbi_styling_light.json'\n        )\n        if theme_choice == 1:\n            style_file_path = absolute_path(\n                'frontend', 'utils', 'sanbi_styling_dark.json'\n            )\n    styles = {}\n    with open(style_file_path) as config_file:\n        styles = json.load(config_file)\n    # update sanbi source URL\n    schema = 'https://'\n    domain = Site.objects.get_current().domain\n    if settings.DEBUG:\n        schema = 'http://'\n        tegola_dev_port = os.environ.get('TEGOLA_DEV_PORT', '9191')\n        domain = f'localhost:{tegola_dev_port}'\n    elif 'localhost' in domain:\n        schema = 'http://'\n    if 'sources' in styles and 'sanbi' in styles['sources']:\n        tile_url = f'{schema}{domain}/maps/sanbi/{{z}}/{{x}}/{{y}}'\n        if settings.DEBUG:\n            tile_url = tile_url + '.pbf'\n        if not settings.DEBUG and token:\n            tile_url = tile_url + f'?token={token}'\n        styles['sources']['sanbi']['tiles'] = [tile_url]\n    if 'sources' in styles and 'NGI Aerial Imagery' in styles['sources']:\n        url = (\n            reverse('aerial-map-layer', kwargs={\n                'z': 0,\n                'x': 0,\n                'y': 0\n            })\n        )\n        url = request.build_absolute_uri(url)\n        url = url.replace('/0/0/0', '/{z}/{x}/{y}')\n        if not settings.DEBUG:\n            # if not dev env, then replace with https\n            url = url.replace('http://', schema)\n        styles['sources']['NGI Aerial Imagery']['tiles'] = [url]\n    # add properties layer\n    if 'sources' in styles:\n        if session:\n            url = (\n                reverse('session-properties-map-layer', kwargs={\n                    'z': 0,\n                    'x': 0,\n                    'y': 0\n                })\n            )\n        else:\n            url = (\n                reverse('default-properties-map-layer', kwargs={\n                    'z': 0,\n                    'x': 0,\n                    'y': 0\n                })\n            )\n        url = request.build_absolute_uri(url)\n        url = url.replace('/0/0/0', '/{z}/{x}/{y}')\n        if not settings.DEBUG:\n            # if not dev env, then replace with https\n            url = url.replace('http://', schema)\n        # add epoch datetime\n        url = url + f'?t={int(time.time())}'\n        if session:\n            url = url + f'&amp;session={session}'\n        styles['sources']['sanbi-dynamic'] = {\n            \"type\": \"vector\",\n            \"tiles\": [url],\n            \"minzoom\": 5,\n            \"maxzoom\": 24\n        }\n        styles['layers'].append(get_highlighted_layer('erf'))\n        styles['layers'].append(get_highlighted_layer('holding'))\n        styles['layers'].append(get_highlighted_layer('farm_portion'))\n        styles['layers'].append(get_highlighted_layer('parent_farm'))\n    # update maptiler api key\n    styles = replace_maptiler_api_key(styles)\n    return styles\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.map.get_properties_population_query","title":"get_properties_population_query","text":"<pre><code>get_properties_population_query(\n    filter_year,\n    filter_species_name,\n    filter_organisation,\n    filter_activity,\n    filter_spatial,\n    filter_property,\n)\n</code></pre> <p>Generate query for population count in properties level.</p> <p>Parameters:</p> Name Type Description Default <code>filter_year</code> <code>int</code> <p>filter by year</p> required <code>filter_species_name</code> <code>str</code> <p>filter by species name</p> required <code>filter_organisation</code> <code>str</code> <p>filter by organisation id list</p> required <code>filter_activity</code> <code>str</code> <p>filter by activity list</p> required <code>filter_spatial</code> <code>str</code> <p>property spatial filter list</p> required <code>filter_property</code> <code>str</code> <p>filter by property id list</p> required <p>Returns:</p> Type Description <p>SQL for materialized view and query values</p> Source code in <code>django_project/frontend/utils/map.py</code> <pre><code>def get_properties_population_query(\n        filter_year: int,\n        filter_species_name: str,\n        filter_organisation: str,\n        filter_activity: str,\n        filter_spatial: str,\n        filter_property: str):\n    \"\"\"\n    Generate query for population count in properties level.\n\n    :param filter_year: filter by year\n    :param filter_species_name: filter by species name\n    :param filter_organisation: filter by organisation id list\n    :param filter_activity: filter by activity list\n    :param filter_spatial: property spatial filter list\n    :param filter_property: filter by property id list\n    :return: SQL for materialized view and query values\n    \"\"\"\n    sql_view = ''\n    query_values = []\n    sql_conds_pop, query_values_pop = get_query_condition_for_population_query(\n        filter_year, filter_species_name, filter_activity\n    )\n    sql_conds_properties, query_values_properties = (\n        get_query_condition_for_properties_query(\n            filter_organisation, filter_spatial, filter_property,\n            property_alias_name='p2'\n        )\n    )\n    where_sql = ''\n    if sql_conds_pop:\n        where_sql = ' AND '.join(sql_conds_pop)\n        query_values.extend(query_values_pop)\n    sql = (\n        \"\"\"\n        select ap.property_id as id, sum(ap.total) as count\n        from annual_population ap\n        inner join taxon t on ap.taxon_id=t.id\n        inner join property p on ap.property_id=p.id\n        {where_sql} group by ap.property_id\n        \"\"\"\n    ).format(\n        where_sql=f'where {where_sql}' if where_sql else ''\n    )\n    where_sql_properties = ''\n    if sql_conds_properties:\n        where_sql_properties = ' AND '.join(sql_conds_properties)\n        query_values.extend(query_values_properties)\n    sql_view = (\n        \"\"\"\n        select p2.id, p2.name, COALESCE(population_summary.count, 0) as count\n        from property p2 {join_sql} ({sub_sql}) as population_summary\n        on p2.id=population_summary.id\n        {where_sql}\n        \"\"\"\n    ).format(\n        join_sql='inner join' if filter_activity else 'left join',\n        sub_sql=sql,\n        where_sql=(\n            f'where {where_sql_properties}' if where_sql_properties else ''\n        )\n    )\n    return sql_view, query_values\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.map.get_properties_query","title":"get_properties_query","text":"<pre><code>get_properties_query(\n    filter_organisation, filter_spatial, filter_property\n)\n</code></pre> <p>Generate query for properties layer.</p> <p>Parameters:</p> Name Type Description Default <code>filter_organisation</code> <code>str</code> <p>filter by organisation id list</p> required <code>filter_spatial</code> <code>str</code> <p>property spatial filter list</p> required <code>filter_property</code> <code>str</code> <p>filter by property id list</p> required <p>Returns:</p> Type Description <p>SQL for materialized view and query values</p> Source code in <code>django_project/frontend/utils/map.py</code> <pre><code>def get_properties_query(\n        filter_organisation: str,\n        filter_spatial: str,\n        filter_property: str):\n    \"\"\"\n    Generate query for properties layer.\n\n    :param filter_organisation: filter by organisation id list\n    :param filter_spatial: property spatial filter list\n    :param filter_property: filter by property id list\n    :return: SQL for materialized view and query values\n    \"\"\"\n    sql_view = ''\n    query_values = []\n    sql_conds_properties, query_values_properties = (\n        get_query_condition_for_properties_query(\n            filter_organisation, filter_spatial, filter_property\n        )\n    )\n    where_sql_properties = ''\n    if sql_conds_properties:\n        where_sql_properties = ' AND '.join(sql_conds_properties)\n        query_values.extend(query_values_properties)\n    sql_view = (\n        \"\"\"\n        select p.id, p.name, 0 as count\n        from property p\n        {where_sql}\n        \"\"\"\n    ).format(\n        where_sql=(\n            f'where {where_sql_properties}' if where_sql_properties else ''\n        )\n    )\n    return sql_view, query_values\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.map.get_province_population_query","title":"get_province_population_query","text":"<pre><code>get_province_population_query(\n    filter_year,\n    filter_species_name,\n    filter_organisation,\n    filter_activity,\n    filter_spatial,\n    filter_property,\n)\n</code></pre> <p>Generate query for population count in province level.</p> <p>Parameters:</p> Name Type Description Default <code>filter_year</code> <code>int</code> <p>filter by year</p> required <code>filter_species_name</code> <code>str</code> <p>filter by species name</p> required <code>filter_organisation</code> <code>str</code> <p>filter by organisation id list</p> required <code>filter_activity</code> <code>str</code> <p>filter by activity list</p> required <code>filter_spatial</code> <code>str</code> <p>property spatial filter list</p> required <code>filter_property</code> <code>str</code> <p>filter by property id list</p> required <p>Returns:</p> Type Description <p>SQL for materialized view and query values</p> Source code in <code>django_project/frontend/utils/map.py</code> <pre><code>def get_province_population_query(\n        filter_year: int,\n        filter_species_name: str,\n        filter_organisation: str,\n        filter_activity: str,\n        filter_spatial: str,\n        filter_property: str):\n    \"\"\"\n    Generate query for population count in province level.\n\n    :param filter_year: filter by year\n    :param filter_species_name: filter by species name\n    :param filter_organisation: filter by organisation id list\n    :param filter_activity: filter by activity list\n    :param filter_spatial: property spatial filter list\n    :param filter_property: filter by property id list\n    :return: SQL for materialized view and query values\n    \"\"\"\n    sql_view = ''\n    query_values = []\n    sql_conds_pop, query_values_pop = get_query_condition_for_population_query(\n        filter_year, filter_species_name, filter_activity\n    )\n    sql_conds_properties, query_values_properties = (\n        get_query_condition_for_properties_query(\n            filter_organisation, filter_spatial, filter_property\n        )\n    )\n    sql_conds = []\n    if sql_conds_pop:\n        sql_conds.extend(sql_conds_pop)\n        query_values.extend(query_values_pop)\n    if sql_conds_properties:\n        sql_conds.extend(sql_conds_properties)\n        query_values.extend(query_values_properties)\n    where_sql = ' AND '.join(sql_conds)\n    sql = (\n        \"\"\"\n        select p.province_id as id, sum(ap.total) as count\n        from annual_population ap\n        inner join taxon t on ap.taxon_id=t.id\n        inner join property p on ap.property_id=p.id\n        {where_sql} group by p.province_id\n        \"\"\"\n    ).format(\n        where_sql=f'where {where_sql}' if where_sql else ''\n    )\n    sql_view = (\n        \"\"\"\n        select p2.id, p2.name, COALESCE(population_summary.count, 0) as count\n        from province p2 left join ({sub_sql}) as population_summary\n        on p2.id=population_summary.id\n        \"\"\"\n    ).format(\n        sub_sql=sql\n    )\n    return sql_view, query_values\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.map.get_query_condition_for_population_query","title":"get_query_condition_for_population_query","text":"<pre><code>get_query_condition_for_population_query(\n    filter_year, filter_species_name, filter_activity\n)\n</code></pre> <p>Generate query condition from species filters.</p> <p>Filters that are used for choropleth: - species (mandatory) - end year - activity</p> <p>Parameters:</p> Name Type Description Default <code>filter_year</code> <code>int</code> <p>filter by year</p> required <code>filter_species_name</code> <code>str</code> <p>filter by species name</p> required <code>filter_activity</code> <code>str</code> <p>filter by activity list</p> required <p>Returns:</p> Type Description <p>list of SQL conditions and list of query values</p> Source code in <code>django_project/frontend/utils/map.py</code> <pre><code>def get_query_condition_for_population_query(\n        filter_year: int,\n        filter_species_name: str,\n        filter_activity: str):\n    \"\"\"\n    Generate query condition from species filters.\n\n    Filters that are used for choropleth:\n    - species (mandatory)\n    - end year\n    - activity\n\n    :param filter_year: filter by year\n    :param filter_species_name: filter by species name\n    :param filter_activity: filter by activity list\n    :return: list of SQL conditions and list of query values\n    \"\"\"\n    sql_conditions = []\n    query_values = []\n    sql_conditions.append('t.scientific_name=%s')\n    query_values.append(filter_species_name)\n    if filter_activity:\n        if filter_activity == 'all':\n            activity_types = ActivityType.objects.all().values_list(\n                'id', flat=True)\n            filter_activity = ','.join(map(str, activity_types))\n        activities = ast.literal_eval('(' + filter_activity + ',)')\n        filter_years = ''\n        if filter_year:\n            filter_years = (\n                \"\"\"AND appa.year=%s\"\"\"\n            )\n        activity_sql = (\n            \"\"\"\n            SELECT 1 FROM annual_population_per_activity appa\n            WHERE appa.annual_population_id=ap.id\n            AND appa.activity_type_id IN %s\n            {filter_years}\n            \"\"\"\n        ).format(filter_years=filter_years)\n        sql_conditions.append(\n            'exists({activity_sql})'.format(activity_sql=activity_sql)\n        )\n        query_values.append(activities)\n        if filter_years:\n            query_values.append(filter_year)\n    if filter_year:\n        sql_conditions.append('ap.year=%s')\n        query_values.append(filter_year)\n    return sql_conditions, query_values\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.map.get_query_condition_for_properties_query","title":"get_query_condition_for_properties_query","text":"<pre><code>get_query_condition_for_properties_query(\n    filter_organisation,\n    filter_spatial,\n    filter_property,\n    property_alias_name=\"p\",\n)\n</code></pre> <p>Generate query condition from properties filters.</p> <p>Filters that are used for properties layer: - organisation - property - spatial</p> <p>Parameters:</p> Name Type Description Default <code>filter_organisation</code> <code>str</code> <p>filter by organisation id list</p> required <code>filter_spatial</code> <code>str</code> <p>property spatial filter list</p> required <code>filter_property</code> <code>str</code> <p>filter by property id list</p> required <code>property_alias_name</code> <code>str</code> <p>alias for property table in the query</p> <code>'p'</code> <p>Returns:</p> Type Description <p>list of SQL conditions and list of query values</p> Source code in <code>django_project/frontend/utils/map.py</code> <pre><code>def get_query_condition_for_properties_query(\n        filter_organisation: str,\n        filter_spatial: str,\n        filter_property: str,\n        property_alias_name: str = 'p'):\n    \"\"\"\n    Generate query condition from properties filters.\n\n    Filters that are used for properties layer:\n    - organisation\n    - property\n    - spatial\n\n    :param filter_organisation: filter by organisation id list\n    :param filter_spatial: property spatial filter list\n    :param filter_property: filter by property id list\n    :param property_alias_name: alias for property table in the query\n    :return: list of SQL conditions and list of query values\n    \"\"\"\n    sql_conditions = []\n    query_values = []\n    if filter_organisation:\n        if filter_organisation != 'all':\n            sql_conditions.append(\n                f'{property_alias_name}.organisation_id IN %s')\n            query_values.append(\n                ast.literal_eval('(' + filter_organisation + ',)'))\n    else:\n        sql_conditions.append(\n            f'{property_alias_name}.organisation_id = any(ARRAY[]::bigint[])')\n    if filter_property:\n        if filter_property != 'all':\n            sql_conditions.append(f'{property_alias_name}.id IN %s')\n            query_values.append(\n                ast.literal_eval('(' + filter_property + ',)'))\n    else:\n        sql_conditions.append(\n            f'{property_alias_name}.id = any(ARRAY[]::bigint[])')\n    if filter_spatial:\n        spatial_filter_values = tuple(\n            filter(None, filter_spatial.split(','))\n        )\n        if spatial_filter_values:\n            spatial_sql = (\n                \"\"\"\n                select 1 from frontend_spatialdatavaluemodel fs2\n                inner join frontend_spatialdatamodel fs3 on\n                fs3.id = fs2.spatial_data_id\n                where fs3.property_id={property_alias_name}.id and\n                fs2.context_layer_value in %s\n                \"\"\"\n            ).format(property_alias_name=property_alias_name)\n            sql_conditions.append(\n                'exists({spatial_sql})'.format(spatial_sql=spatial_sql)\n            )\n            query_values.append(spatial_filter_values)\n    return sql_conditions, query_values\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.map.replace_maptiler_api_key","title":"replace_maptiler_api_key","text":"<pre><code>replace_maptiler_api_key(styles)\n</code></pre> <p>Replace maptiler_key.</p> Source code in <code>django_project/frontend/utils/map.py</code> <pre><code>def replace_maptiler_api_key(styles):\n    \"\"\"Replace maptiler_key.\"\"\"\n    map_tiler_key = settings.MAPTILER_API_KEY\n    if 'glyphs' in styles and styles['glyphs']:\n        styles['glyphs'] = styles['glyphs'].replace(\n            '{{MAPTILER_API_KEY}}',\n            map_tiler_key\n        )\n    return styles\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.metrics.calculate_base_population_of_species","title":"calculate_base_population_of_species","text":"<pre><code>calculate_base_population_of_species(data)\n</code></pre> <p>Calculate base population of species and modify the input data. Params:     data (List[Dict[str, Any]]): List of dictionaries     representing species data. Returns:     Dict[str, Any]: A dictionary containing modified species     data with base percentages and activity colors.</p> Source code in <code>django_project/frontend/utils/metrics.py</code> <pre><code>def calculate_base_population_of_species(data: List[Dict[str, Any]]) \\\n    -&gt; Dict[str, Any]:\n    \"\"\"\n    Calculate base population of species and modify the input data.\n    Params:\n        data (List[Dict[str, Any]]): List of dictionaries\n        representing species data.\n    Returns:\n        Dict[str, Any]: A dictionary containing modified species\n        data with base percentages and activity colors.\n    \"\"\"\n    calculated_data = []\n    for species in data:\n        activities_total = sum(\n            activity[\"activity_total\"] for activity in species[\"activities\"]\n        )\n        if species[\"total\"]:\n            base = species[\"total\"] - activities_total\n            base_percentage = (\n                base / species[\"total\"]\n            ) * 100 if base else None\n            species[\"activities\"].append({\"Base population\": base_percentage})\n            calculated_data.append(species)\n    species_data = {\n        \"data\": calculated_data,\n        \"activity_colours\": ACTIVITY_COLORS_DICT\n    }\n    return species_data\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.metrics.calculate_population_categories","title":"calculate_population_categories","text":"<pre><code>calculate_population_categories(\n    queryset, species_name, year_range=None\n)\n</code></pre> <p>Calculate population categories for a given queryset of properties.</p> <p>Args:     queryset (QuerySet): A queryset of properties.     species_name (str): The name of the species.     year_range (Tuple[int]): Start year and end year.</p> <p>Returns:     Dict[str, Any]: A dictionary containing:     - CATEGORY_LABELS: List of population category labels.     - YEAR_LABELS: List of years for which the data is available.     - CATEGORY_DATA: List of dictionaries with year, property count,         and population category details.</p> <p>This function takes a queryset of properties and the name of a species. It calculates population categories based on annual population data for the specified species across the provided properties. It retrieves the annual population data, calculates the minimum and maximum populations, creates 6 population categories, and counts the number of properties in each category for each year.</p> Source code in <code>django_project/frontend/utils/metrics.py</code> <pre><code>def calculate_population_categories(\n        queryset,\n        species_name: str,\n        year_range: Tuple[int] = None\n) -&gt; Dict[str, int]:\n    \"\"\"\n    Calculate population categories for a given queryset of properties.\n\n    Args:\n        queryset (QuerySet): A queryset of properties.\n        species_name (str): The name of the species.\n        year_range (Tuple[int]): Start year and end year.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing:\n        - CATEGORY_LABELS: List of population category labels.\n        - YEAR_LABELS: List of years for which the data is available.\n        - CATEGORY_DATA: List of dictionaries with year, property count,\n            and population category details.\n\n    This function takes a queryset of properties and the name of a species.\n    It calculates population categories based on annual population\n    data for the specified species across\n    the provided properties.\n    It retrieves the annual population data, calculates\n    the minimum and maximum populations,\n    creates 6 population categories, and counts\n    the number of properties in each category for each year.\n    \"\"\"\n\n    if not year_range:\n        year_range = (1960, datetime.datetime.now().year)\n\n    # Extract property IDs from the queryset\n    property_ids = list(set(\n        queryset.values_list('id', flat=True)\n    ))\n\n    # Fetch the annual population data for the specified property IDs\n    annual_population_data = AnnualPopulation.objects.filter(\n        property__in=property_ids,\n        taxon__scientific_name=species_name,\n        year__range=year_range\n    ).distinct()\n\n    if not annual_population_data.exists():\n        return {}\n\n    min_population, max_population = annual_population_data.aggregate(\n        Min('total'), Max('total')\n    ).values()\n\n    # Calculate the category width (create 6 groups minimum)\n    category_width = (max_population - min_population) / 6\n\n    # Create the population categories\n    category_count = 1 if category_width == 0 else 6\n    categories = [\n        int(min_population + category_width * i)\n        for i in range(category_count)\n    ]\n    category_labels = []\n\n    results = []\n\n    for index, category in enumerate(categories):\n        if len(categories) == 1:\n            max_category = categories[index]\n            category_key = f'{category}-{max_category}'\n        elif len(categories) - 1 &gt; index:\n            max_category = categories[index + 1]\n            category_key = f'{category}-{max_category}'\n        else:\n            max_category = max_population\n            category_key = f'&gt;{category}'\n\n        category_labels.append(category_key)\n\n        for year in annual_population_data.values_list(\n                'year', flat=True).distinct():\n            annual_population_data_by_category = annual_population_data.filter(\n                total__gte=category,\n                total__lte=max_category,\n                year=year\n            )\n            property_count = (\n                annual_population_data_by_category.values(\n                    'property').distinct().count()\n            )\n\n            results.append({\n                'year': year,\n                'category': category_key,\n                'property_count': property_count\n            })\n\n    return {\n        CATEGORY_LABELS: category_labels,\n        YEAR_LABELS: sorted(set(\n            int(year) for year in annual_population_data.values_list(\n                'year', flat=True)\n        )),\n        CATEGORY_DATA: results\n    }\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.metrics.calculate_total_area_per_property_type","title":"calculate_total_area_per_property_type","text":"<pre><code>calculate_total_area_per_property_type(\n    queryset, species_name\n)\n</code></pre> <p>Calculate the total area per property type for a given queryset of properties. Params:     queryset (QuerySet): The queryset of Property objects.     species_name: filter results by species Returns:     list[dict]: A list of dictionaries, each containing property_type                 and total_area keys representing the property type name                 and the aggregated total area respectively.</p> Source code in <code>django_project/frontend/utils/metrics.py</code> <pre><code>def calculate_total_area_per_property_type(\n    queryset: QuerySet,\n    species_name: str) -&gt; List[dict]:\n    \"\"\"\n    Calculate the total area per property type\n    for a given queryset of properties.\n    Params:\n        queryset (QuerySet): The queryset of Property objects.\n        species_name: filter results by species\n    Returns:\n        list[dict]: A list of dictionaries, each containing property_type\n                    and total_area keys representing the property type name\n                    and the aggregated total area respectively.\n    \"\"\"\n    # Filter the properties based on the owned species\n    property_ids = AnnualPopulation.objects.filter(\n        taxon__scientific_name=species_name\n    ).values_list('property_id', flat=True)\n\n    # Calculate the total area for each property type\n    properties_type_area = Property.objects.filter(\n        id__in=property_ids\n    ).values('property_type__name').annotate(\n        total_area=Sum('property_size_ha')\n    ).values('property_type__name', 'created_at', 'name', 'total_area')\n\n    return properties_type_area\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.metrics.round_with_precision_check","title":"round_with_precision_check","text":"<pre><code>round_with_precision_check(\n    value, precision, max_precision=5\n)\n</code></pre> <p>Calculate rounded number of value with decimal precision. If given precision makes the rounded number becomes 0, then increase the precision. Params:     value: positive number     precision: number of decimal to be rounded of     max_precision: maximum precision Return:     A rounded number</p> Source code in <code>django_project/frontend/utils/metrics.py</code> <pre><code>def round_with_precision_check(value, precision, max_precision=5):\n    \"\"\"\n    Calculate rounded number of value with decimal precision.\n    If given precision makes the rounded number becomes 0, then\n    increase the precision.\n    Params:\n        value: positive number\n        precision: number of decimal to be rounded of\n        max_precision: maximum precision\n    Return:\n        A rounded number\n    \"\"\"\n    up_precision = precision\n    for i in range(max_precision):\n        up_precision += i\n        result = round(value, up_precision)\n        if result &gt; 0:\n            return result\n    # if failed, then return with original precision\n    return round(value, precision)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.organisation.get_abbreviation","title":"get_abbreviation","text":"<pre><code>get_abbreviation(text)\n</code></pre> <p>Get abbreviation from text.</p> Source code in <code>django_project/frontend/utils/organisation.py</code> <pre><code>def get_abbreviation(text: str):\n    \"\"\"\n    Get abbreviation from text.\n    \"\"\"\n    words = text.split(' ')\n    if len(words) == 1:\n        return words[0][0:2].upper()\n    else:\n        return ''.join(map(lambda word: word[0:1].upper(), words))\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.organisation.get_organisation_ids","title":"get_organisation_ids","text":"<pre><code>get_organisation_ids(user)\n</code></pre> <p>Get organisation ids that user belongs to.</p> Source code in <code>django_project/frontend/utils/organisation.py</code> <pre><code>def get_organisation_ids(user):\n    \"\"\"Get organisation ids that user belongs to.\"\"\"\n    return OrganisationUser.objects.filter(\n        user=user\n    ).values_list('organisation_id', flat=True)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.parcel.find_layer_by_cname","title":"find_layer_by_cname","text":"<pre><code>find_layer_by_cname(cname)\n</code></pre> <p>Find layer name+id by cname.</p> Source code in <code>django_project/frontend/utils/parcel.py</code> <pre><code>def find_layer_by_cname(cname: str):\n    \"\"\"Find layer name+id by cname.\"\"\"\n    obj = Erf.objects.filter(cname=cname).first()\n    if obj:\n        return 'erf', obj.id\n    obj = Holding.objects.filter(cname=cname).first()\n    if obj:\n        return 'holding', obj.id\n    obj = FarmPortion.objects.filter(cname=cname).first()\n    if obj:\n        return 'farm_portion', obj.id\n    obj = ParentFarm.objects.filter(cname=cname).first()\n    if obj:\n        return 'parent_farm', obj.id\n    return None, None\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.parcel.find_parcel_base","title":"find_parcel_base","text":"<pre><code>find_parcel_base(cls, serialize_cls, other)\n</code></pre> <p>Base function to find parcel.</p> Source code in <code>django_project/frontend/utils/parcel.py</code> <pre><code>def find_parcel_base(cls, serialize_cls,\n                     other: GEOSGeometry):\n    \"\"\"Base function to find parcel.\"\"\"\n    results = []\n    cname_list = []\n    parcels = cls.objects.filter(geom__bboverlaps=other)\n    parcels = parcels.annotate(\n        centroid=Centroid('geom')).order_by('cname').distinct('cname')\n    if parcels.exists():\n        selected_parcels, cname_list = select_parcel_by_centroid(\n            parcels, other)\n        if selected_parcels:\n            results = serialize_cls(\n                selected_parcels,\n                many=True\n            ).data\n    return results, cname_list\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.parcel.find_province","title":"find_province","text":"<pre><code>find_province(geom, default)\n</code></pre> <p>Find province for given geometry (SRID 3857).</p> <p>Parameters:</p> Name Type Description Default <code>geom</code> <code>GEOSGeometry</code> <p>Geometry</p> required <code>default</code> <code>Province</code> <p>Default Province if no result</p> required <p>Returns:</p> Type Description <p>Province that has biggest overlap with geom</p> Source code in <code>django_project/frontend/utils/parcel.py</code> <pre><code>def find_province(geom: GEOSGeometry, default: Province):\n    \"\"\"\n    Find province for given geometry (SRID 3857).\n\n    :param geom: Geometry\n    :param default: Default Province if no result\n    :return: Province that has biggest overlap with geom\n    \"\"\"\n    query = (\n        \"\"\"\n        with input_geom as (select ST_GeomFromText(%s, 3857) as geom)\n        select zpss.adm1_en as name,\n        ST_AREA(ST_Intersection(ig.geom, zpss.geom)) / ST_AREA(zpss.geom)\n        as overlap\n        from layer.zaf_provinces_small_scale zpss\n        inner join input_geom ig on ST_Intersects(ig.geom, zpss.geom)\n        order by overlap desc limit 1\n        \"\"\"\n    )\n    query_values = [geom.ewkt]\n    province_name = None\n    with connection.cursor() as cursor:\n        cursor.execute(query, query_values)\n        row = cursor.fetchone()\n        if row:\n            province_name = row[0]\n    if province_name is None:\n        return default\n    province = Province.objects.filter(\n        name=province_name\n    ).first()\n    return province if province else default\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.parcel.get_geom_size_in_ha","title":"get_geom_size_in_ha","text":"<pre><code>get_geom_size_in_ha(geom)\n</code></pre> <p>Calculate geometry size in ha.</p> <p>Parameters:</p> Name Type Description Default <code>geom</code> <code>GEOSGeometry</code> <p>Geometry</p> required <p>Returns:</p> Type Description <p>Size in ha</p> Source code in <code>django_project/frontend/utils/parcel.py</code> <pre><code>def get_geom_size_in_ha(geom: GEOSGeometry):\n    \"\"\"\n    Calculate geometry size in ha.\n\n    :param geom: Geometry\n    :return: Size in ha\n    \"\"\"\n    if geom is None:\n        return 0\n    meters_sq = area(geom.geojson)\n    return meters_sq / 10000\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.parcel.select_parcel_by_centroid","title":"select_parcel_by_centroid","text":"<pre><code>select_parcel_by_centroid(parcels, other)\n</code></pre> <p>Select parcel by using its centroid.</p> Source code in <code>django_project/frontend/utils/parcel.py</code> <pre><code>def select_parcel_by_centroid(parcels, other: GEOSGeometry):\n    \"\"\"Select parcel by using its centroid.\"\"\"\n    selected_parcels = []\n    cnames = []\n    if other.num_geom &gt; 1:\n        # if multipart, then search for each polygon\n        for i in range(other.num_geom):\n            geom_part = other[i]\n            for parcel in parcels:\n                centroid = parcel.centroid\n                if centroid.within(geom_part) and parcel.cname not in cnames:\n                    selected_parcels.append(parcel)\n                    cnames.append(parcel.cname)\n    else:\n        for parcel in parcels:\n            centroid = parcel.centroid\n            if centroid.within(other) and parcel.cname not in cnames:\n                selected_parcels.append(parcel)\n                cnames.append(parcel.cname)\n    return selected_parcels, cnames\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.process.kill_process_by_pid","title":"kill_process_by_pid","text":"<pre><code>kill_process_by_pid(pidfile_path)\n</code></pre> <p>Kill process by PID.</p> Source code in <code>django_project/frontend/utils/process.py</code> <pre><code>def kill_process_by_pid(pidfile_path):\n    \"\"\"Kill process by PID. \"\"\"\n    plumber_pid = read_pid_from_pidfile(pidfile_path)\n    logger.info(f'Killing pid {plumber_pid}')\n    if plumber_pid:\n        # kill a process via pid\n        os.kill(plumber_pid, SIGKILL)\n        try:\n            os.remove(pidfile_path)\n        except IOError as ex:\n            logger.error(ex)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.process.read_pid_from_pidfile","title":"read_pid_from_pidfile","text":"<pre><code>read_pid_from_pidfile(pidfile_path)\n</code></pre> <p>Read the PID recorded in the named PID file.</p> <p>Read and return the numeric PID recorded as text in the named PID file. If the PID file cannot be read, or if the content is not a valid PID, return <code>None</code>.</p> Source code in <code>django_project/frontend/utils/process.py</code> <pre><code>def read_pid_from_pidfile(pidfile_path):\n    \"\"\" Read the PID recorded in the named PID file.\n\n        Read and return the numeric PID recorded as text in the named\n        PID file. If the PID file cannot be read, or if the content is\n        not a valid PID, return ``None``.\n\n        \"\"\"\n    pid = None\n    try:\n        pidfile = open(pidfile_path, 'r')\n    except IOError as ex:\n        logger.error(ex)\n    else:\n        # According to the FHS 2.3 section on PID files in /var/run:\n        #\n        #   The file must consist of the process identifier in\n        #   ASCII-encoded decimal, followed by a newline character.\n        #\n        #   Programs that read PID files should be somewhat flexible\n        #   in what they accept; i.e., they should ignore extra\n        #   whitespace, leading zeroes, absence of the trailing\n        #   newline, or additional lines in the PID file.\n\n        line = pidfile.readline().strip()\n        try:\n            pid = int(line)\n        except ValueError as ex:\n            logger.error(ex)\n        pidfile.close()\n\n    return pid\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.process.write_pidfile","title":"write_pidfile","text":"<pre><code>write_pidfile(pid, pidfile_path)\n</code></pre> <p>Write pid to file.</p> Source code in <code>django_project/frontend/utils/process.py</code> <pre><code>def write_pidfile(pid, pidfile_path):\n    \"\"\"Write pid to file.\"\"\"\n    with open(pidfile_path, 'w', encoding='utf-8') as f:\n        f.write(str(pid))\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.statistical_model.clear_species_model_output_cache","title":"clear_species_model_output_cache","text":"<pre><code>clear_species_model_output_cache(model_output)\n</code></pre> <p>Clear all output from species statistical model in the cache.</p> <p>Parameters:</p> Name Type Description Default <code>model_output</code> <code>SpeciesModelOutput</code> <p>SpeciesModelOutput</p> required Source code in <code>django_project/frontend/utils/statistical_model.py</code> <pre><code>def clear_species_model_output_cache(model_output: SpeciesModelOutput):\n    \"\"\"\n    Clear all output from species statistical model in the cache.\n\n    :param model_output: SpeciesModelOutput\n    \"\"\"\n    for output_type in CACHED_OUTPUT_TYPES:\n        cache_key = model_output.get_cache_key(output_type)\n        cache.delete(cache_key)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.statistical_model.execute_statistical_model","title":"execute_statistical_model","text":"<pre><code>execute_statistical_model(data_filepath, taxon, model=None)\n</code></pre> <p>Execute R model from exported data.</p> <p>Parameters:</p> Name Type Description Default <code>data_filepath</code> <p>file path of exported csv</p> required <code>taxon</code> <code>Taxon</code> <p>species</p> required <code>model</code> <code>StatisticalModel</code> <p>optional model to be executed,             if model=None, then generic one will be used</p> <code>None</code> <p>Returns:</p> Type Description <p>tuple of is_success, json response</p> Source code in <code>django_project/frontend/utils/statistical_model.py</code> <pre><code>def execute_statistical_model(data_filepath, taxon: Taxon,\n                              model: StatisticalModel = None):\n    \"\"\"\n    Execute R model from exported data.\n\n    :param data_filepath: file path of exported csv\n    :param taxon: species\n    :param model: optional model to be executed, \\\n            if model=None, then generic one will be used\n    :return: tuple of is_success, json response\n    \"\"\"\n    api_name = f'api_{model.id}' if model else 'generic'\n    request_url = f'http://plumber:{PLUMBER_PORT}/statistical/{api_name}'\n    data = {\n        'filepath': data_filepath,\n        'taxon_name': taxon.scientific_name\n    }\n    response = requests.post(request_url, data=data)\n    content_type = response.headers['Content-Type']\n    error = None\n    if content_type == 'application/json':\n        if response.status_code == 200:\n            return True, response.json()\n        else:\n            logger.error(\n                f'Plumber error response: {str(response.json())}')\n            error = response.json()\n    else:\n        logger.error(f'Invalid response content type: {content_type}')\n        error = f'Invalid response content type: {content_type}'\n    return False, error\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.statistical_model.init_species_model_output_from_generic_model","title":"init_species_model_output_from_generic_model","text":"<pre><code>init_species_model_output_from_generic_model(model)\n</code></pre> <p>Create species model output from generic model.</p> Source code in <code>django_project/frontend/utils/statistical_model.py</code> <pre><code>def init_species_model_output_from_generic_model(model: StatisticalModel):\n    \"\"\"\n    Create species model output from generic model.\n    \"\"\"\n    non_generic_models = StatisticalModel.objects.filter(\n        taxon__isnull=False\n    ).values_list('taxon_id', flat=True)\n    taxons = Taxon.objects.filter(\n        taxon_rank__name='Species'\n    ).exclude(id__in=non_generic_models)\n    for taxon in taxons:\n        SpeciesModelOutput.objects.create(\n            model=model,\n            taxon=taxon,\n            is_latest=True,\n            is_outdated=True,\n            outdated_since=timezone.now()\n        )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.statistical_model.init_species_model_output_from_non_generic_model","title":"init_species_model_output_from_non_generic_model","text":"<pre><code>init_species_model_output_from_non_generic_model(model)\n</code></pre> <p>Create species model output specific to a taxon in model.</p> Source code in <code>django_project/frontend/utils/statistical_model.py</code> <pre><code>def init_species_model_output_from_non_generic_model(model: StatisticalModel):\n    \"\"\"\n    Create species model output specific to a taxon in model.\n    \"\"\"\n    generic_model = StatisticalModel.objects.filter(\n        taxon__isnull=True\n    ).first()\n    if generic_model:\n        # delete output from generic model\n        SpeciesModelOutput.objects.filter(\n            taxon=model.taxon,\n            model=generic_model\n        ).delete()\n    SpeciesModelOutput.objects.create(\n        model=model,\n        taxon=model.taxon,\n        is_latest=True,\n        is_outdated=True,\n        outdated_since=timezone.now()\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.statistical_model.kill_r_plumber_process","title":"kill_r_plumber_process","text":"<pre><code>kill_r_plumber_process()\n</code></pre> <p>Kill plumber process by PID stored in file.</p> Source code in <code>django_project/frontend/utils/statistical_model.py</code> <pre><code>def kill_r_plumber_process():\n    \"\"\"Kill plumber process by PID stored in file.\"\"\"\n    pid_path = os.path.join(\n        '/',\n        'tmp',\n        'plumber.pid'\n    )\n    kill_process_by_pid(pid_path)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.statistical_model.mark_model_output_as_outdated_by_model","title":"mark_model_output_as_outdated_by_model","text":"<pre><code>mark_model_output_as_outdated_by_model(model)\n</code></pre> <p>Mark latest output as outdated so it can be refreshed.</p> <p>This is triggered when R code in a model is updated.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>StatisticalModel</code> <p>StatisticalModel</p> required Source code in <code>django_project/frontend/utils/statistical_model.py</code> <pre><code>def mark_model_output_as_outdated_by_model(model: StatisticalModel):\n    \"\"\"\n    Mark latest output as outdated so it can be refreshed.\n\n    This is triggered when R code in a model is updated.\n    :param model: StatisticalModel\n    \"\"\"\n    SpeciesModelOutput.objects.filter(\n        model=model,\n        is_latest=True,\n        is_outdated=False\n    ).update(\n        is_outdated=True,\n        outdated_since=timezone.now()\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.statistical_model.mark_model_output_as_outdated_by_species_list","title":"mark_model_output_as_outdated_by_species_list","text":"<pre><code>mark_model_output_as_outdated_by_species_list(\n    taxon_id_list,\n)\n</code></pre> <p>Mark latest output as outdated so it can be refreshed.</p> <p>This is triggered when a new data of species are added.</p> <p>Parameters:</p> Name Type Description Default <code>taxon</code> <p>species</p> required Source code in <code>django_project/frontend/utils/statistical_model.py</code> <pre><code>def mark_model_output_as_outdated_by_species_list(taxon_id_list):\n    \"\"\"\n    Mark latest output as outdated so it can be refreshed.\n\n    This is triggered when a new data of species are added.\n    :param taxon: species\n    \"\"\"\n    SpeciesModelOutput.objects.filter(\n        taxon_id__in=taxon_id_list,\n        is_latest=True,\n        is_outdated=False\n    ).update(\n        is_outdated=True,\n        outdated_since=timezone.now()\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.statistical_model.plumber_health_check","title":"plumber_health_check","text":"<pre><code>plumber_health_check(max_retry=5)\n</code></pre> <p>Check whether API is up and running.</p> <p>This will be called from worker.</p> <p>Parameters:</p> Name Type Description Default <code>max_retry</code> <p>maximum retry of checking</p> <code>5</code> <p>Returns:</p> Type Description <p>True if successful number of check is less than max_retry</p> Source code in <code>django_project/frontend/utils/statistical_model.py</code> <pre><code>def plumber_health_check(max_retry=5):\n    \"\"\"\n    Check whether API is up and running.\n\n    This will be called from worker.\n    :param max_retry: maximum retry of checking\n    :return: True if successful number of check is less than max_retry\n    \"\"\"\n    request_url = f'http://0.0.0.0:{PLUMBER_PORT}/statistical/echo'\n    retry = 0\n    req = None\n    time.sleep(1)\n    while (req is None or req.status_code != 200) and retry &lt; max_retry:\n        try:\n            req = requests.get(request_url)\n            if req.status_code != 200:\n                time.sleep(2)\n            else:\n                break\n        except Exception as ex:  # noqa\n            logger.error(ex)\n            time.sleep(2)\n        retry += 1\n    if retry &lt; max_retry:\n        logger.info('Plumber API is up and running!')\n    return retry &lt; max_retry\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.statistical_model.remove_plumber_data","title":"remove_plumber_data","text":"<pre><code>remove_plumber_data(data_filepath)\n</code></pre> <p>Remove csv data file.</p> <p>Parameters:</p> Name Type Description Default <code>data_filepath</code> <p>filepath to the csv file</p> required Source code in <code>django_project/frontend/utils/statistical_model.py</code> <pre><code>def remove_plumber_data(data_filepath):\n    \"\"\"\n    Remove csv data file.\n\n    :param data_filepath: filepath to the csv file\n    \"\"\"\n    try:\n        if os.path.exists(data_filepath):\n            os.remove(data_filepath)\n    except Exception as ex:\n        logger.error(ex)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.statistical_model.spawn_r_plumber","title":"spawn_r_plumber","text":"<pre><code>spawn_r_plumber()\n</code></pre> <p>Run a Plumber API server.</p> Source code in <code>django_project/frontend/utils/statistical_model.py</code> <pre><code>def spawn_r_plumber():\n    \"\"\"Run a Plumber API server.\"\"\"\n    command_list = (\n        [\n            'R',\n            '-e',\n            (\n                \"pr &lt;- plumber::plumb(\"\n                f\"'/home/web/plumber_data/plumber.R'); \"\n                f\"args &lt;- list(host = '0.0.0.0', port = {PLUMBER_PORT}); \"\n                \"do.call(pr$run, args)\"\n            )\n        ]\n    )\n    logger.info('Starting plumber API')\n    process = None\n    try:\n        # redirect stdout and stderr\n        with open('/proc/1/fd/1', 'w') as fd:\n            process = subprocess.Popen(\n                command_list,\n                stdout=fd,\n                stderr=fd\n            )\n        # sleep for 10 seconds to wait the API is up\n        time.sleep(10)\n        # we can also use polling to echo endpoint for health check\n        plumber_health_check()\n        # write process pid to /tmp/\n        write_pidfile(process.pid, '/tmp/plumber.pid')\n    except Exception as ex:  # noqa\n        logger.error(ex)\n        logger.error(traceback.format_exc())\n        if process:\n            process.terminate()\n            process = None\n    return process\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.statistical_model.store_species_model_output_cache","title":"store_species_model_output_cache","text":"<pre><code>store_species_model_output_cache(model_output, json_data)\n</code></pre> <p>Store output types to cache.</p> <p>Parameters:</p> Name Type Description Default <code>model_output</code> <code>SpeciesModelOutput</code> <p>SpeciesModelOutput</p> required <code>json_data</code> <p>dictionary from plumber response</p> required Source code in <code>django_project/frontend/utils/statistical_model.py</code> <pre><code>def store_species_model_output_cache(model_output: SpeciesModelOutput,\n                                     json_data):\n    \"\"\"\n    Store output types to cache.\n\n    :param model_output: SpeciesModelOutput\n    :param json_data: dictionary from plumber response\n    \"\"\"\n    metadata = json_data.get('metadata', {})\n    for output_type in CACHED_OUTPUT_TYPES:\n        if output_type not in json_data:\n            continue\n        data = {\n            'metadata': metadata.get(output_type, {}),\n            'results': json_data[output_type]\n        }\n        cache_key = model_output.get_cache_key(output_type)\n        cache.set(cache_key, data, timeout=None)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.statistical_model.write_plumber_data","title":"write_plumber_data","text":"<pre><code>write_plumber_data(headers, csv_data)\n</code></pre> <p>Write csv data to file in plumber_data.</p> <p>Parameters:</p> Name Type Description Default <code>headers</code> <p>list of header name</p> required <code>csv_data</code> <p>list of row</p> required <p>Returns:</p> Type Description <p>file path of exported csv</p> Source code in <code>django_project/frontend/utils/statistical_model.py</code> <pre><code>def write_plumber_data(headers, csv_data):\n    \"\"\"\n    Write csv data to file in plumber_data.\n\n    :param headers: list of header name\n    :param csv_data: list of row\n    :return: file path of exported csv\n    \"\"\"\n    r_data_path = os.path.join(\n        '/home/web/plumber_data',\n        f'{str(uuid4())}.csv'\n    )\n    with open(r_data_path, 'w', encoding='UTF8') as f:\n        writer = csv.writer(f)\n        # write the header\n        writer.writerow(headers)\n        writer.writerows(csv_data)\n    return r_data_path\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.statistical_model.write_plumber_file","title":"write_plumber_file","text":"<pre><code>write_plumber_file(file_path=None)\n</code></pre> <p>Write R codes to plumber.R</p> Source code in <code>django_project/frontend/utils/statistical_model.py</code> <pre><code>def write_plumber_file(file_path = None):\n    \"\"\"Write R codes to plumber.R\"\"\"\n    r_file_path = file_path if file_path else os.path.join(\n        '/home/web/plumber_data',\n        'plumber.R'\n    )\n    template_file = absolute_path(\n        'frontend', 'utils', 'plumber_template.R'\n    )\n    with open(template_file, 'r') as f:\n        lines = f.readlines()\n    # fetch statistical model by species\n    models = StatisticalModel.objects.all()\n    for model in models:\n        lines.append('\\n')\n        if model.taxon:\n            lines.append(\n                f'#* Model for species {model.taxon.scientific_name}\\n')\n            lines.append(f'#* @post /statistical/api_{str(model.id)}\\n')\n        else:\n            lines.append('#* Generic Model\\n')\n            lines.append('#* @post /statistical/generic\\n')\n\n        lines.append('function(filepath, taxon_name) {\\n')\n        lines.append('  raw_data &lt;- read.csv(filepath)\\n')\n        lines.append('  metadata &lt;- list(species=taxon_name,'\n                     'generated_on=format(Sys.time(), '\n                     '\"%Y-%m-%d %H:%M:%S %Z\"))\\n')\n        lines.append('  time_start &lt;- Sys.time()\\n')\n        code_lines = model.code.splitlines()\n        for code in code_lines:\n            lines.append(f'  {code}\\n')\n        lines.append('  metadata[\\'total_execution_time\\'] '\n                     '&lt;- Sys.time() - time_start\\n')\n        # add output\n        model_outputs = StatisticalModelOutput.objects.filter(\n            model=model\n        )\n        output_list = ['metadata=metadata']\n        for output in model_outputs:\n            if output.variable_name:\n                output_list.append(f'{output.type}={output.variable_name}')\n            else:\n                output_list.append(f'{output.type}={output.type}')\n        output_list_str = ','.join(output_list)\n        lines.append(\n            f'  list({output_list_str})\\n'\n        )\n        lines.append('}\\n')\n    with open(r_file_path, 'w') as f:\n        for line in lines:\n            f.write(line)\n    return r_file_path\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.upload_file.get_uploaded_file_crs","title":"get_uploaded_file_crs","text":"<pre><code>get_uploaded_file_crs(file_obj, type)\n</code></pre> <p>Get CRS from uploaded file.</p> Source code in <code>django_project/frontend/utils/upload_file.py</code> <pre><code>def get_uploaded_file_crs(file_obj, type):\n    \"\"\"Get CRS from uploaded file.\"\"\"\n    crs = None\n    # if less than &lt;2MB, it will be InMemoryUploadedFile\n    if isinstance(file_obj, InMemoryUploadedFile):\n        if type == 'SHAPEFILE':\n            # fiona having issues with reading ZipMemoryFile\n            # need to store to temp file\n            tmp_file = _store_zip_memory_to_temp_file(file_obj)\n            file_path = f'zip://{tmp_file}'\n            with fiona.open(file_path) as collection:\n                crs = _get_crs_epsg(collection.crs)\n            if os.path.exists(tmp_file):\n                os.remove(tmp_file)\n        else:\n            # geojson/geopackage can be read using MemoryFile\n            with MemoryFile(file_obj.file) as file:\n                with file.open() as collection:\n                    crs = _get_crs_epsg(collection.crs)\n    else:\n        # TemporaryUploadedFile or just string to file path\n        file_path = file_obj\n        if type == 'SHAPEFILE':\n            if isinstance(file_obj, TemporaryUploadedFile):\n                file_path = f'zip://{file_obj.temporary_file_path()}'\n            else:\n                file_path = f'zip://{file_obj}'\n        with fiona.open(file_path) as collection:\n            crs = _get_crs_epsg(collection.crs)\n    return crs\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.upload_file.normalize_geometry","title":"normalize_geometry","text":"<pre><code>normalize_geometry(geometry)\n</code></pre> <p>This function will do following: - strip z dimension - convert polygon to multipoylgon</p> Source code in <code>django_project/frontend/utils/upload_file.py</code> <pre><code>def normalize_geometry(geometry: GEOSGeometry):\n    \"\"\"\n    This function will do following:\n    - strip z dimension\n    - convert polygon to multipoylgon\n    \"\"\"\n    if geometry is None:\n        return geometry\n    result = geometry\n    if geometry.hasz:\n        wkt_w = WKTWriter()\n        wkt_w.outdim = 2\n        temp = wkt_w.write(geometry)\n        result = GEOSGeometry(temp, srid=4326)\n    if isinstance(result, Polygon):\n        result = MultiPolygon([result], srid=4326)\n    return result\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.upload_file.search_parcels_by_boundary_files","title":"search_parcels_by_boundary_files","text":"<pre><code>search_parcels_by_boundary_files(request)\n</code></pre> <p>Search parcels by uploaded boundary files.</p> Source code in <code>django_project/frontend/utils/upload_file.py</code> <pre><code>def search_parcels_by_boundary_files(request: BoundarySearchRequest):\n    \"\"\"Search parcels by uploaded boundary files.\"\"\"\n    request.task_on_started()\n    request.geometry = None\n    request.parcels = []\n    request.save()\n    # get files from session\n    files = BoundaryFile.objects.filter(session=request.session)\n    total_progress = 0\n    for boundary_file in files:\n        total_progress += get_total_feature_in_file(boundary_file)\n    # multiply total_progress with number of parcel types + 2\n    # add 1 for find province and calculate property size\n    total_progress = (\n        total_progress * (len(PARCEL_SERIALIZER_MAP) + 2)\n    ) + 1\n    current_progress = 0\n    results = []\n    union_geom: GEOSGeometry = None\n    for boundary_file in files:\n        file_path = boundary_file.file.path\n        if boundary_file.file_type == SHAPEFILE:\n            file_path = f'zip://{boundary_file.file.path}'\n        with fiona.open(file_path, encoding='utf-8') as layer:\n            for feature in layer:\n                geom = None\n                try:\n                    geom_str = json.dumps(feature['geometry'])\n                    geom = GEOSGeometry(geom_str, srid=4326)\n                except Exception as ex:\n                    logger.error(\n                        f'Failed to process geometry in file {file_path}')\n                    logger.error(ex)\n                    logger.error(traceback.format_exc())\n                if geom is None:\n                    current_progress += len(PARCEL_SERIALIZER_MAP) + 2\n                    request.update_progress(current_progress, total_progress)\n                    continue\n                if isinstance(geom, Polygon):\n                    geom = MultiPolygon([geom], srid=4326)\n                search_geom = geom.transform(3857, clone=True)\n                current_progress += 1\n                request.update_progress(current_progress, total_progress)\n                # search parcel is only for request with type=Digitise\n                if request.type == 'Digitise':\n                    # iterate from map\n                    for parcel_class, parcel_serializer in\\\n                        PARCEL_SERIALIZER_MAP.items():\n                        parcels, _ = find_parcel_base(\n                            parcel_class,\n                            parcel_serializer,\n                            search_geom\n                        )\n                        if parcels:\n                            results.extend(parcels)\n                        current_progress += 1\n                        request.update_progress(current_progress,\n                                                total_progress)\n                else:\n                    current_progress += len(PARCEL_SERIALIZER_MAP)\n                    request.update_progress(current_progress,\n                                            total_progress)\n                # add to union geom\n                if union_geom:\n                    union_geom = union_geom.union(geom)\n                else:\n                    union_geom = geom\n                current_progress += 1\n                request.update_progress(current_progress, total_progress)\n    request.geometry = normalize_geometry(union_geom)\n    if request.geometry:\n        request.property_size_ha = get_geom_size_in_ha(request.geometry)\n        geom_3857 = request.geometry.transform(3857, clone=True)\n        request.province = find_province(geom_3857,\n                                         Province.objects.first())\n    request.finished_at = datetime.now()\n    request.progress = 100\n    request.parcels = results\n    request.status = DONE if union_geom else ERROR\n    request.save()\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.upload_file.validate_shapefile_zip","title":"validate_shapefile_zip","text":"<pre><code>validate_shapefile_zip(layer_file_path)\n</code></pre> <p>Validate if shapefile zip has correct necessary files.</p> <p>Note: fiona will throw exception only if dbf or shx is missing if there are 2 layers inside the zip, and 1 of them is invalid, then fiona will only return 1 layer</p> Source code in <code>django_project/frontend/utils/upload_file.py</code> <pre><code>def validate_shapefile_zip(layer_file_path: any):\n    \"\"\"\n    Validate if shapefile zip has correct necessary files.\n\n    Note: fiona will throw exception only if dbf or shx is missing\n    if there are 2 layers inside the zip, and 1 of them is invalid,\n    then fiona will only return 1 layer\n    \"\"\"\n    layers = []\n    try:\n        tmp_file = None\n        if isinstance(layer_file_path, InMemoryUploadedFile):\n            tmp_file = _store_zip_memory_to_temp_file(layer_file_path)\n            layers = fiona.listlayers(f'zip://{tmp_file}')\n            if os.path.exists(tmp_file):\n                os.remove(tmp_file)\n        elif isinstance(layer_file_path, TemporaryUploadedFile):\n            layers = fiona.listlayers(\n                f'zip://{layer_file_path.temporary_file_path()}'\n            )\n        else:\n            layers = fiona.listlayers(f'zip://{layer_file_path}')\n    except Exception:\n        pass\n    is_valid = len(layers) &gt; 0\n    error = []\n    names = []\n    with zipfile.ZipFile(layer_file_path, 'r') as zipFile:\n        names = zipFile.namelist()\n    shp_files = [n for n in names if n.endswith('.shp') and '/' not in n]\n    shx_files = [n for n in names if n.endswith('.shx') and '/' not in n]\n    dbf_files = [n for n in names if n.endswith('.dbf') and '/' not in n]\n\n    if is_valid:\n        for filename in layers:\n            if f'{filename}.shp' not in shp_files:\n                error.append(f'{filename}.shp')\n            if f'{filename}.shx' not in shx_files:\n                error.append(f'{filename}.shx')\n            if f'{filename}.dbf' not in dbf_files:\n                error.append(f'{filename}.dbf')\n    else:\n        distinct_files = (\n            [\n                os.path.splitext(shp)[0] for shp in shp_files\n            ] +\n            [\n                os.path.splitext(shx)[0] for shx in shx_files\n            ] +\n            [\n                os.path.splitext(dbf)[0] for dbf in dbf_files\n            ]\n        )\n        distinct_files = list(set(distinct_files))\n        if len(distinct_files) == 0:\n            error.append('No required .shp file')\n        else:\n            for filename in distinct_files:\n                if f'{filename}.shp' not in shp_files:\n                    error.append(f'{filename}.shp')\n                if f'{filename}.shx' not in shx_files:\n                    error.append(f'{filename}.shx')\n                if f'{filename}.dbf' not in dbf_files:\n                    error.append(f'{filename}.dbf')\n    is_valid = is_valid and len(error) == 0\n    return is_valid, error\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.user_roles.check_user_has_permission","title":"check_user_has_permission","text":"<pre><code>check_user_has_permission(user, permission)\n</code></pre> <p>Test if a user has permission.</p> Source code in <code>django_project/frontend/utils/user_roles.py</code> <pre><code>def check_user_has_permission(user: User, permission: str):\n    \"\"\"\n    Test if a user has permission.\n    \"\"\"\n    if user.is_superuser:\n        return True\n    permissions = get_user_permissions(user)\n    return permission in permissions\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.user_roles.get_user_permissions","title":"get_user_permissions","text":"<pre><code>get_user_permissions(user)\n</code></pre> <p>Retrieve the permissions associated with a given user.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>User</code> <p>The user object</p> required <p>Returns:</p> Type Description <code>Set[str]</code> <p>A set containing the names of all permissions associated with the user</p> Source code in <code>django_project/frontend/utils/user_roles.py</code> <pre><code>def get_user_permissions(user: User) -&gt; Set[str]:\n    \"\"\"\n    Retrieve the permissions associated with a given user.\n\n    :param user: The user object\n    :return: A set containing the names of all\n        permissions associated with the user\n    \"\"\"\n    permissions = set()\n    groups = user.groups.all()\n    content_type = ContentType.objects.get_for_model(ExtendedGroup)\n    ext_group_permissions = Permission.objects.filter(\n        content_type=content_type\n    )\n    organisation_id = get_current_organisation_id(user)\n    if organisation_id:\n        organisation = Organisation.objects.get(id=organisation_id)\n        if organisation.national:\n            permissions.add('Can view province report')\n\n    if user.is_superuser:\n        ext_group_permissions_set = set(\n            ext_group_permissions.values_list('name', flat=True)\n        )\n        ext_group_permissions_set = (\n            ext_group_permissions_set - DATA_CONSUMERS_PERMISSIONS\n        )\n        permissions = permissions.union(ext_group_permissions_set)\n        permissions.add('Can view province report')\n\n    for group in groups:\n        allowed_permission = set(\n            group.permissions.filter(\n                id__in=ext_group_permissions\n            ).values_list('name', flat=True)\n        )\n        permissions = permissions.union(allowed_permission)\n\n    if not user.is_superuser:\n        user_roles = set(get_user_roles(user))\n        if user_roles &amp; set(DATA_CONSUMERS):\n            permissions = (\n                permissions - DATA_CONSUMERS_EXCLUDE_PERMISSIONS\n            )\n            permissions.add('Can view report as data consumer')\n            if PROVINCIAL_DATA_CONSUMER in user_roles:\n                permissions.add('Can view report as provincial data consumer')\n        if user_roles &amp; set(DATA_SCIENTISTS):\n            permissions = (\n                permissions - DATA_SCIENTIST_EXCLUDE_PERMISSIONS\n            )\n\n    return permissions\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.user_roles.get_user_roles","title":"get_user_roles","text":"<pre><code>get_user_roles(user)\n</code></pre> <p>Retrieve the roles associated with a given user.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>User</code> <p>The user object</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>A list containing the names of all roles associated with the user</p> Source code in <code>django_project/frontend/utils/user_roles.py</code> <pre><code>def get_user_roles(user: User) -&gt; List[str]:\n    \"\"\"\n    Retrieve the roles associated with a given user.\n\n    :param user: The user object\n    :return: A list containing the names of all\n        roles associated with the user\n    \"\"\"\n    roles = list(\n        user.groups.all().values_list(\n            'name', flat=True\n        )\n    )\n    if user.is_superuser:\n        roles += [SUPER_USER]\n\n    if is_organisation_member(user):\n        roles += [ORGANISATION_MEMBER]\n\n    if is_organisation_manager(user):\n        roles += [ORGANISATION_MANAGER]\n\n    return roles\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.user_roles.is_organisation_manager","title":"is_organisation_manager","text":"<pre><code>is_organisation_manager(user, organisation=None)\n</code></pre> <p>Determines whether a user is a manager of the currently active organisation or of the organisation specified as a parameter, if provided.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>User</code> <p>The user object to check.</p> required <code>organisation</code> <code>Organisation</code> <p>Optional organisation object to check against.</p> <code>None</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if the user is a manager of the organisation, otherwise False.</p> Source code in <code>django_project/frontend/utils/user_roles.py</code> <pre><code>def is_organisation_manager(\n        user: User, organisation: Organisation = None) -&gt; bool:\n    \"\"\"\n    Determines whether a user is a manager of the currently active organisation\n    or of the organisation specified as a parameter, if provided.\n\n    :param user: The user object to check.\n    :param organisation: Optional organisation object to check against.\n    :return: True if the user is a manager of the organisation,\n        otherwise False.\n    \"\"\"\n    if not UserProfile.objects.filter(\n            user=user\n    ).exists():\n        return False\n\n    if not user.user_profile.current_organisation and not organisation:\n        return False\n\n    if organisation:\n        return OrganisationRepresentative.objects.filter(\n            user=user,\n            organisation=organisation\n        ).exists()\n    else:\n        return OrganisationRepresentative.objects.filter(\n            user=user,\n            organisation=user.user_profile.current_organisation\n        ).exists()\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.user_roles.is_organisation_member","title":"is_organisation_member","text":"<pre><code>is_organisation_member(user)\n</code></pre> <p>Determine if a user is a member of the currently active organisation.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>User</code> <p>The user object</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the user is a member, otherwise False</p> Source code in <code>django_project/frontend/utils/user_roles.py</code> <pre><code>def is_organisation_member(user: User) -&gt; bool:\n    \"\"\"\n    Determine if a user is a member of the currently active organisation.\n\n    :param user: The user object\n    :return:  True if the user is a member, otherwise False\n    \"\"\"\n\n    # TODO: Update organisation member checking to use group\n    # Since user with OrganisationUser record will be added to\n    # organisation member/manager group.\n    if not UserProfile.objects.filter(\n        user=user\n    ).exists():\n        return False\n    if not user.user_profile.current_organisation:\n        return False\n\n    return OrganisationUser.objects.filter(\n        user=user,\n        organisation=user.user_profile.current_organisation\n    ).exists()\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.vector_tile.calculate_vector_tile_size","title":"calculate_vector_tile_size","text":"<pre><code>calculate_vector_tile_size()\n</code></pre> <p>Get directory total size.</p> Source code in <code>django_project/frontend/utils/vector_tile.py</code> <pre><code>def calculate_vector_tile_size() -&gt; str:\n    \"\"\"Get directory total size.\"\"\"\n    tile_path = os.path.join(\n        '/',\n        'opt',\n        'layer_tiles',\n        'sanbi'\n    )\n    return get_folder_size(tile_path)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.vector_tile.convert_size","title":"convert_size","text":"<pre><code>convert_size(size_bytes)\n</code></pre> <p>Convert size in bytes to readable text.</p> Source code in <code>django_project/frontend/utils/vector_tile.py</code> <pre><code>def convert_size(size_bytes):\n    \"\"\"Convert size in bytes to readable text.\"\"\"\n    if size_bytes == 0:\n        return \"0B\"\n    size_name = (\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\")\n    i = int(math.floor(math.log(size_bytes, 1024)))\n    p = math.pow(1024, i)\n    s = round(size_bytes / p, 2)\n    return \"%s %s\" % (s, size_name[i])\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.vector_tile.generate_configuration_file","title":"generate_configuration_file","text":"<pre><code>generate_configuration_file()\n</code></pre> <p>Generate tegola config file.</p> Source code in <code>django_project/frontend/utils/vector_tile.py</code> <pre><code>def generate_configuration_file() -&gt; str:\n    \"\"\"Generate tegola config file.\"\"\"\n    template_config_file = absolute_path(\n        'frontend', 'utils', 'config.conf'\n    )\n    result = ''\n    try:\n        directory = os.path.join(\n            '/',\n            'opt',\n            'layer_tiles',\n            'tegola_config'\n        )\n        if not os.path.exists(directory):\n            os.makedirs(directory)\n        out_config_file = os.path.join(\n            '/',\n            'opt',\n            'layer_tiles',\n            'tegola_config',\n            f'context-layer-{uuid4()}.conf'\n        )\n        shutil.copy(template_config_file, out_config_file)\n        result = out_config_file\n    except Exception as ex:\n        logger.error('Error generating configuration file ', ex)\n    return result\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.vector_tile.generate_vector_tiles","title":"generate_vector_tiles","text":"<pre><code>generate_vector_tiles(tiling_task, overwrite=False)\n</code></pre> <p>Generate vector tiles for static context layers.</p> Source code in <code>django_project/frontend/utils/vector_tile.py</code> <pre><code>def generate_vector_tiles(tiling_task: ContextLayerTilingTask,\n                          overwrite: bool = False):\n    \"\"\"Generate vector tiles for static context layers.\"\"\"\n    bbox = get_country_bounding_box()\n    if (\n        not overwrite and tiling_task.config_path and\n        os.path.exists(tiling_task.config_path)\n    ):\n        config_file = tiling_task.config_path\n    else:\n        config_file = generate_configuration_file()\n    tiling_task.status = ContextLayerTilingTask.TileStatus.PROCESSING\n    tiling_task.started_at = datetime.now()\n    tiling_task.finished_at = None\n    tiling_task.total_size = 0\n    tiling_task.task_return_code = None\n    tiling_task.log = None\n    tiling_task.error_log = None\n    tiling_task.config_path = config_file\n    tiling_task.save(\n        update_fields=[\n            'status', 'started_at', 'finished_at',\n            'total_size', 'task_return_code', 'log',\n            'error_log', 'config_path'\n        ]\n    )\n\n    command_list = (\n        [\n            '/opt/tegola',\n            'cache',\n            'seed',\n            '--config',\n            config_file,\n            '--overwrite' if overwrite else '',\n            '--concurrency',\n            '2',\n        ]\n    )\n    _bbox = []\n    for coord in bbox:\n        _bbox.append(str(round(float(coord), 3)))\n    command_list.extend([\n        '--bounds',\n        ','.join(_bbox)\n    ])\n    command_list.extend([\n        '--min-zoom',\n        '0',\n        '--max-zoom',\n        '24'\n    ])\n    logger.info('Starting vector tile generation')\n    result = subprocess.run(command_list)\n    return_code = result.returncode\n    logger.info(\n        f'Finished generating vector tile with return code {return_code}')\n    # move temporary folder to sanbi folder\n    destination_tile_path = os.path.join(\n        '/',\n        'opt',\n        'layer_tiles',\n        'sanbi'\n    )\n    source_tile_path = os.path.join(\n        '/',\n        'opt',\n        'layer_tiles',\n        'tmp',\n        'sanbi'\n    )\n    if os.path.exists(destination_tile_path):\n        shutil.rmtree(destination_tile_path)\n\n    try:\n        shutil.move(\n            source_tile_path,\n            destination_tile_path\n        )\n    except FileNotFoundError as ex:\n        return_code = 999\n        logger.error('Unable to move vector tile directory', ex)\n    logger.info('Finished moving vector tile to sanbi directory')\n    # finish generation\n    tiling_task.finished_at = datetime.now()\n    tiling_task.total_size = calculate_vector_tile_size()\n    tiling_task.status = (\n        ContextLayerTilingTask.TileStatus.DONE if return_code == 0 else\n        ContextLayerTilingTask.TileStatus.ERROR\n    )\n    tiling_task.task_return_code = return_code\n    tiling_task.save(\n        update_fields=[\n            'status', 'finished_at',\n            'total_size', 'task_return_code', 'log',\n            'error_log'\n        ]\n    )\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.vector_tile.get_country_bounding_box","title":"get_country_bounding_box","text":"<pre><code>get_country_bounding_box()\n</code></pre> <p>Get South Africa bbox.</p> Source code in <code>django_project/frontend/utils/vector_tile.py</code> <pre><code>def get_country_bounding_box():\n    \"\"\"Get South Africa bbox.\"\"\"\n    bbox = []\n    iso3 = 'ZAF'\n    with connection.cursor() as cursor:\n        cursor.execute(\n            'SELECT ST_Extent(ST_TRANSFORM(w.geom, 4326)) as bextent '\n            'FROM layer.world w '\n            'WHERE w.\"ISO_A3\"=%s', [iso3]\n        )\n        extent = cursor.fetchone()\n        if extent:\n            try:\n                bbox = re.findall(r'[-+]?(?:\\d*\\.\\d+|\\d+)', extent[0])\n            except TypeError:\n                pass\n    return bbox\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.utils.vector_tile.get_folder_size","title":"get_folder_size","text":"<pre><code>get_folder_size(directory_path)\n</code></pre> <p>Get directory size in bytes.</p> Source code in <code>django_project/frontend/utils/vector_tile.py</code> <pre><code>def get_folder_size(directory_path):\n    \"\"\"Get directory size in bytes.\"\"\"\n    if not os.path.exists(directory_path):\n        return '0'\n    folder_size = 0\n    # get size\n    for path, dirs, files in os.walk(directory_path):\n        for f in files:\n            fp = os.path.join(path, f)\n            folder_size += os.stat(fp).st_size\n    return convert_size(folder_size)\n</code></pre>"},{"location":"developer/manual/notification/","title":"IDS SAWPS","text":""},{"location":"developer/manual/notification/#admin","title":"Admin","text":""},{"location":"developer/manual/notification/#django_project.notification.admin.ReminderAdmin","title":"ReminderAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Admin page for Reminder model</p>"},{"location":"developer/manual/notification/#models","title":"Models","text":""},{"location":"developer/manual/notification/#django_project.notification.models.reminder.Reminder","title":"Reminder","text":"<p>               Bases: <code>Model</code></p> <p>Reminder notification model</p>"},{"location":"developer/manual/notification/#test-case","title":"Test Case","text":""},{"location":"developer/manual/notification/#django_project.notification.tests.test_api_views.TestApiView","title":"TestApiView","text":"<p>               Bases: <code>TestCase</code></p> <p>Test all api view</p>"},{"location":"developer/manual/notification/#django_project.notification.tests.test_api_views.TestApiView.test_get_reminder_api","title":"test_get_reminder_api","text":"<pre><code>test_get_reminder_api()\n</code></pre> <p>Test reminder api</p> Source code in <code>django_project/notification/tests/test_api_views.py</code> <pre><code>@override_settings(DISABLE_2FA=True)\ndef test_get_reminder_api(self):\n    \"\"\"Test reminder api\"\"\"\n    ReminderF.create(\n        id=1,\n        title='Title test 1',\n        text='Reminder text 1',\n        status='active',\n    )\n\n    self.client.login(username=self.user.username, password='password')\n\n    pk = '1'\n    api_url = '/api/reminder/?reminderId=' + pk\n    response = self.client.get(api_url)\n\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertTrue('id' in response.data)\n</code></pre>"},{"location":"developer/manual/notification/#django_project.notification.tests.test_api_views.TestApiView.test_list_reminders_api","title":"test_list_reminders_api","text":"<pre><code>test_list_reminders_api()\n</code></pre> <p>Test reminder aip</p> Source code in <code>django_project/notification/tests/test_api_views.py</code> <pre><code>@override_settings(DISABLE_2FA=True)\ndef test_list_reminders_api(self):\n    \"\"\"Test reminder aip\"\"\"\n    ReminderF.create(\n        id=1,\n        title='Title test 1',\n        text='Reminder text 1',\n        status='active',\n    )\n    ReminderF.create(\n        title='Title test 2',\n        text='Reminder text 2',\n        status='active',\n    )\n\n    self.client.login(username=self.user.username, password='password')\n\n    reminder_status = 'active'\n    api_url = '/api/reminders/?status=' + reminder_status\n    response = self.client.get(api_url)\n\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(len(response.data), 2)\n</code></pre>"},{"location":"developer/manual/notification/#django_project.notification.tests.test_reminder.TestReminder","title":"TestReminder","text":"<p>               Bases: <code>TestCase</code></p> <p>Test for Reminder model</p>"},{"location":"developer/manual/notification/#django_project.notification.tests.test_reminder.TestReminder.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>setup test data</p> Source code in <code>django_project/notification/tests/test_reminder.py</code> <pre><code>def setUp(self) -&gt; None:\n    \"\"\"setup test data\"\"\"\n    self.reminder = ReminderF(title='title0', text='text0')\n</code></pre>"},{"location":"developer/manual/notification/#django_project.notification.tests.test_reminder.TestReminder.test_create_reminder","title":"test_create_reminder","text":"<pre><code>test_create_reminder()\n</code></pre> <p>test create reminder</p> Source code in <code>django_project/notification/tests/test_reminder.py</code> <pre><code>def test_create_reminder(self):\n    \"\"\"test create reminder\"\"\"\n    self.assertEqual(self.reminder.title, 'title0')\n    self.assertEqual(self.reminder.text, 'text0')\n    self.assertEqual(Reminder.objects.count(), 1)\n</code></pre>"},{"location":"developer/manual/notification/#django_project.notification.tests.test_reminder.TestReminder.test_delete_reminder","title":"test_delete_reminder","text":"<pre><code>test_delete_reminder()\n</code></pre> <p>test delete reminder</p> Source code in <code>django_project/notification/tests/test_reminder.py</code> <pre><code>def test_delete_reminder(self):\n    \"\"\"test delete reminder\"\"\"\n    self.reminder.delete()\n    self.assertEqual(Reminder.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/notification/#django_project.notification.tests.test_reminder.TestReminder.test_update_reminder","title":"test_update_reminder","text":"<pre><code>test_update_reminder()\n</code></pre> <p>test update reminder</p> Source code in <code>django_project/notification/tests/test_reminder.py</code> <pre><code>def test_update_reminder(self):\n    \"\"\"test update reminder\"\"\"\n    self.reminder.title = 'Test title'\n    self.reminder.status = 'draft'\n    self.reminder.save()\n    self.assertEqual(self.reminder.title, 'Test title')\n    self.assertEqual(self.reminder.status, 'draft')\n</code></pre>"},{"location":"developer/manual/occurrence/","title":"IDS SAWPS","text":""},{"location":"developer/manual/occurrence/#admin","title":"Admin","text":"<p>Admin page for Occurrence models.</p>"},{"location":"developer/manual/occurrence/#django_project.occurrence.admin.SurveyMethodAdmin","title":"SurveyMethodAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Admin page for SurveyMethod model</p>"},{"location":"developer/manual/occurrence/#factories","title":"Factories","text":""},{"location":"developer/manual/occurrence/#django_project.occurrence.factories.SamplingSizeUnitFactory","title":"SamplingSizeUnitFactory","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Sampling size unit factory.</p>"},{"location":"developer/manual/occurrence/#django_project.occurrence.factories.SurveyMethodFactory","title":"SurveyMethodFactory","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Survey method factory.</p>"},{"location":"developer/manual/occurrence/#models","title":"Models","text":""},{"location":"developer/manual/occurrence/#django_project.occurrence.models.SamplingSizeUnit","title":"SamplingSizeUnit","text":"<p>               Bases: <code>Model</code></p> <p>Sampling size unit model.</p>"},{"location":"developer/manual/occurrence/#django_project.occurrence.models.SurveyMethod","title":"SurveyMethod","text":"<p>               Bases: <code>Model</code></p> <p>Survey method model.</p>"},{"location":"developer/manual/occurrence/#test-case","title":"Test Case","text":""},{"location":"developer/manual/occurrence/#django_project.occurrence.test_occurrence_models.SamplingSizeUnitTestCase","title":"SamplingSizeUnitTestCase","text":"<p>               Bases: <code>TestCase</code></p> <p>Sampling size unit testcase.</p>"},{"location":"developer/manual/occurrence/#django_project.occurrence.test_occurrence_models.SamplingSizeUnitTestCase.setUpTestData","title":"setUpTestData  <code>classmethod</code>","text":"<pre><code>setUpTestData()\n</code></pre> <p>Setup test data.</p> Source code in <code>django_project/occurrence/test_occurrence_models.py</code> <pre><code>@classmethod\ndef setUpTestData(cls):\n    \"\"\"Setup test data.\"\"\"\n    cls.sampling_size_unit = SamplingSizeUnitFactory(unit='cm')\n</code></pre>"},{"location":"developer/manual/occurrence/#django_project.occurrence.test_occurrence_models.SamplingSizeUnitTestCase.test_create_sampling_size_unit","title":"test_create_sampling_size_unit","text":"<pre><code>test_create_sampling_size_unit()\n</code></pre> <p>Test create sampling size unit.</p> Source code in <code>django_project/occurrence/test_occurrence_models.py</code> <pre><code>def test_create_sampling_size_unit(self):\n    \"\"\"Test create sampling size unit.\"\"\"\n    self.assertTrue(isinstance(self.sampling_size_unit, SamplingSizeUnit))\n    self.assertEqual(SamplingSizeUnit.objects.count(), 1)\n    self.assertEqual(self.sampling_size_unit.unit, 'cm')\n</code></pre>"},{"location":"developer/manual/occurrence/#django_project.occurrence.test_occurrence_models.SamplingSizeUnitTestCase.test_delete_sampling_size_unit","title":"test_delete_sampling_size_unit","text":"<pre><code>test_delete_sampling_size_unit()\n</code></pre> <p>Test delete sampling size unit.</p> Source code in <code>django_project/occurrence/test_occurrence_models.py</code> <pre><code>def test_delete_sampling_size_unit(self):\n    \"\"\"Test delete sampling size unit.\"\"\"\n    self.sampling_size_unit.delete()\n    self.assertEqual(SamplingSizeUnit.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/occurrence/#django_project.occurrence.test_occurrence_models.SamplingSizeUnitTestCase.test_sampling_size_unit_unique_unit_constraint","title":"test_sampling_size_unit_unique_unit_constraint","text":"<pre><code>test_sampling_size_unit_unique_unit_constraint()\n</code></pre> <p>Testing unique values for the unit.</p> Source code in <code>django_project/occurrence/test_occurrence_models.py</code> <pre><code>def test_sampling_size_unit_unique_unit_constraint(self):\n    \"\"\"Testing unique values for the unit.\"\"\"\n    with self.assertRaises(Exception) as raised:\n        SamplingSizeUnitFactory(unit='mm')\n        self.assertEqual(raised.exception, IntegrityError)\n</code></pre>"},{"location":"developer/manual/occurrence/#django_project.occurrence.test_occurrence_models.SamplingSizeUnitTestCase.test_update_sampling_size_unit","title":"test_update_sampling_size_unit","text":"<pre><code>test_update_sampling_size_unit()\n</code></pre> <p>Test update sampling size unit.</p> Source code in <code>django_project/occurrence/test_occurrence_models.py</code> <pre><code>def test_update_sampling_size_unit(self):\n    \"\"\"Test update sampling size unit.\"\"\"\n    self.sampling_size_unit.unit = 'mm'\n    self.sampling_size_unit.save()\n    self.assertEqual(SamplingSizeUnit.objects.get(id=self.sampling_size_unit.id).unit, 'mm')\n</code></pre>"},{"location":"developer/manual/occurrence/#django_project.occurrence.test_occurrence_models.SurveyMethodTestCase","title":"SurveyMethodTestCase","text":"<p>               Bases: <code>TestCase</code></p> <p>Survey method test case.</p>"},{"location":"developer/manual/occurrence/#django_project.occurrence.test_occurrence_models.SurveyMethodTestCase.setUpTestData","title":"setUpTestData  <code>classmethod</code>","text":"<pre><code>setUpTestData()\n</code></pre> <p>Setup test data.</p> Source code in <code>django_project/occurrence/test_occurrence_models.py</code> <pre><code>@classmethod\ndef setUpTestData(cls):\n    \"\"\"Setup test data.\"\"\"\n    cls.survey_method = SurveyMethodFactory()\n</code></pre>"},{"location":"developer/manual/occurrence/#django_project.occurrence.test_occurrence_models.SurveyMethodTestCase.test_create_survey_method","title":"test_create_survey_method","text":"<pre><code>test_create_survey_method()\n</code></pre> <p>Test create survey method.</p> Source code in <code>django_project/occurrence/test_occurrence_models.py</code> <pre><code>def test_create_survey_method(self):\n    \"\"\"Test create survey method.\"\"\"\n    self.assertTrue(\n        isinstance(self.survey_method, SurveyMethod)\n    )\n    self.assertEqual(SurveyMethod.objects.count(), 1)\n    self.assertEqual(self.survey_method.name, SurveyMethod.objects.get(id=self.survey_method.id).name)\n</code></pre>"},{"location":"developer/manual/occurrence/#django_project.occurrence.test_occurrence_models.SurveyMethodTestCase.test_delete_survey_method","title":"test_delete_survey_method","text":"<pre><code>test_delete_survey_method()\n</code></pre> <p>Test delete survey method.</p> Source code in <code>django_project/occurrence/test_occurrence_models.py</code> <pre><code>def test_delete_survey_method(self):\n    \"\"\"Test delete survey method.\"\"\"\n    self.survey_method.delete()\n    self.assertEqual(SurveyMethod.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/occurrence/#django_project.occurrence.test_occurrence_models.SurveyMethodTestCase.test_survey_method_unique_name_constraint","title":"test_survey_method_unique_name_constraint","text":"<pre><code>test_survey_method_unique_name_constraint()\n</code></pre> <p>Test survey method unique name constraint.</p> Source code in <code>django_project/occurrence/test_occurrence_models.py</code> <pre><code>def test_survey_method_unique_name_constraint(self):\n    \"\"\"Test survey method unique name constraint.\"\"\"\n    with self.assertRaises(Exception) as raised:\n        SurveyMethodFactory(name='survey method 0')\n        self.assertEqual(IntegrityError, type(raised.exception))\n</code></pre>"},{"location":"developer/manual/occurrence/#django_project.occurrence.test_occurrence_models.SurveyMethodTestCase.test_survey_method_unique_sort_id_constraint","title":"test_survey_method_unique_sort_id_constraint","text":"<pre><code>test_survey_method_unique_sort_id_constraint()\n</code></pre> <p>Test survey method unique sort id constraint.</p> Source code in <code>django_project/occurrence/test_occurrence_models.py</code> <pre><code>def test_survey_method_unique_sort_id_constraint(self):\n    \"\"\"Test survey method unique sort id constraint.\"\"\"\n    with self.assertRaises(Exception) as raised:\n        SurveyMethodFactory(sort_id=0)\n        self.assertEqual(IntegrityError, type(raised.exception))\n</code></pre>"},{"location":"developer/manual/occurrence/#django_project.occurrence.test_occurrence_models.SurveyMethodTestCase.test_update_survey_method","title":"test_update_survey_method","text":"<pre><code>test_update_survey_method()\n</code></pre> <p>Test update survey method.</p> Source code in <code>django_project/occurrence/test_occurrence_models.py</code> <pre><code>def test_update_survey_method(self):\n    \"\"\"Test update survey method.\"\"\"\n    self.survey_method.name = 'survey method 1'\n    self.survey_method.save()\n    self.assertEqual(\n        SurveyMethod.objects.get(id=self.survey_method.id).name,\n        'survey method 1',\n    )\n</code></pre>"},{"location":"developer/manual/population_data/","title":"IDS SAWPS","text":""},{"location":"developer/manual/population_data/#admin","title":"Admin","text":"<p>Admin for population data package.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.admin.OpenCloseSystemAdmin","title":"OpenCloseSystemAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Admin page for OpenCloseSystem model</p>"},{"location":"developer/manual/population_data/#django_project.population_data.admin.PopulationEstimateCategoryAdmin","title":"PopulationEstimateCategoryAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Admin page for PopulationEstimateCategory model</p>"},{"location":"developer/manual/population_data/#django_project.population_data.admin.PopulationStatusAdmin","title":"PopulationStatusAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Admin page for PopulationStatus model</p>"},{"location":"developer/manual/population_data/#django_project.population_data.admin.SamplingEffortCoverageAdmin","title":"SamplingEffortCoverageAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Admin page for SamplingEffortCoverage model</p>"},{"location":"developer/manual/population_data/#factories","title":"Factories","text":"<p>Test factories for population data package.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.factories.AnnualPopulationAbstractFactory","title":"AnnualPopulationAbstractFactory","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Population count abstract factory.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.factories.AnnualPopulationF","title":"AnnualPopulationF","text":"<p>               Bases: <code>AnnualPopulationAbstractFactory</code></p> <p>Population count factory.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.factories.AnnualPopulationPerActivityFactory","title":"AnnualPopulationPerActivityFactory","text":"<p>               Bases: <code>AnnualPopulationAbstractFactory</code></p> <p>Population count per activity factory.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.factories.CertaintyF","title":"CertaintyF","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Certainty factory.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.factories.CertaintyF.Meta","title":"Meta","text":"<p>meta</p>"},{"location":"developer/manual/population_data/#django_project.population_data.factories.OpenCloseSystemF","title":"OpenCloseSystemF","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Open Close System factory.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.factories.OpenCloseSystemF.Meta","title":"Meta","text":"<p>meta</p>"},{"location":"developer/manual/population_data/#django_project.population_data.factories.PopulationEstimateCategoryF","title":"PopulationEstimateCategoryF","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Population Status factory.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.factories.PopulationEstimateCategoryF.Meta","title":"Meta","text":"<p>meta</p>"},{"location":"developer/manual/population_data/#django_project.population_data.factories.PopulationStatusF","title":"PopulationStatusF","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Population Status factory.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.factories.PopulationStatusF.Meta","title":"Meta","text":"<p>meta</p>"},{"location":"developer/manual/population_data/#django_project.population_data.factories.SamplingEffortCoverageF","title":"SamplingEffortCoverageF","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>SamplingEffortCoverage factory.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.factories.SamplingEffortCoverageF.Meta","title":"Meta","text":"<p>meta</p>"},{"location":"developer/manual/population_data/#models","title":"Models","text":"<p>Models for population data package.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.models.AnnualPopulation","title":"AnnualPopulation","text":"<p>               Bases: <code>AnnualPopulationAbstract</code></p> <p>Annual Population model.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.models.AnnualPopulation.clean","title":"clean","text":"<pre><code>clean()\n</code></pre> <p>Custom validation to ensure area_available_to_species is not greater than property_size_ha.</p> Source code in <code>django_project/population_data/models.py</code> <pre><code>def clean(self):\n    \"\"\"\n    Custom validation to ensure area_available_to_species is\n    not greater than property_size_ha.\n    \"\"\"\n    if self.area_available_to_species and self.property.property_size_ha:\n        if float(\n            self.area_available_to_species\n        ) &gt; float(\n            self.property.property_size_ha\n        ):\n            raise ValidationError({\n                'area_available_to_species': AREA_AVAILABLE_ERROR_MESSAGE\n            })\n\n    super().clean()\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.models.AnnualPopulationAbstract","title":"AnnualPopulationAbstract","text":"<p>               Bases: <code>Model</code></p> <p>\"Annual Population model.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.models.AnnualPopulationAbstract.clean","title":"clean","text":"<pre><code>clean()\n</code></pre> <p>Custom validation to ensure the sum of adult_male and adult_female is not greater than total.</p> Source code in <code>django_project/population_data/models.py</code> <pre><code>def clean(self):\n    \"\"\"\n    Custom validation to ensure the sum of adult_male and adult_female\n    is not greater than total.\n    \"\"\"\n    if self.adult_male is not None or self.adult_female is not None:\n        adult_male = self.adult_male if self.adult_male else 0\n        adult_female = self.adult_female if self.adult_female else 0\n        if adult_male + adult_female &gt; self.total:\n            raise ValidationError({\n                'adult_male': TOTAL_POPULATION_ERROR_MESSAGE,\n                'adult_female': TOTAL_POPULATION_ERROR_MESSAGE,\n            })\n\n    super().clean()\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.models.AnnualPopulationPerActivity","title":"AnnualPopulationPerActivity","text":"<p>               Bases: <code>AnnualPopulationAbstract</code></p> <p>Annual Population per activity model.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.models.Certainty","title":"Certainty","text":"<p>               Bases: <code>Model</code></p> <p>Certainty model.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.models.OpenCloseSystem","title":"OpenCloseSystem","text":"<p>               Bases: <code>Model</code></p> <p>Open Close System model.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.models.PopulationEstimateCategory","title":"PopulationEstimateCategory","text":"<p>               Bases: <code>Model</code></p> <p>Population Estimate Category model.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.models.PopulationStatus","title":"PopulationStatus","text":"<p>               Bases: <code>Model</code></p> <p>Population status model.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.models.SamplingEffortCoverage","title":"SamplingEffortCoverage","text":"<p>               Bases: <code>Model</code></p> <p>Sampling Effort Coverage model.</p>"},{"location":"developer/manual/population_data/#serializers","title":"Serializers","text":"<p>Serializers for population data package.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.serializers.CertaintySerializer","title":"CertaintySerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>Certainty Serializer</p>"},{"location":"developer/manual/population_data/#django_project.population_data.serializers.OpenCloseSystemSerializer","title":"OpenCloseSystemSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>OpenClose System Serializer</p>"},{"location":"developer/manual/population_data/#django_project.population_data.serializers.PopulationEstimateCategorySerializer","title":"PopulationEstimateCategorySerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>PopulationEstimateCategory Serializer</p>"},{"location":"developer/manual/population_data/#django_project.population_data.serializers.PopulationStatusSerializer","title":"PopulationStatusSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>PopulationStatus Serializer</p>"},{"location":"developer/manual/population_data/#django_project.population_data.serializers.SamplingEffortCoverageSerializer","title":"SamplingEffortCoverageSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>SamplingEffortCoverage Serializer</p>"},{"location":"developer/manual/population_data/#test-case","title":"Test Case","text":"<p>Test case for population data models.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.AnnualPopulationPerActivityTestCase","title":"AnnualPopulationPerActivityTestCase","text":"<p>               Bases: <code>TestCase</code></p> <p>Population count test case.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.AnnualPopulationPerActivityTestCase.setUpTestData","title":"setUpTestData  <code>classmethod</code>","text":"<pre><code>setUpTestData()\n</code></pre> <p>SetUpTestData for population count test case.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>@classmethod\ndef setUpTestData(cls):\n    \"\"\"SetUpTestData for population count test case.\"\"\"\n    taxon = Taxon.objects.create(\n        scientific_name='taxon_0',\n        common_name_verbatim='taxon_0',\n        colour_variant=False,\n        taxon_rank=TaxonRankFactory(),\n    )\n    user = User.objects.create_user(username='testuser', password='12345')\n    population = AnnualPopulationF(\n        taxon=taxon,\n        user=user,\n        total=120,\n        adult_male=19,\n        adult_female=100\n    )\n    cls.population_count = AnnualPopulationPerActivityFactory(\n        annual_population=population,\n        intake_permit='1',\n        offtake_permit='1'\n    )\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.AnnualPopulationPerActivityTestCase.test_create_population_count","title":"test_create_population_count","text":"<pre><code>test_create_population_count()\n</code></pre> <p>Test create population count.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def test_create_population_count(self):\n    \"\"\"Test create population count.\"\"\"\n    self.assertTrue(\n        isinstance(self.population_count, AnnualPopulationPerActivity)\n    )\n    self.assertTrue(\n        AnnualPopulationPerActivity.objects.filter(\n            id=self.population_count.id\n        ).exists()\n    )\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.AnnualPopulationPerActivityTestCase.test_delete_population_count","title":"test_delete_population_count","text":"<pre><code>test_delete_population_count()\n</code></pre> <p>Test delete population count.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def test_delete_population_count(self):\n    \"\"\"Test delete population count.\"\"\"\n    initial_count = AnnualPopulationPerActivity.objects.count()\n    self.population_count.delete()\n    with self.assertRaises(AnnualPopulationPerActivity.DoesNotExist):\n        AnnualPopulationPerActivity.objects.get(pk=self.population_count.pk)\n    self.assertEqual(\n        AnnualPopulationPerActivity.objects.count(),\n        initial_count - 1,\n        msg=\"The count of AnnualPopulationPerActivity\"\n        \"instances did not decrease by 1 after deletion.\"\n    )\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.AnnualPopulationPerActivityTestCase.test_update_population_count","title":"test_update_population_count","text":"<pre><code>test_update_population_count()\n</code></pre> <p>Test update population count.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def test_update_population_count(self):\n    \"\"\"Test update population count.\"\"\"\n    self.population_count.total = 100\n    self.population_count.save()\n    self.assertEqual(\n        AnnualPopulationPerActivity.objects.get(year=self.population_count.year).total, 100\n    )\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.AnnualPopulationPerActivityTestCase.test_year_activity_type_fields_unique_toghter_constraint","title":"test_year_activity_type_fields_unique_toghter_constraint","text":"<pre><code>test_year_activity_type_fields_unique_toghter_constraint()\n</code></pre> <p>Test year, annual population, and activity_type are unique togther.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def test_year_activity_type_fields_unique_toghter_constraint(self):\n    \"\"\"Test year, annual population, and activity_type are unique togther.\"\"\"\n    with self.assertRaises(IntegrityError) as raised:\n        AnnualPopulationPerActivityFactory(\n            annual_population=self.population_count.annual_population,\n            year=self.population_count.year,\n            activity_type=self.population_count.activity_type,\n            intake_permit='1',\n            offtake_permit='1'\n        )\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.PopulationCountTestCase","title":"PopulationCountTestCase","text":"<p>               Bases: <code>TestCase</code></p> <p>Population count test case.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.PopulationCountTestCase.setUpTestData","title":"setUpTestData  <code>classmethod</code>","text":"<pre><code>setUpTestData()\n</code></pre> <p>SetUpTestData for population count test case.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>@classmethod\ndef setUpTestData(cls):\n    \"\"\"SetUpTestData for population count test case.\"\"\"\n    taxon = TaxonFactory.create(\n        scientific_name='taxon_0',\n        common_name_verbatim='taxon_0',\n        colour_variant=False,\n        taxon_rank=TaxonRankFactory(),\n    )\n    user = User.objects.create_user(username='testuser', password='12345')\n    cls.population_count = AnnualPopulationF(\n        taxon=taxon,\n        user=user,\n        total=120,\n        adult_male=19,\n        adult_female=100,\n        adult_total=119\n    )\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.PopulationCountTestCase.test_adult_population_validation","title":"test_adult_population_validation","text":"<pre><code>test_adult_population_validation()\n</code></pre> <p>Test that a ValidationError is raised when the sum of adult_male and adult_female exceeds the total.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def test_adult_population_validation(self):\n    \"\"\"\n    Test that a ValidationError is raised when the sum of adult_male and\n    adult_female exceeds the total.\n    \"\"\"\n    data = {\n        'year': 2023,\n        'total': 100,\n        'adult_male': 60,\n        'adult_female': 50,\n    }\n    with self.assertRaises(ValidationError):\n        population_instance = AnnualPopulation(**data)\n        population_instance.clean()\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.PopulationCountTestCase.test_area_available_to_species","title":"test_area_available_to_species","text":"<pre><code>test_area_available_to_species()\n</code></pre> <p>Test that a ValidationError is raised when area available to species exceeds property size.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def test_area_available_to_species(self):\n    \"\"\"\n    Test that a ValidationError is raised when area available to species\n    exceeds property size.\n    \"\"\"\n    property_obj = self.population_count.property\n    data = {\n        'year': 2023,\n        'total': 100,\n        'area_available_to_species': 100000,\n        'property': property_obj\n    }\n    with self.assertRaises(ValidationError):\n        population_instance = AnnualPopulation(**data)\n        population_instance.clean()\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.PopulationCountTestCase.test_create_population_count","title":"test_create_population_count","text":"<pre><code>test_create_population_count()\n</code></pre> <p>Test create population count.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def test_create_population_count(self):\n    \"\"\"Test create population count.\"\"\"\n    self.assertTrue(\n        isinstance(self.population_count, AnnualPopulation)\n    )\n    self.assertTrue(\n        AnnualPopulation.objects.filter(\n            id=self.population_count.id\n        ).exists()\n    )\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.PopulationCountTestCase.test_delete_population_count","title":"test_delete_population_count","text":"<pre><code>test_delete_population_count()\n</code></pre> <p>Test delete population count.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def test_delete_population_count(self):\n    \"\"\"Test delete population count.\"\"\"\n    self.population_count.delete()\n    self.assertFalse(\n        AnnualPopulation.objects.filter(id=self.population_count.id).exists()\n    )\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.TestCertainty","title":"TestCertainty","text":"<p>               Bases: <code>TestCase</code></p> <p>Test for certainty model.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.TestCertainty.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>setup test data</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def setUp(self) -&gt; None:\n    \"\"\"setup test data\"\"\"\n    self.Certainty = CertaintyF(name='name', description='text')\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.TestCertainty.test_create_certainty","title":"test_create_certainty","text":"<pre><code>test_create_certainty()\n</code></pre> <p>test create certainty.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def test_create_certainty(self):\n    \"\"\"test create certainty.\"\"\"\n    self.assertEqual(self.Certainty.name, 'name')\n    self.assertEqual(self.Certainty.description, 'text')\n    self.assertEqual(Certainty.objects.count(), 1)\n    self.assertEqual(str(self.Certainty), self.Certainty.name)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.TestCertainty.test_delete_certainty","title":"test_delete_certainty","text":"<pre><code>test_delete_certainty()\n</code></pre> <p>test delete certainty.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def test_delete_certainty(self):\n    \"\"\"test delete certainty.\"\"\"\n    self.Certainty.delete()\n    self.assertEqual(Certainty.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.TestCertainty.test_update_Certainty","title":"test_update_Certainty","text":"<pre><code>test_update_Certainty()\n</code></pre> <p>test update certainty.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def test_update_Certainty(self):\n    \"\"\"test update certainty.\"\"\"\n    self.Certainty.name = 'Certainty'\n    self.Certainty.description = 'Certainty description'\n    self.Certainty.save()\n    self.assertEqual(self.Certainty.name, 'Certainty')\n    self.assertEqual(self.Certainty.description, 'Certainty description')\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.TestOpenCloseSystem","title":"TestOpenCloseSystem","text":"<p>               Bases: <code>TestCase</code></p> <p>Test for open close system model.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.TestOpenCloseSystem.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>setup test data</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def setUp(self) -&gt; None:\n    \"\"\"setup test data\"\"\"\n    self.open_close_sustem = OpenCloseSystemF(name='name')\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.TestOpenCloseSystem.test_create_open_close_system","title":"test_create_open_close_system","text":"<pre><code>test_create_open_close_system()\n</code></pre> <p>test create open close system.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def test_create_open_close_system(self):\n    \"\"\"test create open close system.\"\"\"\n    self.assertEqual(self.open_close_sustem.name, 'name')\n    self.assertEqual(OpenCloseSystem.objects.count(), 1)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.TestOpenCloseSystem.test_delete_open_close_system","title":"test_delete_open_close_system","text":"<pre><code>test_delete_open_close_system()\n</code></pre> <p>test delete open close system.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def test_delete_open_close_system(self):\n    \"\"\"test delete open close system.\"\"\"\n    self.open_close_sustem.delete()\n    self.assertEqual(OpenCloseSystem.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.TestOpenCloseSystem.test_update_open_close_system","title":"test_update_open_close_system","text":"<pre><code>test_update_open_close_system()\n</code></pre> <p>test update open close system.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def test_update_open_close_system(self):\n    \"\"\"test update open close system.\"\"\"\n    self.open_close_sustem.name = 'OpenCloseSystem'\n    self.open_close_sustem.save()\n    self.assertEqual(self.open_close_sustem.name, 'OpenCloseSystem')\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.TestPopulationEstimateCategory","title":"TestPopulationEstimateCategory","text":"<p>               Bases: <code>TestCase</code></p> <p>Test for population estimate category model.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.TestPopulationEstimateCategory.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>setup test data.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def setUp(self) -&gt; None:\n    \"\"\"setup test data.\"\"\"\n    self.population_estimate_category = PopulationEstimateCategoryF(\n        name='name'\n        )\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.TestPopulationEstimateCategory.test_create_population_estimate","title":"test_create_population_estimate","text":"<pre><code>test_create_population_estimate()\n</code></pre> <p>test create population estimate category.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def test_create_population_estimate(self):\n    \"\"\"test create population estimate category.\"\"\"\n    self.assertEqual(self.population_estimate_category.name, 'name')\n    self.assertEqual(str(self.population_estimate_category), 'name')\n    self.assertEqual(PopulationEstimateCategory.objects.count(), 1)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.TestPopulationEstimateCategory.test_delete_population_estimate","title":"test_delete_population_estimate","text":"<pre><code>test_delete_population_estimate()\n</code></pre> <p>test delete population estimate category.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def test_delete_population_estimate(self):\n    \"\"\"test delete population estimate category.\"\"\"\n    self.population_estimate_category.delete()\n    self.assertEqual(PopulationEstimateCategory.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.TestPopulationEstimateCategory.test_population_estimate_name_constraint","title":"test_population_estimate_name_constraint","text":"<pre><code>test_population_estimate_name_constraint()\n</code></pre> <p>Test population estimate category name contraint.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def test_population_estimate_name_constraint(self):\n    \"\"\"Test population estimate category name contraint.\"\"\"\n    another = PopulationEstimateCategoryF(name='Population estimate')\n    self.assertEqual(PopulationEstimateCategory.objects.count(), 2)\n    self.assertNotEqual(\n        self.population_estimate_category.name,\n        another.name\n    )\n    with self.assertRaises(Exception) as raised:\n        PopulationEstimateCategoryF(name='name')\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.TestPopulationEstimateCategory.test_update_population_estimate","title":"test_update_population_estimate","text":"<pre><code>test_update_population_estimate()\n</code></pre> <p>test update population estimate category.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def test_update_population_estimate(self):\n    \"\"\"test update population estimate category.\"\"\"\n    self.population_estimate_category.name = 'PopulationEstimateCategory'\n    self.population_estimate_category.save()\n    self.assertEqual(\n        self.population_estimate_category.name,\n        'PopulationEstimateCategory'\n    )\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.TestPopulationSatatus","title":"TestPopulationSatatus","text":"<p>               Bases: <code>TestCase</code></p> <p>Test for population status model.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.TestPopulationSatatus.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>setup test data.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def setUp(self) -&gt; None:\n    \"\"\"setup test data.\"\"\"\n    self.population_status = PopulationStatusF(\n        name='name'\n        )\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.TestPopulationSatatus.test_create_population_status","title":"test_create_population_status","text":"<pre><code>test_create_population_status()\n</code></pre> <p>test create population status.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def test_create_population_status(self):\n    \"\"\"test create population status.\"\"\"\n    self.assertEqual(self.population_status.name, 'name')\n    self.assertEqual(str(self.population_status), 'name')\n    self.assertEqual(PopulationStatus.objects.count(), 1)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.TestPopulationSatatus.test_delete_population_status","title":"test_delete_population_status","text":"<pre><code>test_delete_population_status()\n</code></pre> <p>test delete population status.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def test_delete_population_status(self):\n    \"\"\"test delete population status.\"\"\"\n    self.population_status.delete()\n    self.assertEqual(PopulationStatus.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.TestPopulationSatatus.test_population_status_name_constraint","title":"test_population_status_name_constraint","text":"<pre><code>test_population_status_name_constraint()\n</code></pre> <p>Test population status name contraint.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def test_population_status_name_constraint(self):\n    \"\"\"Test population status name contraint.\"\"\"\n    another = PopulationStatusF(name='Population Status')\n    self.assertEqual(PopulationStatus.objects.count(), 2)\n    self.assertNotEqual(self.population_status.name, another.name)\n\n    with self.assertRaises(Exception) as raised:\n        PopulationStatusF(name='name')\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.TestPopulationSatatus.test_update_population_status","title":"test_update_population_status","text":"<pre><code>test_update_population_status()\n</code></pre> <p>test update population status.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def test_update_population_status(self):\n    \"\"\"test update population status.\"\"\"\n    self.population_status.name = 'PopulationSatatus'\n    self.population_status.save()\n    self.assertEqual(\n        self.population_status.name,\n        'PopulationSatatus'\n    )\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.TestSamplingEffortCoverage","title":"TestSamplingEffortCoverage","text":"<p>               Bases: <code>TestCase</code></p> <p>Test for sampling effort coverage model.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.TestSamplingEffortCoverage.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>setup test data.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def setUp(self) -&gt; None:\n    \"\"\"setup test data.\"\"\"\n    self.coverage = SamplingEffortCoverageF(\n        name='name'\n        )\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.TestSamplingEffortCoverage.test_create_sampling_effort_cov","title":"test_create_sampling_effort_cov","text":"<pre><code>test_create_sampling_effort_cov()\n</code></pre> <p>test create sampling effort coverage.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def test_create_sampling_effort_cov(self):\n    \"\"\"test create sampling effort coverage.\"\"\"\n    self.assertEqual(self.coverage.name, 'name')\n    self.assertEqual(str(self.coverage), 'name')\n    self.assertEqual(SamplingEffortCoverage.objects.count(), 1)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.TestSamplingEffortCoverage.test_delete_sampling_effort_cov","title":"test_delete_sampling_effort_cov","text":"<pre><code>test_delete_sampling_effort_cov()\n</code></pre> <p>test delete sampling effort coverage.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def test_delete_sampling_effort_cov(self):\n    \"\"\"test delete sampling effort coverage.\"\"\"\n    self.coverage.delete()\n    self.assertEqual(SamplingEffortCoverage.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.TestSamplingEffortCoverage.test_sampling_effort_cov_name_constraint","title":"test_sampling_effort_cov_name_constraint","text":"<pre><code>test_sampling_effort_cov_name_constraint()\n</code></pre> <p>Test sampling effort coverage name contraint.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def test_sampling_effort_cov_name_constraint(self):\n    \"\"\"Test sampling effort coverage name contraint.\"\"\"\n    another = SamplingEffortCoverageF(name='Coverage2')\n    self.assertEqual(SamplingEffortCoverage.objects.count(), 2)\n    self.assertNotEqual(self.coverage.name, another.name)\n\n    with self.assertRaises(Exception) as raised:\n        SamplingEffortCoverageF(name='name')\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.tests.test_population_data_models.TestSamplingEffortCoverage.test_update_sampling_effort_cov","title":"test_update_sampling_effort_cov","text":"<pre><code>test_update_sampling_effort_cov()\n</code></pre> <p>test update sampling effort coverage.</p> Source code in <code>django_project/population_data/tests/test_population_data_models.py</code> <pre><code>def test_update_sampling_effort_cov(self):\n    \"\"\"test update sampling effort coverage.\"\"\"\n    self.coverage.name = 'Test1'\n    self.coverage.save()\n    self.assertEqual(\n        self.coverage.name,\n        'Test1'\n    )\n</code></pre>"},{"location":"developer/manual/property/","title":"IDS SAWPS","text":""},{"location":"developer/manual/property/#admin","title":"Admin","text":"<p>Admin for property package.</p>"},{"location":"developer/manual/property/#django_project.property.admin.ParcelAdmin","title":"ParcelAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Admin page for Parcel model.</p>"},{"location":"developer/manual/property/#django_project.property.admin.ParcelAdmin.run_patch_parcel_source","title":"run_patch_parcel_source","text":"<pre><code>run_patch_parcel_source(request, queryset)\n</code></pre> <p>Admin action to patch source in parcels.</p> Source code in <code>django_project/property/admin.py</code> <pre><code>@admin.action(\n    description=\"Patch source in parcels\"\n)\ndef run_patch_parcel_source(self, request, queryset):\n    \"\"\"Admin action to patch source in parcels.\"\"\"\n    from frontend.tasks.parcel import (\n        patch_parcel_sources\n    )\n    patch_parcel_sources.delay()\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.admin.ParcelTypeAdmin","title":"ParcelTypeAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Admin page for ParcelType model.</p>"},{"location":"developer/manual/property/#django_project.property.admin.PropertyAdmin","title":"PropertyAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Admin page for Property model.</p>"},{"location":"developer/manual/property/#django_project.property.admin.PropertyAdmin.generate_spatial_filters_for_properties","title":"generate_spatial_filters_for_properties","text":"<pre><code>generate_spatial_filters_for_properties(request, queryset)\n</code></pre> <p>Admin action to generate spatial filter data for selected properties.</p> Source code in <code>django_project/property/admin.py</code> <pre><code>@admin.action(\n    description=\"Generate spatial filters for selected properties\"\n)\ndef generate_spatial_filters_for_properties(self, request, queryset):\n    \"\"\"Admin action to generate spatial filter data for\n        selected properties.\"\"\"\n    from property.tasks.generate_spatial_filter import (\n        generate_spatial_filter_task\n    )\n    for property_obj in queryset:\n        property_obj.spatialdatamodel_set.all().delete()\n        generate_spatial_filter_task.delay(\n            property_obj.id\n        )\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.admin.PropertyAdmin.run_check_overlaps","title":"run_check_overlaps","text":"<pre><code>run_check_overlaps(modeladmin, request, queryset)\n</code></pre> <p>Admin action to check for overlapping properties.</p> Source code in <code>django_project/property/admin.py</code> <pre><code>@admin.action(\n    description=\"Run check overlaps\"\n)\ndef run_check_overlaps(modeladmin, request, queryset):\n    \"\"\"Admin action to check for overlapping properties.\"\"\"\n    from property.tasks.check_overlaps import (\n        property_check_overlaps_each_other\n    )\n    property_check_overlaps_each_other.delay()\n    modeladmin.message_user(\n        request,\n        'Job check for overlapping properties will be run in background!',\n        messages.SUCCESS\n    )\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.admin.PropertyAdmin.run_patch_property_centroid","title":"run_patch_property_centroid","text":"<pre><code>run_patch_property_centroid(request, queryset)\n</code></pre> <p>Admin action to patch property without centroid.</p> Source code in <code>django_project/property/admin.py</code> <pre><code>@admin.action(\n    description=\"Patch centroid field in properties\"\n)\ndef run_patch_property_centroid(self, request, queryset):\n    \"\"\"Admin action to patch property without centroid.\"\"\"\n    from property.tasks.generate_property_centroid import (\n        generate_property_centroid\n    )\n    generate_property_centroid.delay()\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.admin.PropertyAdmin.run_patch_property_province","title":"run_patch_property_province","text":"<pre><code>run_patch_property_province(request, queryset)\n</code></pre> <p>Admin action to patch province in properties.</p> Source code in <code>django_project/property/admin.py</code> <pre><code>@admin.action(\n    description=\"Patch province in properties\"\n)\ndef run_patch_property_province(self, request, queryset):\n    \"\"\"Admin action to patch province in properties.\"\"\"\n    from frontend.tasks.patch_province import (\n        patch_province_in_properties\n    )\n    patch_province_in_properties.delay()\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.admin.PropertyOverlapsAdmin","title":"PropertyOverlapsAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Admin page for PropertyOverlaps model.</p>"},{"location":"developer/manual/property/#django_project.property.admin.PropertyOverlapsAdmin.resolve_overlaps","title":"resolve_overlaps","text":"<pre><code>resolve_overlaps(modeladmin, request, queryset)\n</code></pre> <p>Admin action to manually resolve the overlap record.</p> Source code in <code>django_project/property/admin.py</code> <pre><code>@admin.action(\n    description=\"Resolve overlaps record\"\n)\ndef resolve_overlaps(modeladmin, request, queryset):\n    \"\"\"Admin action to manually resolve the overlap record.\"\"\"\n    for overlap in queryset:\n        overlap.resolved = True\n        overlap.resolved_at = timezone.now()\n        overlap.save(update_fields=['resolved', 'resolved_at'])\n    modeladmin.message_user(\n        request,\n        (\n            f'{queryset.count()} records has successfully been '\n            'marked as resolved!'\n        ),\n        messages.SUCCESS\n    )\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.admin.PropertyTypeAdmin","title":"PropertyTypeAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Admin page for PropertyType model.</p>"},{"location":"developer/manual/property/#django_project.property.admin.ProvinceAdmin","title":"ProvinceAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Admin page for Province model.</p>"},{"location":"developer/manual/property/#factories","title":"Factories","text":""},{"location":"developer/manual/property/#django_project.property.factories.ParcelFactory","title":"ParcelFactory","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory for Parcel.</p>"},{"location":"developer/manual/property/#django_project.property.factories.ParcelTypeFactory","title":"ParcelTypeFactory","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory for ParcelType.</p>"},{"location":"developer/manual/property/#django_project.property.factories.PropertyFactory","title":"PropertyFactory","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Property factory.</p>"},{"location":"developer/manual/property/#django_project.property.factories.PropertyTypeFactory","title":"PropertyTypeFactory","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory for PropertyType model.</p>"},{"location":"developer/manual/property/#django_project.property.factories.ProvinceFactory","title":"ProvinceFactory","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory for Province.</p>"},{"location":"developer/manual/property/#models","title":"Models","text":""},{"location":"developer/manual/property/#django_project.property.models.Parcel","title":"Parcel","text":"<p>               Bases: <code>Model</code></p> <p>Parcel model.</p>"},{"location":"developer/manual/property/#django_project.property.models.ParcelType","title":"ParcelType","text":"<p>               Bases: <code>Model</code></p> <p>Parcel type model.</p>"},{"location":"developer/manual/property/#django_project.property.models.Property","title":"Property","text":"<p>               Bases: <code>Model</code></p> <p>Property model.</p>"},{"location":"developer/manual/property/#django_project.property.models.PropertyOverlaps","title":"PropertyOverlaps","text":"<p>               Bases: <code>Model</code></p> <p>Model to store property that overlaps with each other.</p>"},{"location":"developer/manual/property/#test-case","title":"Test Case","text":""},{"location":"developer/manual/property/#django_project.property.tests.test_property_models.ParcelTestCase","title":"ParcelTestCase","text":"<p>               Bases: <code>TestCase</code></p> <p>Parcel test case.</p>"},{"location":"developer/manual/property/#django_project.property.tests.test_property_models.ParcelTestCase.test_create_parcel","title":"test_create_parcel","text":"<pre><code>test_create_parcel()\n</code></pre> <p>Test create parcel.</p> Source code in <code>django_project/property/tests/test_property_models.py</code> <pre><code>def test_create_parcel(self):\n    \"\"\"Test create parcel.\"\"\"\n    self.assertTrue(isinstance(self.parcel, Parcel))\n    self.assertEqual(Parcel.objects.count(), 1)\n    self.assertEqual(self.parcel.sg_number, 'SG_0')\n    self.assertEqual(self.parcel.farm_number, 0)\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.tests.test_property_models.ParcelTestCase.test_delete_parcel","title":"test_delete_parcel","text":"<pre><code>test_delete_parcel()\n</code></pre> <p>Test delete parcel.</p> Source code in <code>django_project/property/tests/test_property_models.py</code> <pre><code>def test_delete_parcel(self):\n    \"\"\"Test delete parcel.\"\"\"\n    self.parcel.delete()\n    self.assertEqual(Parcel.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.tests.test_property_models.ParcelTestCase.test_non_unique_parcel_sg_number_constraint","title":"test_non_unique_parcel_sg_number_constraint","text":"<pre><code>test_non_unique_parcel_sg_number_constraint()\n</code></pre> <p>Test unique parcel sg number constraint.</p> Source code in <code>django_project/property/tests/test_property_models.py</code> <pre><code>def test_non_unique_parcel_sg_number_constraint(self):\n    \"\"\"Test unique parcel sg number constraint.\"\"\"\n    ParcelFactory(sg_number='SG_1')\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.tests.test_property_models.ParcelTestCase.test_update_parcel","title":"test_update_parcel","text":"<pre><code>test_update_parcel()\n</code></pre> <p>Test update parcel.</p> Source code in <code>django_project/property/tests/test_property_models.py</code> <pre><code>def test_update_parcel(self):\n    \"\"\"Test update parcel.\"\"\"\n    self.parcel.sg_number = 'SG_1'\n    self.parcel.save()\n    self.assertEqual(Parcel.objects.get(id=self.parcel.id).sg_number, 'SG_1')\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.tests.test_property_models.ParcelTypeTestCase","title":"ParcelTypeTestCase","text":"<p>               Bases: <code>TestCase</code></p> <p>Parcel type test case</p>"},{"location":"developer/manual/property/#django_project.property.tests.test_property_models.ParcelTypeTestCase.test_create_parcel_type","title":"test_create_parcel_type","text":"<pre><code>test_create_parcel_type()\n</code></pre> <p>Test create parcel types</p> Source code in <code>django_project/property/tests/test_property_models.py</code> <pre><code>def test_create_parcel_type(self):\n    \"\"\"Test create parcel types \"\"\"\n    self.assertTrue(isinstance(self.parcel_type, ParcelType))\n    self.assertEqual(ParcelType.objects.count(), 1)\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.tests.test_property_models.ParcelTypeTestCase.test_delete_parcel_type","title":"test_delete_parcel_type","text":"<pre><code>test_delete_parcel_type()\n</code></pre> <p>Test delete parcel type.</p> Source code in <code>django_project/property/tests/test_property_models.py</code> <pre><code>def test_delete_parcel_type(self):\n    \"\"\"Test delete parcel type.\"\"\"\n    self.parcel_type.delete()\n    self.assertEqual(ParcelType.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.tests.test_property_models.ParcelTypeTestCase.test_unique_parcel_type_name_constraint","title":"test_unique_parcel_type_name_constraint","text":"<pre><code>test_unique_parcel_type_name_constraint()\n</code></pre> <p>Test unique parcel type name constraint.</p> Source code in <code>django_project/property/tests/test_property_models.py</code> <pre><code>def test_unique_parcel_type_name_constraint(self):\n    \"\"\"Test unique parcel type name constraint.\"\"\"\n    with self.assertRaises(Exception) as raised:\n        ParcelTypeFactory(name='ParcelType_1')\n        self.assertEqual(IntegrityError, type(raised.exception))\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.tests.test_property_models.ParcelTypeTestCase.test_update_parcel_type","title":"test_update_parcel_type","text":"<pre><code>test_update_parcel_type()\n</code></pre> <p>Test update parcel type.</p> Source code in <code>django_project/property/tests/test_property_models.py</code> <pre><code>def test_update_parcel_type(self):\n    \"\"\"Test update parcel type.\"\"\"\n    self.parcel_type.name = 'ParcelType_1'\n    self.parcel_type.save()\n    self.assertEqual(ParcelType.objects.get(id=self.parcel_type.id).name, 'ParcelType_1')\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.tests.test_property_models.PropertyTestCase","title":"PropertyTestCase","text":"<p>               Bases: <code>TestCase</code></p> <p>Property test case.</p>"},{"location":"developer/manual/property/#django_project.property.tests.test_property_models.PropertyTestCase.test_create_property","title":"test_create_property","text":"<pre><code>test_create_property()\n</code></pre> <p>Test creating property</p> Source code in <code>django_project/property/tests/test_property_models.py</code> <pre><code>def test_create_property(self):\n    \"\"\"Test creating property \"\"\"\n    self.assertTrue(isinstance(self.property, Property))\n    self.assertEqual(Property.objects.count(), 1)\n    self.assertEqual(self.property.name, Property.objects.get(id=self.property.id).name)\n\n    self.assertEqual(\n        self.property.short_code,\n        'WCCALU0001'\n    )\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.tests.test_property_models.PropertyTestCase.test_delete_property","title":"test_delete_property","text":"<pre><code>test_delete_property()\n</code></pre> <p>Test delete property.</p> Source code in <code>django_project/property/tests/test_property_models.py</code> <pre><code>def test_delete_property(self):\n    \"\"\"Test delete property.\"\"\"\n    self.property.delete()\n    self.assertEqual(Property.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.tests.test_property_models.PropertyTestCase.test_update_property","title":"test_update_property","text":"<pre><code>test_update_property()\n</code></pre> <p>Test update property.</p> Source code in <code>django_project/property/tests/test_property_models.py</code> <pre><code>def test_update_property(self):\n    \"\"\"Test update property.\"\"\"\n    self.property.name = 'Rex Mundi'\n    self.property.save()\n    self.assertEqual(Property.objects.get(id=self.property.id).name, 'Rex Mundi')\n\n    self.assertEqual(\n        self.property.short_code,\n        'WCCARM0002'\n    )\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.tests.test_property_models.PropertyTypeTest","title":"PropertyTypeTest","text":"<p>               Bases: <code>TestCase</code></p> <p>Propert type test case</p>"},{"location":"developer/manual/property/#django_project.property.tests.test_property_models.PropertyTypeTest.test_create_property_type","title":"test_create_property_type","text":"<pre><code>test_create_property_type()\n</code></pre> <p>Test creating a new property type</p> Source code in <code>django_project/property/tests/test_property_models.py</code> <pre><code>def test_create_property_type(self):\n    \"\"\"Test creating a new property type\"\"\"\n    self.assertTrue(\n        isinstance(self.property_type, PropertyType)\n    )\n    self.assertEqual(PropertyType.objects.count(), 1)\n    self.assertEqual(self.property_type.name, PropertyType.objects.get(id=self.property_type.id).name)\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.tests.test_property_models.PropertyTypeTest.test_delete_property_type","title":"test_delete_property_type","text":"<pre><code>test_delete_property_type()\n</code></pre> <p>Test deleting a property type</p> Source code in <code>django_project/property/tests/test_property_models.py</code> <pre><code>def test_delete_property_type(self):\n    \"\"\"Test deleting a property type\"\"\"\n    self.property_type.delete()\n    self.assertEqual(PropertyType.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.tests.test_property_models.PropertyTypeTest.test_property_type_unique_name_constraint","title":"test_property_type_unique_name_constraint","text":"<pre><code>test_property_type_unique_name_constraint()\n</code></pre> <p>Test property type unique name constraint</p> Source code in <code>django_project/property/tests/test_property_models.py</code> <pre><code>def test_property_type_unique_name_constraint(self):\n    \"\"\"Test property type unique name constraint\"\"\"\n    with self.assertRaises(Exception) as raised:\n        PropertyTypeFactory(name='PropertyType 2')\n        self.assertEqual(IntegrityError, type(raised.exception))\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.tests.test_property_models.PropertyTypeTest.test_update_property_type","title":"test_update_property_type","text":"<pre><code>test_update_property_type()\n</code></pre> <p>Test updating a property type</p> Source code in <code>django_project/property/tests/test_property_models.py</code> <pre><code>def test_update_property_type(self):\n    \"\"\"Test updating a property type\"\"\"\n    self.property_type.name = 'PropertyType 2'\n    self.property_type.save()\n    self.assertEqual(\n        PropertyType.objects.get(id=self.property_type.id).name,\n        'PropertyType 2',\n    )\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.tests.test_property_models.ProvinceTestCase","title":"ProvinceTestCase","text":"<p>               Bases: <code>TestCase</code></p> <p>Province test case</p>"},{"location":"developer/manual/property/#django_project.property.tests.test_property_models.ProvinceTestCase.test_create_province","title":"test_create_province","text":"<pre><code>test_create_province()\n</code></pre> <p>Test create a province.</p> Source code in <code>django_project/property/tests/test_property_models.py</code> <pre><code>def test_create_province(self):\n    'Test create a province.'\n    self.assertTrue(isinstance(self.province, Province))\n    self.assertEqual(Province.objects.count(), 1)\n    self.assertEqual(self.province.name, Province.objects.get(id=self.province.id).name)\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.tests.test_property_models.ProvinceTestCase.test_delete_province","title":"test_delete_province","text":"<pre><code>test_delete_province()\n</code></pre> <p>Test delete a province.</p> Source code in <code>django_project/property/tests/test_property_models.py</code> <pre><code>def test_delete_province(self):\n    'Test delete a province.'\n    self.province.delete()\n    self.assertEqual(Province.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.tests.test_property_models.ProvinceTestCase.test_unique_province_name_constraint","title":"test_unique_province_name_constraint","text":"<pre><code>test_unique_province_name_constraint()\n</code></pre> <p>Test unique province name constraint.</p> Source code in <code>django_project/property/tests/test_property_models.py</code> <pre><code>def test_unique_province_name_constraint(self):\n    'Test unique province name constraint.'\n    with self.assertRaises(Exception) as raised:\n        ProvinceFactory(name='Province 2')\n        self.assertEqual(IntegrityError, type(raised.exception))\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.tests.test_property_models.ProvinceTestCase.test_update_province","title":"test_update_province","text":"<pre><code>test_update_province()\n</code></pre> <p>Test update a province.</p> Source code in <code>django_project/property/tests/test_property_models.py</code> <pre><code>def test_update_province(self):\n    'Test update a province.'\n    self.province.name = 'Province 2'\n    self.province.save()\n    self.assertEqual(\n        Province.objects.get(id=self.province.id).name, 'Province 2'\n    )\n</code></pre>"},{"location":"developer/manual/property/#tasks","title":"Tasks","text":""},{"location":"developer/manual/property/#spatial-data","title":"Spatial Data","text":""},{"location":"developer/manual/property/#django_project.property.spatial_data.columns_and_srid","title":"columns_and_srid","text":"<pre><code>columns_and_srid(table_name)\n</code></pre> <p>Retrieve all column names along with their SRID (if applicable) for a given table in the database schema \"layer\".</p> <p>Parameters:</p> Name Type Description Default <code>table_name</code> <code>AnyStr</code> <p>Table name for which column information is required.</p> required <p>Returns:</p> Type Description <code>Tuple[List[ColumnInfo], AnyStr]</code> <p>Tuple[list[ColumnInfo], str]: A tuple containing two elements: 1. A list of ColumnInfo objects detailing each column. 2. A string representing the SRID of a geometry column, if present; returns an empty string if no geometry column is found.</p> Source code in <code>django_project/property/spatial_data.py</code> <pre><code>def columns_and_srid(table_name: AnyStr) -&gt; Tuple[List[ColumnInfo], AnyStr]:\n    \"\"\"\n    Retrieve all column names along with their SRID (if applicable)\n    for a given table in the database schema \"layer\".\n\n    :param table_name: Table name for which column information is required.\n\n    :return: Tuple[list[ColumnInfo], str]: A tuple containing two elements:\n            1. A list of ColumnInfo objects detailing each column.\n            2. A string representing the SRID of a geometry column, if present;\n               returns an empty string if no geometry column is found.\n    \"\"\"\n    with connection.cursor() as cursor:\n        cursor.execute(\"\"\"\n            SELECT\n                col.column_name,\n                col.data_type,\n                COALESCE(geom.srid::text, %s) AS srid\n            FROM information_schema.columns col\n            LEFT JOIN geometry_columns geom\n                ON col.table_schema = geom.f_table_schema\n                AND col.table_name = geom.f_table_name\n                AND col.column_name = geom.f_geometry_column\n            WHERE col.table_schema = %s\n            AND col.table_name = %s;\n        \"\"\", [NO_VALUE, TABLE_SCHEMA, table_name])\n\n        rows = cursor.fetchall()\n\n        columns = [ColumnInfo(\n            row[0],\n            row[1] if row[2] == NO_VALUE else GEOMETRY_KEY,\n            row[2]\n        )\n            for row in rows\n        ]\n        srid = ''\n        for column in columns:\n            if column.srid != NO_VALUE:\n                srid = column.srid\n\n        if srid == \"0\":  # could not get srid information from table\n            srids = get_distinct_srids(table_name)\n            if len(srids) &gt; 0:\n                srid = srids[0]\n            else:\n                srid = ''\n\n        return columns, srid\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.spatial_data.extract_spatial_data_from_property_and_layer","title":"extract_spatial_data_from_property_and_layer","text":"<pre><code>extract_spatial_data_from_property_and_layer(\n    target_property, context_layer\n)\n</code></pre> <p>Intersect a target property with a given context layer to extract spatial data.</p> <p>Parameters:</p> Name Type Description Default <code>target_property</code> <code>Property</code> <p>The property object that needs to be intersected.</p> required <code>context_layer</code> <code>ContextLayer</code> <p>The layer that provides contextual spatial data.</p> required <p>Returns:</p> Type Description <code>Dict</code> <p>The spatial data extracted from the intersection of the target property and context layer. Returns an empty dictionary if no spatial data is found.</p> Source code in <code>django_project/property/spatial_data.py</code> <pre><code>def extract_spatial_data_from_property_and_layer(\n        target_property: Property,\n        context_layer: ContextLayer\n) -&gt; Dict:\n    \"\"\"\n    Intersect a target property with a given context layer to\n    extract spatial data.\n\n    :param target_property: The property object that needs to be intersected.\n    :type target_property: Property\n\n    :param context_layer: The layer that provides contextual spatial data.\n    :type context_layer: ContextLayer\n\n    :return: The spatial data extracted from the intersection of the target\n    property and context layer.\n    Returns an empty dictionary if no spatial data is found.\n    \"\"\"\n    if not target_property.geometry:\n        return {}\n\n    spatial_data = {}\n\n    for layer in (\n            context_layer.layer_set.filter(\n                spatial_filter_field__isnull=False\n            ).exclude(spatial_filter_field='')):\n        layer_name = layer.name\n        columns, srid = columns_and_srid(layer_name)\n\n        if not srid:  # Table with geometry not found, continue\n            continue\n\n        column_names = [\n            col.column_name for col in columns if col.srid == NO_VALUE\n        ]\n\n        query = f\"\"\"\n            SELECT {'e.' + ',e.'.join(column_names)}\n            FROM layer.{layer_name} e\n                JOIN public.property p ON ST_Intersects(\n                e.geom, ST_Transform(p.geometry, {int(srid)}))\n            WHERE p.id = %s;\n        \"\"\"\n\n        try:\n            with connection.cursor() as cursor:\n                cursor.execute(query, [target_property.id])\n                rows = cursor.fetchall()\n\n                spatial_data_values = []\n\n            for row in rows:\n                row_dict = dict(zip(column_names, row))\n                spatial_data_values.append(row_dict)\n\n                spatial_data[layer_name] = spatial_data_values\n        except InternalError as e:\n            print(e)\n\n    return spatial_data\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.spatial_data.get_distinct_srids","title":"get_distinct_srids","text":"<pre><code>get_distinct_srids(table_name)\n</code></pre> <p>Retrieve distinct SRIDs from the specified table's geometry column.</p> <p>Parameters:</p> Name Type Description Default <code>table_name</code> <code>str</code> <p>Name of the table to check.</p> required <p>Returns:</p> Type Description <code>List</code> <p>A list of distinct SRIDs.</p> Source code in <code>django_project/property/spatial_data.py</code> <pre><code>def get_distinct_srids(table_name: str) -&gt; List:\n    \"\"\"\n    Retrieve distinct SRIDs from the specified table's geometry column.\n\n    :param table_name: Name of the table to check.\n\n    :return: A list of distinct SRIDs.\n    \"\"\"\n    query = (\n        f\"SELECT DISTINCT ST_SRID(geom) AS srid \"\n        f\"FROM {TABLE_SCHEMA}.{table_name};\"\n    )\n\n    with connection.cursor() as cursor:\n        cursor.execute(query)\n        rows = cursor.fetchall()\n\n    return [row[0] for row in rows if row[0] is not None]\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.spatial_data.save_spatial_values_from_property_layers","title":"save_spatial_values_from_property_layers","text":"<pre><code>save_spatial_values_from_property_layers(target_property)\n</code></pre> <p>Extract spatial data from the given property for all context layers and save the extracted values to SpatialDataModel.</p> <p>Parameters:</p> Name Type Description Default <code>target_property</code> <code>Property</code> <p>The property object to be extracted</p> required Source code in <code>django_project/property/spatial_data.py</code> <pre><code>def save_spatial_values_from_property_layers(target_property: Property):\n    \"\"\"\n    Extract spatial data from the given property for all context layers\n    and save the extracted values to SpatialDataModel.\n\n    :param target_property: The property object to be extracted\n    :type target_property: Property\n    \"\"\"\n    context_layers = ContextLayer.objects.filter(\n        layer__spatial_filter_field__isnull=False\n    ).distinct()\n\n    layers = {layer.name: layer for layer in Layer.objects.all()}\n\n    for context_layer in context_layers:\n        spatial_data_by_layers = extract_spatial_data_from_property_and_layer(\n            target_property,\n            context_layer\n        )\n        if not spatial_data_by_layers:\n            continue\n\n        spatial_data_obj, _ = SpatialDataModel.objects.get_or_create(\n            property=target_property,\n            context_layer=context_layer\n        )\n\n        for layer_name, spatial_layer_data in spatial_data_by_layers.items():\n            layer = layers.get(layer_name)\n            if layer is None:\n                continue\n\n            for spatial_layer_value in spatial_layer_data:\n                filter_field = layer.spatial_filter_field\n                if filter_field not in spatial_layer_value:\n                    continue\n                SpatialDataValueModel.objects.update_or_create(\n                    layer=layer,\n                    spatial_data=spatial_data_obj,\n                    context_layer_value=(\n                        spatial_layer_value[filter_field]\n                    )\n                )\n</code></pre>"},{"location":"developer/manual/regulator_permit/","title":"IDS SAWPS","text":""},{"location":"developer/manual/regulator_permit/#admin","title":"Admin","text":"<p>Admin page for regulatory permit models.</p>"},{"location":"developer/manual/regulator_permit/#factories","title":"Factories","text":""},{"location":"developer/manual/regulator_permit/#django_project.regulatory_permit.factories.DataUsePermissionFactory","title":"DataUsePermissionFactory","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>data use permission factory</p>"},{"location":"developer/manual/regulator_permit/#models","title":"Models","text":""},{"location":"developer/manual/regulator_permit/#django_project.regulatory_permit.models.DataUsePermission","title":"DataUsePermission","text":"<p>               Bases: <code>Model</code></p> <p>data use permission model</p>"},{"location":"developer/manual/regulator_permit/#test-case","title":"Test Case","text":""},{"location":"developer/manual/regulator_permit/#django_project.regulatory_permit.test_regulatory_permit_models.DataUsePermissionTestCase","title":"DataUsePermissionTestCase","text":"<p>               Bases: <code>TestCase</code></p> <p>test data use permission model</p>"},{"location":"developer/manual/regulator_permit/#django_project.regulatory_permit.test_regulatory_permit_models.DataUsePermissionTestCase.setUpTestData","title":"setUpTestData  <code>classmethod</code>","text":"<pre><code>setUpTestData()\n</code></pre> <p>setup test data</p> Source code in <code>django_project/regulatory_permit/test_regulatory_permit_models.py</code> <pre><code>@classmethod\ndef setUpTestData(cls):\n    \"\"\"setup test data\"\"\"\n    cls.data_use_permission = (\n        regulatoryPermitFactories.DataUsePermissionFactory()\n    )\n</code></pre>"},{"location":"developer/manual/regulator_permit/#django_project.regulatory_permit.test_regulatory_permit_models.DataUsePermissionTestCase.test_create_data_use_permission","title":"test_create_data_use_permission","text":"<pre><code>test_create_data_use_permission()\n</code></pre> <p>test creating use permission</p> Source code in <code>django_project/regulatory_permit/test_regulatory_permit_models.py</code> <pre><code>def test_create_data_use_permission(self):\n    \"\"\"test creating use permission\"\"\"\n    self.assertTrue(\n        isinstance(\n            self.data_use_permission,\n            regulatoryPermitModels.DataUsePermission,\n        )\n    )\n    self.assertEqual(\n        regulatoryPermitModels.DataUsePermission.objects.count(), 1\n    )\n</code></pre>"},{"location":"developer/manual/regulator_permit/#django_project.regulatory_permit.test_regulatory_permit_models.DataUsePermissionTestCase.test_delete_data_use_permission","title":"test_delete_data_use_permission","text":"<pre><code>test_delete_data_use_permission()\n</code></pre> <p>test deleting use permission</p> Source code in <code>django_project/regulatory_permit/test_regulatory_permit_models.py</code> <pre><code>def test_delete_data_use_permission(self):\n    \"\"\"test deleting use permission\"\"\"\n    self.data_use_permission.delete()\n    self.assertEqual(\n        regulatoryPermitModels.DataUsePermission.objects.count(), 0\n    )\n</code></pre>"},{"location":"developer/manual/regulator_permit/#django_project.regulatory_permit.test_regulatory_permit_models.DataUsePermissionTestCase.test_unqiue_data_use_permission_name","title":"test_unqiue_data_use_permission_name","text":"<pre><code>test_unqiue_data_use_permission_name()\n</code></pre> <p>test unique name of use permission</p> Source code in <code>django_project/regulatory_permit/test_regulatory_permit_models.py</code> <pre><code>def test_unqiue_data_use_permission_name(self):\n    \"\"\"test unique name of use permission\"\"\"\n    try:\n        (\n            regulatoryPermitModels.DataUsePermission.objects.create(\n                name='data use permission 0',\n                description='data use permission description 0',\n            )\n        )\n\n    except Exception as e:\n        self.assertTrue(isinstance(e, IntegrityError))\n        return\n</code></pre>"},{"location":"developer/manual/regulator_permit/#django_project.regulatory_permit.test_regulatory_permit_models.DataUsePermissionTestCase.test_update_data_use_permission","title":"test_update_data_use_permission","text":"<pre><code>test_update_data_use_permission()\n</code></pre> <p>test updating use permission</p> Source code in <code>django_project/regulatory_permit/test_regulatory_permit_models.py</code> <pre><code>def test_update_data_use_permission(self):\n    \"\"\"test updating use permission\"\"\"\n    self.data_use_permission.name = 'Data Use Permission #1'\n    self.data_use_permission.description = (\n        'Data Use Permission Description #1'\n    )\n    self.data_use_permission.save()\n    self.assertIn(\n        'Data Use Permission',\n        regulatoryPermitModels.DataUsePermission.objects.get(\n        id=self.data_use_permission.id).name,\n    )\n    self.assertIn(\n        'Data Use Permission Description',\n        regulatoryPermitModels.DataUsePermission.objects.get(\n            id=self.data_use_permission.id\n        ).description,\n    )\n</code></pre>"},{"location":"developer/manual/sawps/","title":"IDS SAWPS","text":""},{"location":"developer/manual/sawps/#django_project.sawps.password_validation.NumberValidator","title":"NumberValidator","text":"<p>               Bases: <code>object</code></p> <p>Checking if password contains a number character.</p>"},{"location":"developer/manual/sawps/#django_project.sawps.password_validation.NumberValidator.validate","title":"validate","text":"<pre><code>validate(password, user=None)\n</code></pre> <p>Check password.</p> <p>Parameters:</p> Name Type Description Default <code>password</code> <code>str</code> <p>Input password</p> required Source code in <code>django_project/sawps/password_validation.py</code> <pre><code>def validate(self, password, user=None):\n    \"\"\"Check password.\n\n    :param\n    password: Input password\n    :type\n    password: str\n    \"\"\"\n    if not re.findall(r'\\d', password):\n        raise ValidationError(\n            \"The password must contain a numeric character\",\n            code='password_no_number',\n        )\n</code></pre>"},{"location":"developer/manual/sawps/#django_project.sawps.password_validation.SymbolValidator","title":"SymbolValidator","text":"<p>               Bases: <code>object</code></p> <p>Checking if password contains a special character.</p>"},{"location":"developer/manual/sawps/#django_project.sawps.password_validation.SymbolValidator.validate","title":"validate","text":"<pre><code>validate(password, user=None)\n</code></pre> <p>Check password.</p> <p>Parameters:</p> Name Type Description Default <code>password</code> <code>str</code> <p>Input password</p> required Source code in <code>django_project/sawps/password_validation.py</code> <pre><code>def validate(self, password, user=None):\n    \"\"\"Check password.\n\n    :param\n    password: Input password\n    :type\n    password: str\n    \"\"\"\n    if not re.findall(r'[()[\\]{}|\\\\`~!@#$%^&amp;*_\\-+=;:\\'\",&lt;&gt;./?]', password):\n        raise ValidationError(\n            \"The password must contain a special character.\",\n            code='password_no_symbol',\n        )\n</code></pre>"},{"location":"developer/manual/sawps/#django_project.sawps.password_validation.UppercaseValidator","title":"UppercaseValidator","text":"<p>               Bases: <code>object</code></p> <p>Checking if password contains an uppercase letter.</p>"},{"location":"developer/manual/sawps/#django_project.sawps.password_validation.UppercaseValidator.validate","title":"validate","text":"<pre><code>validate(password, user=None)\n</code></pre> <p>Check password.</p> <p>Parameters:</p> Name Type Description Default <code>password</code> <code>str</code> <p>Input password</p> required Source code in <code>django_project/sawps/password_validation.py</code> <pre><code>def validate(self, password, user=None):\n    \"\"\"Check password.\n\n    :param\n    password: Input password\n    :type\n    password: str\n    \"\"\"\n\n    if not re.findall('[A-Z]', password):\n        raise ValidationError(\n            \"The password must contain an uppercase letter\",\n            code='password_no_upper',\n        )\n</code></pre>"},{"location":"developer/manual/sawps/#model","title":"Model","text":""},{"location":"developer/manual/sawps/#django_project.sawps.models.ExtendedGroup","title":"ExtendedGroup","text":"<p>               Bases: <code>Model</code></p> <p>Stores additional attributes for Django's built-in Group model. Related to :model:<code>auth.Group</code>.</p>"},{"location":"developer/manual/sawps/#django_project.sawps.models.save_extended_group","title":"save_extended_group","text":"<pre><code>save_extended_group(sender, instance, created, **kwargs)\n</code></pre> <p>Handle ExtendedGroup creation and saving for the Group</p> Source code in <code>django_project/sawps/models.py</code> <pre><code>@receiver(post_save, sender=Group)\ndef save_extended_group(sender, instance, created, **kwargs):\n    \"\"\"\n    Handle ExtendedGroup creation and saving for the Group\n    \"\"\"\n    extended_group, created = (\n        ExtendedGroup.objects.get_or_create(group=instance)\n    )\n\n    if not created:\n        instance.extended.save()\n</code></pre>"},{"location":"developer/manual/sawps/#test-case","title":"Test Case","text":""},{"location":"developer/manual/sawps/#django_project.sawps.tests.model_factories.ExtendedGroupF","title":"ExtendedGroupF","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Extended group model factory</p>"},{"location":"developer/manual/sawps/#django_project.sawps.tests.model_factories.GroupF","title":"GroupF","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Group model factory</p>"},{"location":"developer/manual/sawps/#django_project.sawps.tests.test_password_validation.TestPasswordValidator","title":"TestPasswordValidator","text":"<p>               Bases: <code>TestCase</code></p> <p>Test password validator.</p>"},{"location":"developer/manual/sawps/#django_project.sawps.tests.test_password_validation.TestPasswordValidator.test_password_number","title":"test_password_number","text":"<pre><code>test_password_number()\n</code></pre> <p>Test password validator contains number character.</p> Source code in <code>django_project/sawps/tests/test_password_validation.py</code> <pre><code>def test_password_number(self):\n    \"\"\"Test password validator contains number character.\n\n    \"\"\"\n    password = 'A!D$!$Qcc'\n    with self.assertRaises(ValidationError):\n        NumberValidator().validate(password, user=None)\n</code></pre>"},{"location":"developer/manual/sawps/#django_project.sawps.tests.test_password_validation.TestPasswordValidator.test_password_special","title":"test_password_special","text":"<pre><code>test_password_special()\n</code></pre> <p>Test password validator contains special character.</p> Source code in <code>django_project/sawps/tests/test_password_validation.py</code> <pre><code>def test_password_special(self):\n    \"\"\"Test password validator contains special character.\n\n    \"\"\"\n    password = 'a22aqcc'\n    with self.assertRaises(ValidationError):\n        SymbolValidator().validate(password, user=None)\n</code></pre>"},{"location":"developer/manual/sawps/#django_project.sawps.tests.test_password_validation.TestPasswordValidator.test_password_uppercase","title":"test_password_uppercase","text":"<pre><code>test_password_uppercase()\n</code></pre> <p>Test password validator contains uppercase character.</p> Source code in <code>django_project/sawps/tests/test_password_validation.py</code> <pre><code>def test_password_uppercase(self):\n    \"\"\"Test password validator contains uppercase character.\n\n    \"\"\"\n    password = 'a22!a$!$qcc'\n    with self.assertRaises(ValidationError):\n        UppercaseValidator().validate(password, user=None)\n</code></pre>"},{"location":"developer/manual/sawps/#django_project.sawps.tests.test_user.TestCustomLoginForm","title":"TestCustomLoginForm","text":"<p>               Bases: <code>TestCase</code></p> <p>Test login form.</p>"},{"location":"developer/manual/sawps/#django_project.sawps.tests.test_user.TestCustomSignupForm","title":"TestCustomSignupForm","text":"<p>               Bases: <code>TestCase</code></p> <p>Test sign up form</p>"},{"location":"developer/manual/sawps/#django_project.sawps.tests.test_user.TestCustomSignupForm.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>Sets up before each test</p> Source code in <code>django_project/sawps/tests/test_user.py</code> <pre><code>def setUp(self):\n    \"\"\"\n    Sets up before each test\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"developer/manual/sawps/#django_project.sawps.tests.test_user.TestPasswordChangeForm","title":"TestPasswordChangeForm","text":"<p>               Bases: <code>TestCase</code></p> <p>Test password change form.</p>"},{"location":"developer/manual/sawps/#django_project.sawps.tests.test_utils.TestUtils","title":"TestUtils","text":"<p>               Bases: <code>TestCase</code></p> <p>Test utilities.</p>"},{"location":"developer/manual/species/","title":"IDS SAWPS","text":""},{"location":"developer/manual/species/#api-views","title":"API Views","text":""},{"location":"developer/manual/species/#django_project.species.api_views.upload_species.SaveCsvSpecies","title":"SaveCsvSpecies","text":"<p>               Bases: <code>APIView</code></p> <p>API to save csv file into the database.</p>"},{"location":"developer/manual/species/#django_project.species.api_views.upload_species.SpeciesUploader","title":"SpeciesUploader","text":"<p>               Bases: <code>APIView</code></p> <p>API to upload csv file.</p>"},{"location":"developer/manual/species/#django_project.species.api_views.upload_species.UploadSpeciesStatus","title":"UploadSpeciesStatus","text":"<p>               Bases: <code>APIView</code></p> <p>Check upload species status.</p>"},{"location":"developer/manual/species/#admin","title":"Admin","text":""},{"location":"developer/manual/species/#django_project.species.admin.OwnedSpeciesAdmin","title":"OwnedSpeciesAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Admin page for OwnedSpecies model</p>"},{"location":"developer/manual/species/#django_project.species.admin.TaxonAdmin","title":"TaxonAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Admin page for Taxon model</p>"},{"location":"developer/manual/species/#django_project.species.admin.TaxonRankAdmin","title":"TaxonRankAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Admin page for TaxonRank model</p>"},{"location":"developer/manual/species/#factories","title":"Factories","text":""},{"location":"developer/manual/species/#django_project.species.factories.TaxonF","title":"TaxonF","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Taxon model factory.</p>"},{"location":"developer/manual/species/#django_project.species.factories.TaxonRankFactory","title":"TaxonRankFactory","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>taxon rank factory</p>"},{"location":"developer/manual/species/#django_project.species.factories.TaxonSurveyMethodF","title":"TaxonSurveyMethodF","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Taxon Survey Method factory.</p>"},{"location":"developer/manual/species/#forms","title":"Forms","text":"<p>Species forms.</p>"},{"location":"developer/manual/species/#django_project.species.forms.TaxonForm","title":"TaxonForm","text":"<p>               Bases: <code>ModelForm</code></p> <p>Taxon form.</p>"},{"location":"developer/manual/species/#models","title":"Models","text":"<p>Species models.</p>"},{"location":"developer/manual/species/#django_project.species.models.OwnedSpecies","title":"OwnedSpecies","text":"<p>               Bases: <code>Model</code></p> <p>Owned species mdoel.</p>"},{"location":"developer/manual/species/#django_project.species.models.Taxon","title":"Taxon","text":"<p>               Bases: <code>Model</code></p> <p>Taxon model.</p>"},{"location":"developer/manual/species/#django_project.species.models.TaxonRank","title":"TaxonRank","text":"<p>               Bases: <code>Model</code></p> <p>Taxon rank model.</p>"},{"location":"developer/manual/species/#django_project.species.models.TaxonSurveyMethod","title":"TaxonSurveyMethod","text":"<p>               Bases: <code>Model</code></p> <p>taxon survey methods</p>"},{"location":"developer/manual/species/#serializers","title":"Serializers","text":""},{"location":"developer/manual/species/#django_project.species.serializers.FrontPageTaxonSerializer","title":"FrontPageTaxonSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>Display species data on FrontPage.</p>"},{"location":"developer/manual/species/#django_project.species.serializers.TaxonSerializer","title":"TaxonSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> <p>Species serializer</p>"},{"location":"developer/manual/species/#django_project.species.serializers.TrendPageTaxonSerializer","title":"TrendPageTaxonSerializer","text":"<p>               Bases: <code>FrontPageTaxonSerializer</code></p> <p>Display species data on TrendPage.</p>"},{"location":"developer/manual/species/#scripts","title":"Scripts","text":""},{"location":"developer/manual/species/#django_project.species.scripts.data_upload.SpeciesCSVUpload","title":"SpeciesCSVUpload","text":"<pre><code>SpeciesCSVUpload()\n</code></pre> <p>               Bases: <code>object</code></p> Source code in <code>django_project/species/scripts/data_upload.py</code> <pre><code>def __init__(self):\n    self.upload_session = UploadSpeciesCSV.objects.none()\n    self.error_list = []\n    self.created_list = 0\n    self.existed_list = 0\n    self.headers = []\n    self.total_rows = 0\n    self.row_error = []\n    self.csv_dict_reader = None\n    self.species_id_list = []\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.scripts.data_upload.SpeciesCSVUpload.check_compulsory_fields","title":"check_compulsory_fields","text":"<pre><code>check_compulsory_fields(row)\n</code></pre> <p>Check if compulsory fields are empty.</p> Source code in <code>django_project/species/scripts/data_upload.py</code> <pre><code>def check_compulsory_fields(self, row):\n    \"\"\"Check if compulsory fields are empty.\"\"\"\n\n    for field in COMPULSORY_FIELDS:\n        if not self.row_value(row, field):\n            self.error_row(\n                message=\"The value of the compulsory field {} \"\n                        \"is empty.\".format(field)\n            )\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.scripts.data_upload.SpeciesCSVUpload.error_file","title":"error_file","text":"<pre><code>error_file(row)\n</code></pre> <p>Write to error file</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <p>error data</p> required Source code in <code>django_project/species/scripts/data_upload.py</code> <pre><code>def error_file(self, row):\n    \"\"\"\n    Write to error file\n    :param row: error data\n    \"\"\"\n    if len(self.row_error) &gt; 0:\n        logger.log(\n            level=logging.ERROR,\n            msg=' '.join(self.row_error)\n        )\n        row['error_message'] = ' '.join(self.row_error)\n        self.error_list.append(row)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.scripts.data_upload.SpeciesCSVUpload.error_row","title":"error_row","text":"<pre><code>error_row(message)\n</code></pre> <p>Get error in row</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <p>error message for a row</p> required Source code in <code>django_project/species/scripts/data_upload.py</code> <pre><code>def error_row(self, message):\n    \"\"\"\n    Get error in row\n    :param message: error message for a row\n    \"\"\"\n    self.row_error.append(message)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.scripts.data_upload.SpeciesCSVUpload.finish","title":"finish","text":"<pre><code>finish(headers)\n</code></pre> <p>Finishing the csv upload process</p> Source code in <code>django_project/species/scripts/data_upload.py</code> <pre><code>def finish(self, headers):\n    \"\"\"\n    Finishing the csv upload process\n    \"\"\"\n    file_name = (\n        self.upload_session.process_file.name.replace(\n            'species/', '')\n    )\n    file_path = (\n        self.upload_session.process_file.path.replace(file_name, '')\n    )\n\n    # Create error file\n    # TODO : Done it simultaneously with file processing\n    if self.error_list:\n        error_headers = copy.deepcopy(headers)\n        if 'error_message' not in error_headers:\n            error_headers.insert(0, 'error_message')\n        error_file_path = '{path}error_{name}'.format(\n            path=file_path,\n            name=file_name\n        )\n\n        excel_error = None\n\n        if error_file_path.endswith('.xlsx'):\n            excel_error = error_file_path\n            logger.log(\n                level=logging.ERROR,\n                msg=str(excel_error)\n            )\n            with tempfile.NamedTemporaryFile(mode='w', delete=False)\\\n                    as csv_file:\n                error_file_path = csv_file.name\n\n        with open(error_file_path, mode='w') as csv_file:\n            writer = csv.writer(\n                csv_file, delimiter=',', quotechar='\"',\n                quoting=csv.QUOTE_MINIMAL)\n            writer.writerow(error_headers)\n            for data in self.error_list:\n                data_list = []\n                for key in error_headers:\n                    try:\n                        data_list.append(data[key])\n                    except KeyError:\n                        continue\n                writer.writerow(data_list)\n\n        if excel_error:\n            with pd.ExcelWriter(excel_error, engine='openpyxl', mode='w')\\\n                    as writer:\n                dataframe = pd.read_csv(error_file_path)\n                dataframe.to_excel(\n                    writer,\n                    sheet_name=SHEET_TITLE,\n                    index=False\n                )\n\n        self.upload_session.error_file.name = (\n            'species/error_{}'.format(\n                file_name\n            )\n        )\n\n    # Create success message\n    success_message = None\n    if self.created_list &gt; 0 and self.existed_list == 0:\n        success_message = \"{} rows uploaded successfully.\" \\\n                          \"\".format(self.created_list)\n\n    if self.existed_list &gt; 0 and self.created_list == 0:\n        success_message = \"{} rows already exist and have been \" \\\n                          \"overwritten.\" \\\n                          \"\".format(self.existed_list)\n\n    if self.existed_list &gt; 0 and self.created_list &gt; 0:\n        success_message = \"{} rows already exist and have been \" \\\n                          \"overwritten. {} \" \\\n                          \"rows uploaded successfully.\" \\\n                          \"\".format(self.existed_list, self.created_list)\n\n    if success_message:\n        self.upload_session.success_notes = success_message\n\n    if self.total_rows == 0:\n        self.upload_session.error_notes = (\n            'You have uploaded empty spreadsheet, please check again.'\n        )\n\n    self.upload_session.processed = True\n    self.upload_session.progress = 'Finished'\n    self.upload_session.save()\n    if self.created_list &gt; 0 or self.existed_list &gt; 0:\n        mark_model_output_as_outdated_by_species_list(self.species_id_list)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.scripts.data_upload.SpeciesCSVUpload.population_estimate_category","title":"population_estimate_category","text":"<pre><code>population_estimate_category(row)\n</code></pre> <p>Save Population estimate category.</p> Source code in <code>django_project/species/scripts/data_upload.py</code> <pre><code>def population_estimate_category(self, row):\n    \"\"\" Save Population estimate category.\n    \"\"\"\n    pop_est = self.row_value(row, POPULATION_ESTIMATE_CATEGORY)\n    if pop_est:\n        try:\n            pop_est_cat = PopulationEstimateCategory.objects.get(\n                name__iexact=pop_est\n            )\n        except PopulationEstimateCategory.DoesNotExist:\n            self.error_row(\n                f\"Population estimate category '{pop_est}' does not exist\"\n            )\n            return None\n        return pop_est_cat\n    return None\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.scripts.data_upload.SpeciesCSVUpload.population_status","title":"population_status","text":"<pre><code>population_status(row)\n</code></pre> <p>Fetch Population status.</p> Source code in <code>django_project/species/scripts/data_upload.py</code> <pre><code>def population_status(self, row):\n    \"\"\" Fetch Population status.\n    \"\"\"\n    pop_st = self.row_value(row, POPULATION_STATUS)\n    if pop_st:\n        try:\n            population_st = PopulationStatus.objects.get(\n                name__iexact=pop_st\n            )\n        except PopulationStatus.DoesNotExist:\n            self.error_row(\n                f\"Population status '{pop_st}' does not exist\"\n            )\n            return None\n        return population_st\n    return None\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.scripts.data_upload.SpeciesCSVUpload.presence","title":"presence","text":"<pre><code>presence(row)\n</code></pre> <p>Fetch presence value.</p> Source code in <code>django_project/species/scripts/data_upload.py</code> <pre><code>def presence(self, row):\n    \"\"\"Fetch presence value.\"\"\"\n    presence = self.row_value(row, PRESENCE)\n    value = None\n    if presence:\n        value = map_string_to_value(presence, PRESENCE_VALUE_MAPPING)\n        if value is None:\n            self.error_row(\n                f\"Presence '{presence}' does not exist\"\n            )\n    return value\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.scripts.data_upload.SpeciesCSVUpload.process_csv_dict_reader","title":"process_csv_dict_reader","text":"<pre><code>process_csv_dict_reader()\n</code></pre> <p>Read and process data from csv file</p> Source code in <code>django_project/species/scripts/data_upload.py</code> <pre><code>def process_csv_dict_reader(self):\n    \"\"\"\n    Read and process data from csv file\n    \"\"\"\n    index = 1\n    self.created_list = 0\n    self.existed_list = 0\n    for row in self.csv_dict_reader:\n        self.row_error = []\n        if UploadSpeciesCSV.objects.get(\n                id=self.upload_session.id).canceled:\n            return\n        logger.debug(row)\n        self.upload_session.progress = '{index}/{total}'.format(\n            index=index,\n            total=self.total_rows\n        )\n        self.upload_session.save()\n        index += 1\n        self.process_data(row=row)\n        self.error_file(row)\n    self.finish(self.csv_dict_reader.fieldnames)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.scripts.data_upload.SpeciesCSVUpload.process_data","title":"process_data","text":"<pre><code>process_data(row)\n</code></pre> <p>Processing row of csv file.</p> Source code in <code>django_project/species/scripts/data_upload.py</code> <pre><code>def process_data(self, row):\n    \"\"\"Processing row of csv file.\"\"\"\n\n    # check compulsory fields\n    self.check_compulsory_fields(row)\n    property = taxon = None\n    property_code = self.row_value(row, PROPERTY)\n    if property_code:\n        property = self.get_property(property_code)\n\n        if not property:\n            self.error_row(\n                message=\"Property code {} doesn't match the selected \"\n                        \"property. Please replace it with {}.\".format(\n                            self.row_value(row, PROPERTY),\n                            self.upload_session.property.short_code)\n            )\n\n    scientific_name = self.row_value(row, SCIENTIFIC_NAME)\n    common_name = self.row_value(row, COMMON_NAME)\n    if scientific_name and common_name:\n        taxon = self.get_taxon(common_name, scientific_name)\n        if not taxon:\n            self.error_row(\n                message=\"{} doesn't exist in the \"\n                        \"database. Please select species available \"\n                        \"in the dropdown only.\".format(\n                            self.row_value(row, SCIENTIFIC_NAME)\n                        )\n            )\n        elif taxon.id not in self.species_id_list:\n            self.species_id_list.append(taxon.id)\n\n    area_available_to_species = self.row_value(row, AREA)\n    # validate area_available_to_species must be greater than 0 and\n    # less than property size\n    area_available_to_species_num = round(\n        string_to_number(area_available_to_species))\n    property_area = round(self.upload_session.property.property_size_ha)\n    if (\n        area_available_to_species_num &lt;= 0 or\n        area_available_to_species_num &gt;\n        property_area\n    ):\n        self.error_row(\n            message=\"Area available to species must be greater than 0 \"\n                    \"and less than or equal to property area size \"\n                    f\"({property_area} ha).\"\n        )\n\n    survey_method = self.survey_method(row)\n    survey_other = self.row_value(row, IF_OTHER_SURVEY)\n    sur_other = None\n    if survey_method and survey_method.name == IF_OTHER_SURVEY_VAL:\n        if not survey_other:\n            self.error_row(\n                message=\"The value of field {} \"\n                        \"is empty.\".format(IF_OTHER_SURVEY)\n            )\n        sur_other = survey_other\n\n    open_close_system = self.open_close_system(row)\n    population_status = self.population_status(row)\n    population_estimate = self.population_estimate_category(row)\n    population_other = self.row_value(row, IF_OTHER_POPULATION)\n    pop_other = None\n    if population_estimate and \\\n            population_estimate.name == IF_OTHER_POPULATION_VAL:\n        if not population_other:\n            self.error_row(\n                message=\"The value of field {} \"\n                        \"is empty.\".format(IF_OTHER_POPULATION)\n            )\n            # return\n        pop_other = population_other\n\n    year = self.row_value(row, YEAR)\n    if year.isdigit():\n        if int(year) &gt; timezone.now().year:\n            self.error_row(\n                message=f\"'{YEAR}' with value {year} exceeds current year.\"\n            )\n    count_total = self.row_value(row, COUNT_TOTAL)\n    presence = self.presence(row)\n    pop_certainty = self.row_value(row, POPULATION_ESTIMATE_CERTAINTY)\n    sampling_effort_coverage = self.sampling_effort(row)\n\n    if property and taxon and self.check_if_not_superuser():\n        is_organisation_manager = (\n            OrganisationRepresentative.objects.filter(\n                organisation=property.organisation,\n                user=self.upload_session.uploader\n            )\n        )\n        existing_data = AnnualPopulation.objects.filter(\n            year=int(string_to_number(year)),\n            taxon=taxon,\n            property=property\n        ).first()\n        if existing_data:\n            # validate if user can update the data: uploader or manager\n            if (\n                not existing_data.is_editable(\n                    self.upload_session.uploader)\n            ):\n                self.error_row(\n                    message=\"You are not allowed to update data of \"\n                            \"property {} and species {} in year {}\".format(\n                                property_code, scientific_name, year\n                            )\n                )\n        else:\n            # validate if user can add data to the property\n            is_organisation_member = OrganisationUser.objects.filter(\n                organisation=property.organisation,\n                user=self.upload_session.uploader\n            )\n            if not is_organisation_manager and not is_organisation_member:\n                self.error_row(\n                    message=\"You are not allowed to add data to \"\n                            \"property {}\".format(property_code)\n                )\n\n    if len(self.row_error) &gt; 0:\n        return\n\n    # Save AnnualPopulation\n    try:\n        annual, annual_created = AnnualPopulation.objects.update_or_create(\n            year=int(string_to_number(year)),\n            taxon=taxon,\n            property=property,\n            defaults={\n                'user': self.upload_session.uploader,\n                'area_available_to_species': area_available_to_species_num,\n                'total': int(string_to_number(count_total)),\n                'adult_total': int(string_to_number(\n                    self.row_value(row, COUNT_ADULT_TOTAL))),\n                'adult_male': int(string_to_number(\n                    self.row_value(row, COUNT_ADULT_MALES))),\n                'adult_female': int(string_to_number(\n                    self.row_value(row, COUNT_ADULT_FEMALES))),\n                'juvenile_male': int(string_to_number(\n                    self.row_value(row, COUNT_JUVENILE_MALES))),\n                'juvenile_female': int(string_to_number(\n                    self.row_value(row, COUNT_JUVENILE_FEMALES))),\n                'sub_adult_total': int(string_to_number(\n                    self.row_value(row, COUNT_SUBADULT_TOTAL))),\n                'sub_adult_male': int(string_to_number(\n                    self.row_value(row, COUNT_SUBADULT_MALE))),\n                'sub_adult_female': int(string_to_number(\n                    self.row_value(row, COUNT_SUBADULT_FEMALE))),\n                'juvenile_total': int(string_to_number(\n                    self.row_value(row, COUNT_JUVENILE_TOTAL))),\n                'group': int(string_to_number(self.row_value(row, GROUP))),\n                'open_close_system': open_close_system,\n                'survey_method': survey_method,\n                'presence': presence,\n                'upper_confidence_level': float(string_to_number(\n                    self.row_value(row, UPPER))),\n                'lower_confidence_level': float(string_to_number(\n                    self.row_value(row, LOWER))),\n                'certainty_of_bounds': int(string_to_number(\n                    self.row_value(row, CERTAINTY_OF_POPULATION))),\n                'sampling_effort_coverage': sampling_effort_coverage,\n                'population_estimate_certainty': int(\n                    string_to_number(pop_certainty)),\n                'population_estimate_category': population_estimate,\n                'survey_method_other': sur_other,\n                'population_estimate_category_other': pop_other,\n                'population_status': population_status\n            }\n        )\n        annual.clean()\n    except (IntegrityError, ValidationError):\n        if annual.pk:\n            annual.delete()\n        self.error_row(\n            message=\"The total of {} and {} must not exceed {}.\".format(\n                    COUNT_ADULT_MALES,\n                    COUNT_ADULT_FEMALES,\n                    COUNT_TOTAL)\n        )\n        logger.log(\n            level=logging.ERROR,\n            msg=str(self.row_error)\n        )\n        return\n\n    if annual_created:\n        self.created_list += 1\n    else:\n        self.existed_list += 1\n        # if updated, cleared population per activity\n        AnnualPopulationPerActivity.objects.filter(\n            annual_population=annual\n        ).delete()\n\n    # Save AnnualPopulationPerActivity translocation intake\n    if self.row_value(row, INTRODUCTION_TOTAL):\n        intake = self.save_population_per_activity(\n            row, ACTIVITY_TRANSLOCATION_INTAKE, year,\n            annual, INTRODUCTION_TOTAL,\n            INTRODUCTION_TOTAL_MALES, INTRODUCTION_TOTAL_FEMALES,\n            INTRODUCTION_MALE_JUV, INTRODUCTION_FEMALE_JUV\n        )\n        intake_data = {\n            \"reintroduction_source\": self.row_value(row,\n                                                    INTRODUCTION_SOURCE),\n            \"founder_population\": string_to_boolean(\n                self.row_value(row, FOUNDER_POPULATION)\n            ),\n            \"intake_permit\": self.row_value(\n                row, INTRODUCTION_PERMIT_NUMBER\n            )\n        }\n        if intake:\n            intake = AnnualPopulationPerActivity.objects.filter(\n                id=intake.id\n            )\n            intake.update(**intake_data)\n\n    # Save AnnualPopulationPerActivity translocation offtake\n    if self.row_value(row, TRANS_OFFTAKE_TOTAL):\n        off_take = self.save_population_per_activity(\n            row, ACTIVITY_TRANSLOCATION_OFFTAKE, year,\n            annual, TRANS_OFFTAKE_TOTAL,\n            TRANS_OFFTAKE_ADULTE_MALES, TRANS_OFFTAKE_ADULTE_FEMALES,\n            TRANS_OFFTAKE_MALE_JUV, TRANS_OFFTAKE_FEMALE_JUV\n        )\n        off_take_data = {\n            \"translocation_destination\": self.row_value(\n                row, TRANS_DESTINATION),\n            \"offtake_permit\": self.row_value(\n                row, TRANS_OFFTAKE_PERMIT_NUMBER)\n        }\n        if off_take:\n            off_take = AnnualPopulationPerActivity.objects.filter(\n                id=off_take.id\n            )\n            off_take.update(**off_take_data)\n\n    # Save AnnualPopulationPerActivity Planned hunt/cull\n    if self.row_value(row, PLANNED_HUNT_TOTAL):\n        hunt = self.save_population_per_activity(\n            row, ACTIVITY_PLANNED_HUNT_CULL, year,\n            annual, PLANNED_HUNT_TOTAL,\n            PLANNED_HUNT_OFFTAKE_ADULT_MALES,\n            PLANNED_HUNT_OFFTAKE_ADULT_FAMALES,\n            PLANNED_HUNT_OFFTAKE_MALE_JUV,\n            PLANNED_HUNT_OFFTAKE_FEMALE_JUV\n        )\n        hunt_data = {\n            \"offtake_permit\": self.row_value(\n                row, PLANNED_HUNT_PERMIT_NUMBER\n            )\n\n        }\n        if hunt:\n            hunt = AnnualPopulationPerActivity.objects.filter(\n                id=hunt.id\n            )\n            hunt.update(**hunt_data)\n\n    # Save AnnualPopulationPerActivity Planned euthanasia\n    if self.row_value(row, PLANNED_EUTH_TOTAL):\n        planned = self.save_population_per_activity(\n            row, ACTIVITY_PLANNED_EUTH_DCA, year,\n            annual, PLANNED_EUTH_TOTAL,\n            PLANNED_EUTH_OFFTAKE_ADULT_MALES,\n            PLANNED_EUTH_OFFTAKE_ADULT_FAMALES,\n            PLANNED_EUTH_OFFTAKE_MALE_JUV,\n            PLANNED_EUTH_OFFTAKE_FEMALE_JUV\n        )\n        planned_data = {\n            \"offtake_permit\": self.row_value(\n                row, PLANNED_EUTH_PERMIT_NUMBER\n            )\n\n        }\n        if planned:\n            planned = AnnualPopulationPerActivity.objects.filter(\n                id=planned.id\n            )\n            planned.update(**planned_data)\n\n    # Save AnnualPopulationPerActivity Unplanned/illegal hunting\n    if self.row_value(row, UNPLANNED_HUNT_TOTAL):\n        self.save_population_per_activity(\n            row, ACTIVITY_UNPLANNED_ILLEGAL_HUNTING, year,\n            annual, UNPLANNED_HUNT_TOTAL,\n            UNPLANNED_HUNT_OFFTAKE_ADULT_MALES,\n            UNPLANNED_HUNT_OFFTAKE_ADULT_FAMALES,\n            UNPLANNED_HUNT_OFFTAKE_MALE_JUV,\n            UNPLANNED_HUNT_OFFTAKE_FEMALE_JUV\n        )\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.scripts.data_upload.SpeciesCSVUpload.row_value","title":"row_value","text":"<pre><code>row_value(row, key)\n</code></pre> <p>Get row value by key</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <p>row data</p> required <code>key</code> <p>key</p> required <p>Returns:</p> Type Description <p>row value</p> Source code in <code>django_project/species/scripts/data_upload.py</code> <pre><code>def row_value(self, row, key):\n    \"\"\"\n    Get row value by key\n    :param row: row data\n    :param key: key\n    :return: row value\n    \"\"\"\n    row_value = ''\n    try:\n        row_value = row[key]\n        row_value = row_value.replace('\\xa0', ' ')\n        row_value = row_value.replace('\\xc2', '')\n        row_value = row_value.replace('\\\\xa0', '')\n        row_value = row_value.strip()\n        row_value = re.sub(' +', ' ', row_value)\n    except KeyError:\n        pass\n    return row_value\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.scripts.data_upload.SpeciesCSVUpload.start","title":"start","text":"<pre><code>start(encoding='ISO-8859-1')\n</code></pre> <p>Start processing the csv file from upload session</p> Source code in <code>django_project/species/scripts/data_upload.py</code> <pre><code>def start(self, encoding='ISO-8859-1'):\n    \"\"\"\n    Start processing the csv file from upload session\n    \"\"\"\n    self.error_list = []\n    self.species_id_list = []\n    uploaded_file = self.upload_session.process_file\n    if self.upload_session.process_file.path.endswith('.xlsx'):\n        excel = pd.ExcelFile(self.upload_session.process_file)\n        dataframe = excel.parse(SHEET_TITLE)\n        with tempfile.NamedTemporaryFile(mode='w', delete=False) \\\n                as csv_file:\n            dataframe.to_csv(csv_file.name, index=False)\n            uploaded_file = csv_file\n    try:\n        read_line = uploaded_file.readlines()\n        uploaded_file_path = uploaded_file.path\n    except ValueError:\n        file = open(uploaded_file.name)\n        read_line = file.readlines()\n        uploaded_file_path = uploaded_file.name\n    self.total_rows = len(\n        read_line\n    ) - 1\n    self.process_started()\n    processed = False\n\n    with open(\n            uploaded_file_path,\n            encoding=encoding) as csv_file:\n        try:\n            self.csv_dict_reader = csv.DictReader(csv_file)\n            self.process_csv_dict_reader()\n            processed = True\n        except UnicodeDecodeError:\n            pass\n    if not processed:\n        with open(\n                uploaded_file_path,\n                encoding=encoding\n        ) as csv_file:\n            try:\n                self.csv_dict_reader = csv.DictReader(csv_file)\n                self.process_csv_dict_reader()\n                processed = True\n            except UnicodeDecodeError:\n                pass\n    if not processed:\n        self.upload_session.canceled = True\n        self.upload_session.save()\n        self.process_ended()\n        return\n    self.process_ended()\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.scripts.data_upload.SpeciesCSVUpload.survey_method","title":"survey_method","text":"<pre><code>survey_method(row)\n</code></pre> <p>Get survey method.</p> Source code in <code>django_project/species/scripts/data_upload.py</code> <pre><code>def survey_method(self, row):\n    \"\"\"Get survey method.\"\"\"\n    survey = self.row_value(row, SURVEY_METHOD)\n    if survey:\n        try:\n            survey_method = SurveyMethod.objects.get(\n                name__iexact=survey\n            )\n        except SurveyMethod.DoesNotExist:\n            self.error_row(\n                f\"Survey method '{survey}' does not exist\"\n            )\n            return None\n        return survey_method\n    return None\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.scripts.data_upload.map_string_to_value","title":"map_string_to_value","text":"<pre><code>map_string_to_value(string, value_mapping)\n</code></pre> <p>Convert a string to the value in dictionary of value_mapping.</p> Source code in <code>django_project/species/scripts/data_upload.py</code> <pre><code>def map_string_to_value(string, value_mapping):\n    \"\"\"Convert a string to the value in dictionary of value_mapping.\"\"\"\n    if string in value_mapping:\n        return value_mapping[string]\n    return None\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.scripts.data_upload.string_to_boolean","title":"string_to_boolean","text":"<pre><code>string_to_boolean(string)\n</code></pre> <p>Convert a string to boolean.</p> <p>Parameters:</p> Name Type Description Default <code>string</code> <code>str</code> <p>The string to convert</p> required Source code in <code>django_project/species/scripts/data_upload.py</code> <pre><code>def string_to_boolean(string):\n    \"\"\"Convert a string to boolean.\n\n    :param\n    string: The string to convert\n    :type\n    string:str\n    \"\"\"\n    if string in ['Yes', 'YES', 'yes']:\n        return True\n    return False\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.scripts.data_upload.string_to_number","title":"string_to_number","text":"<pre><code>string_to_number(string)\n</code></pre> <p>Convert a string to a number.</p> <p>Parameters:</p> Name Type Description Default <code>string</code> <code>str</code> <p>The string to convert</p> required Source code in <code>django_project/species/scripts/data_upload.py</code> <pre><code>def string_to_number(string):\n    \"\"\"Convert a string to a number.\n\n    :param\n    string: The string to convert\n    :type\n    string:str\n    \"\"\"\n    try:\n        return float(string)\n    except ValueError:\n        return float(0)\n</code></pre>"},{"location":"developer/manual/species/#test-case","title":"Test Case","text":""},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonRankTestCase","title":"TaxonRankTestCase","text":"<p>               Bases: <code>TestCase</code></p> <p>Taxon rank test case.</p>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonRankTestCase.setUpTestData","title":"setUpTestData  <code>classmethod</code>","text":"<pre><code>setUpTestData()\n</code></pre> <p>Set up test data for taxon rank test case.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>@classmethod\ndef setUpTestData(cls):\n    \"\"\"Set up test data for taxon rank test case.\"\"\"\n    cls.taxonRank = TaxonRankFactory()\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonRankTestCase.test_create_taxon_rank","title":"test_create_taxon_rank","text":"<pre><code>test_create_taxon_rank()\n</code></pre> <p>Test create taxon rank.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_create_taxon_rank(self):\n    \"\"\"Test create taxon rank.\"\"\"\n    self.assertTrue(isinstance(self.taxonRank, TaxonRank))\n    self.assertEqual(\n        self.taxonRank.name,\n        TaxonRank.objects.get(id=self.taxonRank.id).name\n    )\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonRankTestCase.test_delete_taxon_rank","title":"test_delete_taxon_rank","text":"<pre><code>test_delete_taxon_rank()\n</code></pre> <p>Test delete taxon rank.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_delete_taxon_rank(self):\n    \"\"\"Test delete taxon rank.\"\"\"\n    self.taxonRank.delete()\n    self.assertEqual(TaxonRank.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonRankTestCase.test_unique_taxon_rank_name_constraint","title":"test_unique_taxon_rank_name_constraint","text":"<pre><code>test_unique_taxon_rank_name_constraint()\n</code></pre> <p>Test unique taxon rank name constraint.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_unique_taxon_rank_name_constraint(self):\n    \"\"\"Test unique taxon rank name constraint.\"\"\"\n    with self.assertRaises(Exception) as raised:\n        TaxonRankFactory(name='taxon_rank_1')\n        self.assertEqual(IntegrityError, type(raised.exception))\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonRankTestCase.test_update_taxon_rank","title":"test_update_taxon_rank","text":"<pre><code>test_update_taxon_rank()\n</code></pre> <p>Test update taxon rank.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_update_taxon_rank(self):\n    \"\"\"Test update taxon rank.\"\"\"\n    self.taxonRank.name = 'taxon_rank_1'\n    self.taxonRank.save()\n    self.assertEqual(\n        TaxonRank.objects.get(id=self.taxonRank.id).name,\n        'taxon_rank_1'\n    )\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonSurveyMethodTestCase","title":"TaxonSurveyMethodTestCase","text":"<p>               Bases: <code>TestCase</code></p> <p>Taxon survey method count test case.</p>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonSurveyMethodTestCase.setUpTestData","title":"setUpTestData  <code>classmethod</code>","text":"<pre><code>setUpTestData()\n</code></pre> <p>SetUpTestData for Taxon survey method count test case.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>@classmethod\ndef setUpTestData(cls):\n    \"\"\"SetUpTestData for Taxon survey method count test case.\"\"\"\n    cls.taxon = Taxon.objects.create(\n        scientific_name='taxon_0',\n        common_name_verbatim='taxon_0',\n        colour_variant=False,\n        taxon_rank=TaxonRankFactory(),\n    )\n    cls.survey_method = SurveyMethod.objects.create(\n        name='Unknown',\n    )\n    cls.taxon_survey_method = TaxonSurveyMethodF(\n        taxon=cls.taxon,\n        survey_method=cls.survey_method\n    )\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonSurveyMethodTestCase.test_create_taxon_survey_method","title":"test_create_taxon_survey_method","text":"<pre><code>test_create_taxon_survey_method()\n</code></pre> <p>Test create Taxon survey method count.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_create_taxon_survey_method(self):\n    \"\"\"Test create Taxon survey method count.\"\"\"\n    self.assertTrue(\n        isinstance(self.taxon_survey_method, TaxonSurveyMethod)\n    )\n    self.assertEqual(TaxonSurveyMethod.objects.count(), 1)\n    self.assertEqual(\n        TaxonSurveyMethod.objects.filter(\n        taxon__scientific_name=self.taxon.scientific_name\n        ).count(), 1\n    )\n    self.assertEqual(\n        TaxonSurveyMethod.objects.filter(\n        survey_method__name=self.survey_method.name\n        ).count(), 1\n    )\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonSurveyMethodTestCase.test_delete_taxon_survey_method","title":"test_delete_taxon_survey_method","text":"<pre><code>test_delete_taxon_survey_method()\n</code></pre> <p>Test delete Taxon survey method count.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_delete_taxon_survey_method(self):\n    \"\"\"Test delete Taxon survey method count.\"\"\"\n    self.taxon.delete()\n    self.assertEqual(TaxonSurveyMethod.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonSurveyMethodTestCase.test_update_taxon_survey_method","title":"test_update_taxon_survey_method","text":"<pre><code>test_update_taxon_survey_method()\n</code></pre> <p>Test update Taxon survey method count.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_update_taxon_survey_method(self):\n    \"\"\"Test update Taxon survey method count.\"\"\"\n    taxon = TaxonFactory.create(\n        scientific_name='taxon',\n        common_name_verbatim='taxon_0',\n        colour_variant=False,\n        taxon_rank=TaxonRankFactory(),\n    )\n    self.taxon_survey_method.taxon = taxon\n    self.taxon_survey_method.save()\n    self.assertEqual(\n        TaxonSurveyMethod.objects.filter(\n        taxon__scientific_name='taxon').count(),\n        1\n    )\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonTestCase","title":"TaxonTestCase","text":"<p>               Bases: <code>TestCase</code></p> <p>Taxon model test case.</p>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonTestCase.setUpTestData","title":"setUpTestData  <code>classmethod</code>","text":"<pre><code>setUpTestData()\n</code></pre> <p>Taxon model test data.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>@classmethod\ndef setUpTestData(cls):\n    \"\"\"Taxon model test data.\"\"\"\n    cls.taxonRank = TaxonRankFactory.create(\n        name='Species'\n    )\n    cls.taxon = TaxonFactory.create(\n        scientific_name='taxon_0',\n        common_name_verbatim='taxon_0',\n        colour_variant=False,\n        taxon_rank=cls.taxonRank,\n        show_on_front_page=False\n    )\n    cls.url = reverse('species')\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonTestCase.test_create_taxon_no_graph_icon","title":"test_create_taxon_no_graph_icon","text":"<pre><code>test_create_taxon_no_graph_icon()\n</code></pre> <p>Test create taxon without graph icon.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_create_taxon_no_graph_icon(self):\n    \"\"\"Test create taxon without graph icon.\"\"\"\n    taxon = TaxonFactory.create(\n        scientific_name='taxon_1',\n        common_name_verbatim='taxon_11',\n        colour_variant=False,\n        taxon_rank=self.taxonRank,\n        show_on_front_page=False,\n        icon=None\n    )\n    self.assertTrue(isinstance(taxon, Taxon))\n    self.assertEqual(Taxon.objects.count(), 2)\n    self.assertEqual(\n        taxon.scientific_name,\n        'taxon_1'\n    )\n    self.assertEqual(taxon.graph_icon, None)\n    self.assertEqual(taxon.topper_icon, None)\n    self.assertEqual(taxon.icon, None)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonTestCase.test_delete_taxon","title":"test_delete_taxon","text":"<pre><code>test_delete_taxon()\n</code></pre> <p>Test delete taxon.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_delete_taxon(self):\n    \"\"\"Test delete taxon.\"\"\"\n    self.taxon.delete()\n    self.assertEqual(Taxon.objects.count(), 0)\n    \"\"\"Test delete taxon rank.\"\"\"\n    self.taxonRank.delete()\n    self.assertEqual(TaxonRank.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonTestCase.test_get_taxon_frontpage_list","title":"test_get_taxon_frontpage_list","text":"<pre><code>test_get_taxon_frontpage_list()\n</code></pre> <p>Test fetch taxon list for frontpage.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_get_taxon_frontpage_list(self):\n    \"\"\"Test fetch taxon list for frontpage.\"\"\"\n    taxon = TaxonFactory.create(\n        scientific_name='taxon_1',\n        common_name_verbatim='taxon_1',\n        colour_variant=False,\n        taxon_rank=self.taxonRank,\n        show_on_front_page=True\n    )\n    property_1 = PropertyFactory.create()\n    property_2 = PropertyFactory.create()\n    client = Client()\n    response = client.get(reverse('species-front-page'))\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(len(response.data), 1)\n    taxon_1 = [d for d in response.data if d['id'] == taxon.id]\n    self.assertTrue(taxon_1)\n    self.assertEqual(taxon_1[0]['total_population'], 0)\n    self.assertEqual(taxon_1[0]['species_name'], taxon.scientific_name)\n    user_1 = User.objects.create_user(username='testuser_taxon_1', password='12345')\n    user_2 = User.objects.create_user(username='testuser_taxon_2', password='12345')\n\n    # create two years of data\n    AnnualPopulationF(\n        year=2021, total=30,\n        adult_male=10, adult_female=10,\n        taxon=taxon,\n        user=user_1,\n        property=property_1,\n        area_available_to_species=2\n    )\n    AnnualPopulationF(\n        year=2022, total=35,\n        adult_male=10, adult_female=10,\n        taxon=taxon,\n        user=user_1,\n        property=property_1,\n        area_available_to_species=2\n    )\n    AnnualPopulationF(\n        year=2020, total=15,\n        adult_male=10, adult_female=5,\n        taxon=taxon,\n        user=user_2,\n        property=property_2,\n        area_available_to_species=1\n    )\n    AnnualPopulationF(\n        year=2022, total=22,\n        adult_male=10, adult_female=10,\n        taxon=taxon,\n        user=user_2,\n        property=property_2,\n        area_available_to_species=1\n    )\n    response = client.get(reverse('species-front-page'))\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(len(response.data), 1)\n    taxon_1 = [d for d in response.data if d['id'] == taxon.id]\n    self.assertTrue(taxon_1)\n    self.assertEqual(taxon_1[0]['total_population'], 57)\n    self.assertEqual(taxon_1[0]['total_area'], 3)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonTestCase.test_get_taxon_list","title":"test_get_taxon_list","text":"<pre><code>test_get_taxon_list()\n</code></pre> <p>Taxon list API test within the organisation</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_get_taxon_list(self):\n    \"\"\"Taxon list API test within the organisation\"\"\"\n    organisation = organisationFactory.create()\n    property_obj = PropertyFactory.create(organisation=organisation)\n    AnnualPopulationF.create(\n        taxon=self.taxon,\n        total=10,\n        adult_male=5,\n        adult_female=5,\n        property=property_obj\n    )\n\n    user = User.objects.create_user(\n        username='testuserd',\n        password='testpasswordd'\n    )\n\n    user.user_profile.current_organisation = organisation\n    user.save()\n\n    auth_headers = {\n        'HTTP_AUTHORIZATION': 'Basic ' +\n        base64.b64encode(b'testuserd:testpasswordd').decode('ascii'),\n    }\n    client = Client()\n    response = client.get(self.url, **auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    expected_data = TaxonSerializer([self.taxon], many=True).data\n    self.assertEqual(expected_data, response.data)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonTestCase.test_get_taxon_list_empty","title":"test_get_taxon_list_empty","text":"<pre><code>test_get_taxon_list_empty()\n</code></pre> <p>Taxon list API test when no Annual Population has been made</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_get_taxon_list_empty(self):\n    \"\"\"Taxon list API test when no Annual Population has been made\"\"\"\n    organisation = organisationFactory.create()\n\n    user = User.objects.create_user(\n        username='testuserd',\n        password='testpasswordd'\n    )\n\n    user.user_profile.current_organisation = organisation\n    user.save()\n\n    auth_headers = {\n        'HTTP_AUTHORIZATION': 'Basic ' +\n        base64.b64encode(b'testuserd:testpasswordd').decode('ascii'),\n    }\n    client = Client()\n    response = client.get(self.url, **auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.json(), [])\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonTestCase.test_get_taxon_list_for_organisations","title":"test_get_taxon_list_for_organisations","text":"<pre><code>test_get_taxon_list_for_organisations()\n</code></pre> <p>Taxon list API test for organisations.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_get_taxon_list_for_organisations(self):\n    \"\"\"Taxon list API test for organisations.\"\"\"\n    organisation = organisationFactory.create(national=True)\n    property_obj = PropertyFactory.create(organisation=organisation)\n    AnnualPopulationF.create(\n        taxon=self.taxon,\n        total=10,\n        adult_male=5,\n        adult_female=5,\n        property=property_obj\n    )\n\n    user = User.objects.create_user(\n        username='testuserd',\n        password='testpasswordd'\n    )\n\n    user.user_profile.current_organisation = organisation\n    user.save()\n\n    property = PropertyFactory.create(\n        organisation=organisation,\n        name='PropertyA'\n    )\n\n    auth_headers = {\n        'HTTP_AUTHORIZATION': 'Basic ' +\n        base64.b64encode(b'testuserd:testpasswordd').decode('ascii'),\n    }\n    client = Client()\n    data = {\"organisation\": organisation.id}\n    response = client.get(self.url, data, **auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(len(response.data), 1)\n    self.assertEqual(response.data[0]['scientific_name'], \"taxon_0\")\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonTestCase.test_get_taxon_provincial_data_consumer","title":"test_get_taxon_provincial_data_consumer","text":"<pre><code>test_get_taxon_provincial_data_consumer()\n</code></pre> <p>Taxon list API test when user is provincial data consumer</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_get_taxon_provincial_data_consumer(self):\n    \"\"\"Taxon list API test when user is provincial data consumer\"\"\"\n    self._setup_data_provincial_data_consumer()\n    auth_headers = {\n        'HTTP_AUTHORIZATION': 'Basic ' +\n        base64.b64encode(b'testuserd:testpasswordd').decode('ascii'),\n    }\n    client = Client()\n    response = client.get(self.url, **auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(\n        response.json(),\n        [\n            {\n                'common_name_verbatim': self.taxon.common_name_verbatim,\n                'id': self.taxon.id,\n                'scientific_name': self.taxon.scientific_name\n            }\n        ]\n    )\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonTestCase.test_get_taxon_provincial_data_consumer_no_organisation","title":"test_get_taxon_provincial_data_consumer_no_organisation","text":"<pre><code>test_get_taxon_provincial_data_consumer_no_organisation()\n</code></pre> <p>Taxon list API test when user is provincial data consumer and has no active organisation.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_get_taxon_provincial_data_consumer_no_organisation(self):\n    \"\"\"Taxon list API test when user is provincial data consumer\n    and has no active organisation.\"\"\"\n    self._setup_data_provincial_data_consumer(set_organisation=False)\n    auth_headers = {\n        'HTTP_AUTHORIZATION': 'Basic ' +\n        base64.b64encode(b'testuserd:testpasswordd').decode('ascii'),\n    }\n    client = Client()\n    response = client.get(self.url, **auth_headers)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.json(), [])\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonTestCase.test_get_taxon_trend_page","title":"test_get_taxon_trend_page","text":"<pre><code>test_get_taxon_trend_page()\n</code></pre> <p>Test fetch taxon detil for trend page.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_get_taxon_trend_page(self):\n    \"\"\"Test fetch taxon detil for trend page.\"\"\"\n    taxon = TaxonFactory.create(\n        scientific_name='taxon_1',\n        common_name_verbatim='taxon_1',\n        colour_variant=False,\n        taxon_rank=self.taxonRank,\n        show_on_front_page=True\n    )\n    property_1 = PropertyFactory.create()\n    property_2 = PropertyFactory.create()\n    client = Client()\n    response = client.get(\n        reverse('taxon-trend-page'),\n        {\n            'species': taxon.scientific_name\n        }\n    )\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.json()['total_population'], 0)\n    self.assertEqual(response.json()['species_name'], taxon.scientific_name)\n    self.assertIsNone(response.json()['graph_icon'])\n    self.assertIsNone(response.json()['model_updated_on'])\n    user_1 = User.objects.create_user(username='testuser_taxon_1', password='12345')\n    user_2 = User.objects.create_user(username='testuser_taxon_2', password='12345')\n    # create two years of data\n    AnnualPopulationF(\n        year=2021, total=30,\n        adult_male=10, adult_female=10,\n        taxon=taxon,\n        user=user_1,\n        property=property_1,\n        area_available_to_species=2\n    )\n    AnnualPopulationF(\n        year=2022, total=35,\n        adult_male=10, adult_female=10,\n        taxon=taxon,\n        user=user_1,\n        property=property_1,\n        area_available_to_species=2\n    )\n    AnnualPopulationF(\n        year=2020, total=15,\n        adult_male=10, adult_female=5,\n        taxon=taxon,\n        user=user_2,\n        property=property_2,\n        area_available_to_species=1\n    )\n    AnnualPopulationF(\n        year=2022, total=22,\n        adult_male=10, adult_female=10,\n        taxon=taxon,\n        user=user_2,\n        property=property_2,\n        area_available_to_species=1\n    )\n    # create statistical model output\n    SpeciesModelOutputF.create(\n        taxon=taxon,\n        is_latest=True,\n        status=DONE,\n        generated_on=datetime.datetime(2000, 8, 14, 8, 8, 8)\n    )\n    response = client.get(\n        reverse('taxon-trend-page'),\n        {\n            'species': taxon.scientific_name\n        }\n    )\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertTrue(response.json())\n    self.assertEqual(response.json()['total_population'], 57)\n    self.assertEqual(response.json()['total_area'], 3)\n    self.assertIsNone(response.json()['graph_icon'])\n    self.assertIsNotNone(response.json()['model_updated_on'])\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonTestCase.test_taxon_relation_to_self","title":"test_taxon_relation_to_self","text":"<pre><code>test_taxon_relation_to_self()\n</code></pre> <p>Test taxon relation to self.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_taxon_relation_to_self(self):\n    \"\"\"Test taxon relation to self.\"\"\"\n    self.taxon2 = Taxon.objects.create(\n        scientific_name='taxon_1',\n        common_name_verbatim='taxon_1',\n        colour_variant=False,\n        taxon_rank=self.taxonRank,\n        parent=self.taxon,\n    )\n    self.assertEqual(self.taxon2.parent, self.taxon)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonTestCase.test_taxon_unique_infraspecific_epithet_constraint","title":"test_taxon_unique_infraspecific_epithet_constraint","text":"<pre><code>test_taxon_unique_infraspecific_epithet_constraint()\n</code></pre> <p>Test taxon unique infraspecific epithet constraint.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_taxon_unique_infraspecific_epithet_constraint(self):\n    \"\"\"Test taxon unique infraspecific epithet constraint.\"\"\"\n\n    Taxon.objects.create(\n        scientific_name='taxon_2',\n        common_name_verbatim='taxon_2',\n        colour_variant=False,\n        infraspecific_epithet='infra_2',\n        taxon_rank=self.taxonRank,\n    )\n    self.assertEqual(\n        Taxon.objects.filter(infraspecific_epithet='infra_2').count(),\n        1\n    )\n\n    with self.assertRaises(Exception) as raised:\n        Taxon.objects.create(\n            scientific_name='taxon_0',\n            common_name_verbatim='taxon_0',\n            colour_variant=False,\n            infraspecific_epithet='infra_1',\n            taxon_rank=self.taxonRank,\n        )\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonTestCase.test_taxon_unique_scientific_name_constraint","title":"test_taxon_unique_scientific_name_constraint","text":"<pre><code>test_taxon_unique_scientific_name_constraint()\n</code></pre> <p>Test taxon unique scientific name constraint.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_taxon_unique_scientific_name_constraint(self):\n    \"\"\"Test taxon unique scientific name constraint.\"\"\"\n    with self.assertRaises(Exception) as raised:\n        Taxon.objects.create(\n            scientific_name='taxon_1',\n            common_name_verbatim='taxon_0',\n            colour_variant=False,\n            taxon_rank=self.taxonRank,\n        )\n        self.assertEqual(IntegrityError, type(raised.exception))\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonTestCase.test_update_taxon","title":"test_update_taxon","text":"<pre><code>test_update_taxon()\n</code></pre> <p>Test update taxon objects.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_update_taxon(self):\n    \"\"\"Test update taxon objects.\"\"\"\n    graph_icon_path = absolute_path(\n        'frontend', 'static', 'images', 'Loxodonta_africana-graph.svg'\n    )\n\n    with open(graph_icon_path, 'rb') as f:\n        self.taxon.scientific_name = 'taxon_1'\n        self.taxon.infraspecific_epithet = 'infra_1'\n        self.taxon.graph_icon = ContentFile(f.read(), name=f\"file.svg\")\n        self.taxon.save()\n        self.taxon.refresh_from_db()\n        self.assertEqual(\n            self.taxon.scientific_name,\n            'taxon_1'\n        )\n        self.assertEqual(\n            self.taxon.infraspecific_epithet,\n            'infra_1'\n        )\n\n        # Check graph_icon, icon, and topper_icon are updated.\n        # Icon and topper_icon are generated automatically from graph_icon\n        self.assertTrue(\n            os.path.exists(\n                absolute_path(\n                    settings.MEDIA_ROOT,\n                    str(self.taxon.graph_icon)\n                )\n            )\n        )\n        self.assertTrue(\n            os.path.exists(\n                absolute_path(\n                    settings.MEDIA_ROOT,\n                    str(self.taxon.icon)\n                )\n            )\n        )\n        self.assertTrue(\n            os.path.exists(\n                absolute_path(\n                    settings.MEDIA_ROOT,\n                    str(self.taxon.topper_icon)\n                )\n            )\n        )\n\n        # Check fill color for each icon.\n        # Icon and topper_icon color are generated automatically from graph_icon\n        self.assertTrue(\n            self.taxon.graph_icon.readlines()[2].endswith(b'10.052 2.6849z\" fill=\"#000000\"/&gt;\\n')\n        )\n        self.assertTrue(\n            self.taxon.topper_icon.readlines()[2].endswith(b'10.052 2.6849z\" fill=\"#75B37A\"/&gt;\\n')\n        )\n        self.assertTrue(\n            self.taxon.icon.readlines()[2].endswith(b'10.052 2.6849z\" fill=\"#FFFFFF\"/&gt;\\n')\n        )\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_serializer.TestTaxonSerializer","title":"TestTaxonSerializer","text":"<p>               Bases: <code>TestCase</code></p> <p>Test Taxon Serializer</p>"},{"location":"developer/manual/species/#django_project.species.test_api_views.TestUploadSpeciesApiView","title":"TestUploadSpeciesApiView","text":"<p>               Bases: <code>TestCase</code></p> <p>Test api view species uploader</p>"},{"location":"developer/manual/species/#django_project.species.test_api_views.TestUploadSpeciesApiView.test_overwrite_annual_population","title":"test_overwrite_annual_population","text":"<pre><code>test_overwrite_annual_population()\n</code></pre> <p>Test upload species multiple times to overwrite data.</p> Source code in <code>django_project/species/test_api_views.py</code> <pre><code>def test_overwrite_annual_population(self):\n    \"\"\"Test upload species multiple times to overwrite data.\"\"\"\n    csv_path = absolute_path(\n        'frontend', 'tests',\n        'csv', 'test_first_upload.csv')\n    data = open(csv_path, 'rb')\n    data = SimpleUploadedFile(\n        content=data.read(),\n        name=data.name,\n        content_type='multipart/form-data'\n    )\n\n    request = self.factory.post(\n        reverse('upload-species'), {\n            'file': data,\n            'token': self.token,\n            'property': self.property.id\n        }\n    )\n    request.user = self.user\n    view = SpeciesUploader.as_view()\n    response = view(request)\n    self.assertEqual(response.status_code, 204)\n    upload_session = UploadSpeciesCSV.objects.get(token=self.token)\n    upload_session.progress = 'Processing'\n    upload_session.save()\n    file_upload = SpeciesCSVUpload()\n    file_upload.upload_session = upload_session\n    file_upload.start('utf-8-sig')\n\n    kwargs = {\n        'token': self.token\n    }\n    request = self.factory.get(\n        reverse('upload-species-status', kwargs=kwargs)\n    )\n    request.user = self.user\n    view = UploadSpeciesStatus.as_view()\n    response = view(request, **kwargs)\n    self.assertEqual(response.status_code, 200)\n    self.assertEqual(response.data['status'], 'Finished')\n    self.assertEqual(AnnualPopulation.objects.count(), 3)\n    self.assertEqual(upload_session.success_notes, \"3 rows uploaded successfully.\")\n    annual_2010 = AnnualPopulation.objects.filter(\n        property=self.property,\n        taxon=self.lion,\n        year=2010\n    ).first()\n    self.assertTrue(annual_2010)\n    self.assertEqual(annual_2010.total, 190)\n    self.assertEqual(AnnualPopulationPerActivity.objects.filter(\n        annual_population=annual_2010\n    ).count(), 5)\n    annual_2011 = AnnualPopulation.objects.filter(\n        property=self.property,\n        taxon=self.lion,\n        year=2011\n    ).first()\n    self.assertTrue(annual_2011)\n    self.assertEqual(annual_2011.total, 190)\n    self.assertEqual(AnnualPopulationPerActivity.objects.filter(\n        annual_population=annual_2011\n    ).count(), 5)\n    annual_2012 = AnnualPopulation.objects.filter(\n        property=self.property,\n        taxon=self.lion,\n        year=2012\n    ).first()\n    self.assertTrue(annual_2012)\n    self.assertEqual(annual_2012.total, 190)\n    self.assertEqual(AnnualPopulationPerActivity.objects.filter(\n        annual_population=annual_2012\n    ).count(), 4)\n    csv_path = absolute_path(\n        'frontend', 'tests',\n        'csv', 'test_second_upload.csv')\n    data = open(csv_path, 'rb')\n    data = SimpleUploadedFile(\n        content=data.read(),\n        name=data.name,\n        content_type='multipart/form-data'\n    )\n\n    request = self.factory.post(\n        reverse('upload-species'), {\n            'file': data,\n            'token': self.token,\n            'property': self.property.id\n        }\n    )\n    request.user = self.user\n    view = SpeciesUploader.as_view()\n    response = view(request)\n    self.assertEqual(response.status_code, 204)\n    upload_session = UploadSpeciesCSV.objects.get(token=self.token)\n    upload_session.progress = 'Processing'\n    upload_session.save()\n    file_upload = SpeciesCSVUpload()\n    file_upload.upload_session = upload_session\n    file_upload.start('utf-8-sig')\n\n    kwargs = {\n        'token': self.token\n    }\n    request = self.factory.get(\n        reverse('upload-species-status', kwargs=kwargs)\n    )\n    request.user = self.user\n    view = UploadSpeciesStatus.as_view()\n    response = view(request, **kwargs)\n    self.assertEqual(response.status_code, 200)\n    self.assertEqual(response.data['status'], 'Finished')\n    self.assertEqual(AnnualPopulation.objects.count(), 3)\n    self.assertEqual(upload_session.success_notes,\n                     \"2 rows already exist and have been overwritten.\")\n    annual_2010.refresh_from_db()\n    annual_2011.refresh_from_db()\n    annual_2012.refresh_from_db()\n    # ensure no change for 2010\n    self.assertEqual(annual_2010.total, 190)\n    self.assertEqual(AnnualPopulationPerActivity.objects.filter(\n        annual_population=annual_2010\n    ).count(), 5)\n    self.assertEqual(annual_2011.total, 240)\n    self.assertEqual(AnnualPopulationPerActivity.objects.filter(\n        annual_population=annual_2011\n    ).count(), 0)\n    self.assertEqual(annual_2012.total, 160)\n    self.assertEqual(AnnualPopulationPerActivity.objects.filter(\n        annual_population=annual_2012\n    ).count(), 1)\n    self.assertTrue(AnnualPopulationPerActivity.objects.filter(\n        annual_population=annual_2012,\n        activity_type__name=\"Translocation (Offtake)\",\n        total=20\n    ).exists())\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_api_views.TestUploadSpeciesApiView.test_save_csv_with_no_property","title":"test_save_csv_with_no_property","text":"<pre><code>test_save_csv_with_no_property()\n</code></pre> <p>Test save csv with not existing property.</p> Source code in <code>django_project/species/test_api_views.py</code> <pre><code>def test_save_csv_with_no_property(self):\n    \"\"\"Test save csv with not existing property.\"\"\"\n\n    request = self.factory.post(\n        reverse('save-csv-species'),\n        data={\n            'token': self.token,\n            'property': 0\n        }, format='json')\n\n    request.user = self.user\n    view = SaveCsvSpecies.as_view()\n    response = view(request)\n    self.assertEqual(response.status_code, 400)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_api_views.TestUploadSpeciesApiView.test_task_string_to_boolean","title":"test_task_string_to_boolean","text":"<pre><code>test_task_string_to_boolean()\n</code></pre> <p>Test string_to_boolean functionality in task</p> Source code in <code>django_project/species/test_api_views.py</code> <pre><code>def test_task_string_to_boolean(self):\n    \"\"\"Test string_to_boolean functionality in task\"\"\"\n\n    self.assertTrue(string_to_boolean('yes'))\n    self.assertFalse(string_to_boolean(''))\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_api_views.TestUploadSpeciesApiView.test_task_string_to_number","title":"test_task_string_to_number","text":"<pre><code>test_task_string_to_number()\n</code></pre> <p>Test string_to_number functionality in task</p> Source code in <code>django_project/species/test_api_views.py</code> <pre><code>def test_task_string_to_number(self):\n    \"\"\"Test string_to_number functionality in task\"\"\"\n\n    self.assertEqual(10, string_to_number('10'))\n    self.assertEqual(0.0, string_to_number(''))\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_api_views.TestUploadSpeciesApiView.test_upload_csv_task","title":"test_upload_csv_task","text":"<pre><code>test_upload_csv_task(mock_app)\n</code></pre> <p>Test upload csv task.</p> Source code in <code>django_project/species/test_api_views.py</code> <pre><code>@mock.patch(\"species.tasks.upload_species.upload_species_data\")\ndef test_upload_csv_task(self, mock_app):\n    \"\"\"Test upload csv task.\"\"\"\n    csv_path = absolute_path(\n        'frontend', 'tests',\n        'csv', 'test.csv')\n    data = open(csv_path, 'rb')\n    data = SimpleUploadedFile(\n        content=data.read(),\n        name=data.name,\n        content_type='multipart/form-data'\n    )\n\n    request = self.factory.post(\n        reverse('upload-species'), {\n            'file': data,\n            'token': self.token,\n            'property': self.property.id\n        }\n    )\n    request.user = self.user\n    view = SpeciesUploader.as_view()\n    response = view(request)\n    self.assertEqual(response.status_code, 204)\n    upload_session = UploadSpeciesCSV.objects.get(token=self.token)\n\n    upload_species_data(upload_session.id)\n    self.assertEqual(Taxon.objects.all().count(), 1)\n    self.assertEqual(AnnualPopulationPerActivity.objects.all().count(), 5)\n    self.assertEqual(AnnualPopulation.objects.all().count(), 1)\n    population_data = AnnualPopulation.objects.all().first()\n    self.assertEqual(population_data.total, 190)\n    self.assertEqual(population_data.adult_total, 150)\n    self.assertTrue(AnnualPopulationPerActivity.objects.filter(\n        activity_type__name=\"Translocation (Offtake)\"\n    ).count(), 1)\n    self.assertTrue(AnnualPopulationPerActivity.objects.filter(\n        activity_type__name=\"Planned Hunt/Cull\"\n    ).count(), 1)\n    self.assertTrue(AnnualPopulationPerActivity.objects.filter(\n        activity_type__name=\"Translocation (Intake)\"\n    ).count(), 1)\n    self.assertTrue(AnnualPopulationPerActivity.objects.filter(\n        activity_type__name=\"Planned Euthanasia/DCA\"\n    ).count(), 1)\n    self.assertTrue(AnnualPopulationPerActivity.objects.filter(\n        activity_type__name=\"Unplanned/Illegal Hunting\"\n    ).count(), 1)\n    self.assertTrue(AnnualPopulationPerActivity.objects.filter(\n        translocation_destination=\"KNP\", offtake_permit=\"ABC100X10\"\n    ).count(), 1)\n    self.assertTrue(AnnualPopulationPerActivity.objects.filter(\n        offtake_permit=\"DEF100X10\"\n    ).count(), 1)\n\n    self.assertTrue(OpenCloseSystem.objects.all().count() == 3)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_api_views.TestUploadSpeciesApiView.test_upload_excel_invalid_area_available","title":"test_upload_excel_invalid_area_available","text":"<pre><code>test_upload_excel_invalid_area_available()\n</code></pre> <p>Test upload species with a csv file that has invalid area available to species.</p> Source code in <code>django_project/species/test_api_views.py</code> <pre><code>def test_upload_excel_invalid_area_available(self):\n    \"\"\"Test upload species with a csv file that has invalid\n    area available to species.\"\"\"\n\n    csv_path = absolute_path(\n        'frontend', 'tests',\n        'csv', 'test_invalid_area_available.csv')\n    data = open(csv_path, 'rb')\n    data = SimpleUploadedFile(\n        content=data.read(),\n        name=data.name,\n        content_type='multipart/form-data'\n    )\n\n    request = self.factory.post(\n        reverse('upload-species'), {\n            'file': data,\n            'token': self.token,\n            'property': self.property.id\n        }\n    )\n    request.user = self.user\n    view = SpeciesUploader.as_view()\n    response = view(request)\n    self.assertEqual(response.status_code, 204)\n    upload_session = UploadSpeciesCSV.objects.get(token=self.token)\n    upload_session.progress = 'Processing'\n    upload_session.save()\n    file_upload = SpeciesCSVUpload()\n    file_upload.upload_session = upload_session\n    file_upload.start('utf-8-sig')\n    upload_session.refresh_from_db()\n    self.assertTrue('error' in upload_session.error_file.path)\n    with open(upload_session.error_file.path, encoding='utf-8-sig') as csv_file:\n        error_file = csv.DictReader(csv_file)\n        headers = error_file.fieldnames\n        self.assertTrue('error_message' in headers)\n        errors = []\n        for row in error_file:\n            errors.append(row['error_message'])\n        self.assertTrue(\n            \"Area available to species must be greater than 0 \"\n            \"and less than or equal to property area size ({:.0f} ha).\".format(\n                self.property.property_size_ha) in errors)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_api_views.TestUploadSpeciesApiView.test_upload_excel_missing_compulsory_field","title":"test_upload_excel_missing_compulsory_field","text":"<pre><code>test_upload_excel_missing_compulsory_field()\n</code></pre> <p>Test upload species with an excel file which misses a compulsory field.</p> Source code in <code>django_project/species/test_api_views.py</code> <pre><code>def test_upload_excel_missing_compulsory_field(self):\n    \"\"\"Test upload species with an excel file which misses\n     a compulsory field.\"\"\"\n\n    csv_path = absolute_path(\n        'frontend', 'tests',\n        'csv', 'excel_wrong_header.xlsx')\n    data = open(csv_path, 'rb')\n    data = SimpleUploadedFile(\n        content=data.read(),\n        name=data.name,\n        content_type='multipart/form-data'\n    )\n\n    request = self.factory.post(\n        reverse('upload-species'), {\n            'file': data,\n            'token': self.token,\n            'property': self.property.id\n        }\n    )\n    request.user = self.user\n    view = SpeciesUploader.as_view()\n    response = view(request)\n    self.assertEqual(response.status_code, 400)\n    self.assertEqual(UploadSpeciesCSV.objects.filter(token=self.token).count(),\n                     1)\n    upload_session = UploadSpeciesCSV.objects.get(token=self.token)\n    self.assertTrue(upload_session.canceled)\n    self.assertEqual(upload_session.process_file.name, '')\n    self.assertEqual(upload_session.error_notes,\n                     \"The 'Property_code' field is missing. Please check \"\n                     \"that all the compulsory fields are in the \"\n                     \"CSV file headers.\"\n                     )\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_api_views.TestUploadSpeciesApiView.test_upload_session","title":"test_upload_session","text":"<pre><code>test_upload_session()\n</code></pre> <p>Test upload species</p> Source code in <code>django_project/species/test_api_views.py</code> <pre><code>def test_upload_session(self):\n    \"\"\"Test upload species \"\"\"\n\n    csv_path = absolute_path(\n        'frontend', 'tests',\n        'csv', 'test.csv')\n    data = open(csv_path, 'rb')\n    data = SimpleUploadedFile(\n        content=data.read(),\n        name=data.name,\n        content_type='multipart/form-data'\n    )\n\n    request = self.factory.post(\n        reverse('upload-species'), {\n            'file': data,\n            'token': self.token,\n            'property': self.property.id\n        }\n    )\n    request.user = self.user\n    view = SpeciesUploader.as_view()\n    response = view(request)\n    self.assertEqual(response.status_code, 204)\n    self.assertEqual(UploadSpeciesCSV.objects.filter(token=self.token).count(),\n                     1)\n    file_name = 'species'\n    upload_session = UploadSpeciesCSV.objects.get(token=self.token)\n    self.assertTrue(file_name in upload_session.process_file.path)\n    self.assertEqual(upload_session.error_file.name, '')\n\n    with mock.patch('species.api_views.upload_species.upload_species_data.delay') as mock_task:\n        request = self.factory.post(\n            reverse('save-csv-species'),\n            data={\n                'token': self.token,\n                'property': self.property.id\n            }, format='json')\n\n        request.user = self.user\n        view = SaveCsvSpecies.as_view()\n        response = view(request)\n        self.assertEqual(response.status_code, 200)\n        self.assertTrue(mock_task.called)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_api_views.TestUploadSpeciesApiView.test_upload_session_incorrect","title":"test_upload_session_incorrect","text":"<pre><code>test_upload_session_incorrect()\n</code></pre> <p>Test upload species with incorrect header</p> Source code in <code>django_project/species/test_api_views.py</code> <pre><code>def test_upload_session_incorrect(self):\n    \"\"\"Test upload species with incorrect header\"\"\"\n\n    csv_path = absolute_path(\n        'frontend', 'tests',\n        'csv', 'incorrect.csv')\n    data = open(csv_path, 'rb')\n    data = SimpleUploadedFile(\n        content=data.read(),\n        name=data.name,\n        content_type='multipart/form-data'\n    )\n\n    request = self.factory.post(\n        reverse('upload-species'), {\n            'file': data,\n            'token': self.token,\n            'property': self.property.id\n        }\n    )\n    request.user = self.user\n    view = SpeciesUploader.as_view()\n    response = view(request)\n    self.assertEqual(response.status_code, 400)\n    self.assertEqual(UploadSpeciesCSV.objects.filter(token=self.token).count(),\n                     1)\n    upload_session = UploadSpeciesCSV.objects.get(token=self.token)\n    self.assertTrue(upload_session.canceled)\n    self.assertEqual(upload_session.process_file.name, '')\n    self.assertEqual(upload_session.error_notes,\n                     \"The 'Property_code' field is missing. \"\n                     \"Please check that all the compulsory fields \"\n                     \"are in the CSV file headers.\"\n                     )\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_api_views.TestUploadSpeciesApiView.test_upload_session_no_sheet","title":"test_upload_session_no_sheet","text":"<pre><code>test_upload_session_no_sheet()\n</code></pre> <p>Test upload species with no sheet in excel file.</p> Source code in <code>django_project/species/test_api_views.py</code> <pre><code>def test_upload_session_no_sheet(self):\n    \"\"\"Test upload species with no sheet in excel file.\"\"\"\n\n    csv_path = absolute_path(\n        'frontend', 'tests',\n        'csv', 'excel_no_sheet.xlsx')\n    data = open(csv_path, 'rb')\n    data = SimpleUploadedFile(\n        content=data.read(),\n        name=data.name,\n        content_type='multipart/form-data'\n    )\n\n    request = self.factory.post(\n        reverse('upload-species'), {\n            'file': data,\n            'token': self.token,\n            'property': self.property.id\n        }\n    )\n    request.user = self.user\n    view = SpeciesUploader.as_view()\n    response = view(request)\n    self.assertEqual(response.status_code, 400)\n    self.assertEqual(UploadSpeciesCSV.objects.filter(token=self.token).count(),\n                     1)\n    upload_session = UploadSpeciesCSV.objects.get(token=self.token)\n    self.assertTrue(upload_session.canceled)\n    self.assertEqual(upload_session.process_file.name, '')\n    self.assertEqual(upload_session.error_notes,\n                     \"The sheet named Dataset pilot is not in the Excel \"\n                     \"file. Please download the template to get \"\n                     \"the correct file.\"\n                     )\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_api_views.TestUploadSpeciesApiView.test_upload_species_status","title":"test_upload_species_status","text":"<pre><code>test_upload_species_status()\n</code></pre> <p>Test upload species status.</p> Source code in <code>django_project/species/test_api_views.py</code> <pre><code>def test_upload_species_status(self):\n    \"\"\"Test upload species status.\"\"\"\n    csv_path = absolute_path(\n        'frontend', 'tests',\n        'csv', 'test.csv')\n    data = open(csv_path, 'rb')\n    data = SimpleUploadedFile(\n        content=data.read(),\n        name=data.name,\n        content_type='multipart/form-data'\n    )\n\n    request = self.factory.post(\n        reverse('upload-species'), {\n            'file': data,\n            'token': self.token,\n            'property': self.property.id\n        }\n    )\n    request.user = self.user\n    view = SpeciesUploader.as_view()\n    response = view(request)\n    self.assertEqual(response.status_code, 204)\n    upload_session = UploadSpeciesCSV.objects.get(token=self.token)\n\n    upload_session.progress = 'Processing'\n    upload_session.save()\n    file_upload = SpeciesCSVUpload()\n    file_upload.upload_session = upload_session\n    file_upload.start('utf-8-sig')\n\n    kwargs = {\n        'token': self.token\n    }\n    request = self.factory.get(\n        reverse('upload-species-status', kwargs=kwargs)\n    )\n    request.user = self.user\n    view = UploadSpeciesStatus.as_view()\n    response = view(request, **kwargs)\n    self.assertEqual(response.status_code, 200)\n    self.assertEqual(response.data['status'], 'Finished')\n    self.assertFalse(response.data['error_file'])\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_api_views.TestUploadSpeciesApiView.test_upload_species_status_404","title":"test_upload_species_status_404","text":"<pre><code>test_upload_species_status_404()\n</code></pre> <p>Test upload species status with 404 error.</p> Source code in <code>django_project/species/test_api_views.py</code> <pre><code>def test_upload_species_status_404(self):\n    \"\"\"Test upload species status with 404 error.\"\"\"\n    kwargs = {\n        'token': '8f1c1181-982a-4286-b2fe-da1abe8f7172'\n    }\n    request = self.factory.get(\n        reverse('upload-species-status', kwargs=kwargs)\n    )\n    request.user = self.user\n    view = UploadSpeciesStatus.as_view()\n    response = view(request, **kwargs)\n    self.assertEqual(response.status_code, 404)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_api_views.TestUploadSpeciesApiView.test_upload_species_status_empty_file","title":"test_upload_species_status_empty_file","text":"<pre><code>test_upload_species_status_empty_file()\n</code></pre> <p>Test upload with empty file.</p> Source code in <code>django_project/species/test_api_views.py</code> <pre><code>def test_upload_species_status_empty_file(self):\n    \"\"\"Test upload with empty file.\"\"\"\n    csv_path = absolute_path(\n        'frontend', 'tests',\n        'csv', 'test_empty.csv')\n    data = open(csv_path, 'rb')\n    data = SimpleUploadedFile(\n        content=data.read(),\n        name=data.name,\n        content_type='multipart/form-data'\n    )\n\n    request = self.factory.post(\n        reverse('upload-species'), {\n            'file': data,\n            'token': self.token,\n            'property': self.property.id\n        }\n    )\n    request.user = self.user\n    view = SpeciesUploader.as_view()\n    response = view(request)\n    self.assertEqual(response.status_code, 204)\n    upload_session = UploadSpeciesCSV.objects.get(token=self.token)\n\n    upload_session.progress = 'Processing'\n    upload_session.save()\n    file_upload = SpeciesCSVUpload()\n    file_upload.upload_session = upload_session\n    file_upload.start('utf-8-sig')\n\n    kwargs = {\n        'token': self.token\n    }\n    request = self.factory.get(\n        reverse('upload-species-status', kwargs=kwargs)\n    )\n    request.user = self.user\n    view = UploadSpeciesStatus.as_view()\n    response = view(request, **kwargs)\n    self.assertEqual(response.status_code, 200)\n    self.assertEqual(response.data['status'], 'Error')\n    self.assertFalse(response.data['error_file'])\n    self.assertEqual(\n        response.data['message'],\n        'You have uploaded empty spreadsheet, please check again.'\n    )\n    upload_session.refresh_from_db()\n    self.assertEqual(\n        upload_session.error_notes,\n        'You have uploaded empty spreadsheet, please check again.'\n    )\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_api_views.TestUploadSpeciesApiView.test_upload_species_with_excel_property_not_exist","title":"test_upload_species_with_excel_property_not_exist","text":"<pre><code>test_upload_species_with_excel_property_not_exist()\n</code></pre> <p>Test upload Excel file with a property not existing.</p> Source code in <code>django_project/species/test_api_views.py</code> <pre><code>def test_upload_species_with_excel_property_not_exist(self):\n    \"\"\"Test upload Excel file with a property not existing.\"\"\"\n\n    csv_path = absolute_path(\n        'frontend', 'tests',\n        'csv', 'excel_error_property.xlsx')\n    data = open(csv_path, 'rb')\n    data = SimpleUploadedFile(\n        content=data.read(),\n        name=data.name,\n        content_type='multipart/form-data'\n    )\n\n    request = self.factory.post(\n        reverse('upload-species'), {\n            'file': data,\n            'token': self.token,\n            'property': self.property.id\n        }\n    )\n    request.user = self.user\n    view = SpeciesUploader.as_view()\n    response = view(request)\n    self.assertEqual(response.status_code, 204)\n    upload_session = UploadSpeciesCSV.objects.get(token=self.token)\n    upload_session.progress = 'Processing'\n    upload_session.save()\n    file_upload = SpeciesCSVUpload()\n    file_upload.upload_session = upload_session\n    file_upload.start('utf-8-sig')\n    self.assertTrue('error' in upload_session.error_file.path)\n\n    xl = pd.ExcelFile(upload_session.error_file.path)\n    dataset = xl.parse(SHEET_TITLE)\n    self.assertEqual(\n        dataset.iloc[0]['error_message'],\n        \"Property code Venetia Limpopo doesn't match the selected \"\n        \"property. Please replace it with {}. Loxodonta africana \"\n        \"doesn't exist in the database. Please select species \"\n        \"available in the dropdown only.\".format(\n            upload_session.property.short_code\n        )\n    )\n    # create two properties with code Venetia Limpopo\n    # should return same error\n    property1 = PropertyFactory(\n        name=\"Venetia Limpopo\"\n    )\n    property2 = PropertyFactory(\n        name=\"Venetia Limpopo 2\"\n    )\n    Property.objects.filter(id__in=[property1.id, property2.id]).update(\n        short_code='Venetia Limpopo'\n    )\n    upload_session = UploadSpeciesCSV.objects.get(token=self.token)\n    upload_session.progress = 'Processing'\n    upload_session.save()\n    file_upload = SpeciesCSVUpload()\n    file_upload.upload_session = upload_session\n    file_upload.start('utf-8-sig')\n    self.assertTrue('error' in upload_session.error_file.path)\n\n    xl = pd.ExcelFile(upload_session.error_file.path)\n    dataset = xl.parse(SHEET_TITLE)\n    self.assertEqual(\n        dataset.iloc[0]['error_message'],\n        \"Property code Venetia Limpopo doesn't match the selected \"\n        \"property. Please replace it with {}. Loxodonta africana \"\n        \"doesn't exist in the database. Please select species \"\n        \"available in the dropdown only.\".format(\n            upload_session.property.short_code\n        )\n    )\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_api_views.TestUploadSpeciesApiView.test_upload_species_with_property_taxon_not_exist","title":"test_upload_species_with_property_taxon_not_exist","text":"<pre><code>test_upload_species_with_property_taxon_not_exist()\n</code></pre> <p>Test upload species task with a property and taxon not existing.</p> Source code in <code>django_project/species/test_api_views.py</code> <pre><code>def test_upload_species_with_property_taxon_not_exist(self):\n    \"\"\"Test upload species task with a property and taxon not existing.\"\"\"\n\n    csv_path = absolute_path(\n        'frontend', 'tests',\n        'csv', 'test_property_taxon.csv')\n    data = open(csv_path, 'rb')\n    data = SimpleUploadedFile(\n        content=data.read(),\n        name=data.name,\n        content_type='multipart/form-data'\n    )\n\n    request = self.factory.post(\n        reverse('upload-species'), {\n            'file': data,\n            'token': self.token,\n            'property': self.property.id\n        }\n    )\n    request.user = self.user\n    view = SpeciesUploader.as_view()\n    response = view(request)\n    self.assertEqual(response.status_code, 204)\n    upload_session = UploadSpeciesCSV.objects.get(token=self.token)\n    upload_session.progress = 'Processing'\n    upload_session.save()\n    file_upload = SpeciesCSVUpload()\n    file_upload.upload_session = upload_session\n    file_upload.start('utf-8-sig')\n\n    kwargs = {\n        'token': self.token\n    }\n    request = self.factory.get(\n        reverse('upload-species-status', kwargs=kwargs)\n    )\n    request.user = self.user\n    view = UploadSpeciesStatus.as_view()\n    response = view(request, **kwargs)\n    self.assertEqual(response.status_code, 200)\n    self.assertTrue('media' in response.data['error_file'])\n\n    self.assertTrue('error' in upload_session.error_file.path)\n    with open(upload_session.error_file.path, encoding='utf-8-sig') as csv_file:\n        error_file = csv.DictReader(csv_file)\n        headers = error_file.fieldnames\n        self.assertTrue('error_message' in headers)\n        errors = []\n        for row in error_file:\n            errors.append(row['error_message'])\n        self.assertTrue(\"Property code Luna's Reserve doesn't match \"\n                        \"the selected property. Please replace \"\n                        \"it with Luna.\" in errors)\n        self.assertTrue(\"Lemurs doesn't exist in the database. \"\n                        \"Please select species available in the \"\n                        \"dropdown only.\" in errors)\n        self.assertTrue(\"The value of field \"\n                        \"If_other_(population_estimate_category)_please \"\n                        \"explain is empty.\" in errors)\n        self.assertTrue(\"The value of field \"\n                        \"If_other_(survey_method)_please \"\n                        \"explain is empty.\" in errors)\n        self.assertTrue(\"The value of the compulsory field \"\n                        \"Population_estimate_category is empty.\" in errors)\n        self.assertTrue(\"The value of the compulsory field \"\n                        \"presence/absence is empty. The value \"\n                        \"of the compulsory field \"\n                        \"Population_estimate_category is empty.\" in errors)\n        self.assertTrue(\"The total of Count_adult_males and \"\n                        \"Count_adult_females must not exceed \"\n                        \"COUNT_TOTAL.\" in errors)\n\n        # TODO: Check why this test is failing\n        # self.assertTrue(\"The total of \"\n        #                 \"Planned hunt/culling_Offtake_adult_males and \"\n        #                 \"Planned hunt/culling_Offtake_adult_females must \"\n        #                 \"not exceed Planned hunt/culling_TOTAL.\" in errors)\n    self.assertEqual(AnnualPopulation.objects.count(), 7)\n    self.assertEqual(upload_session.success_notes, \"7 rows uploaded successfully.\")\n    self.assertTrue(AnnualPopulation.objects.filter(\n        survey_method_other=\"Test survey\"\n    ).count(), 1)\n    self.assertTrue(AnnualPopulation.objects.filter(\n        survey_method__name=\"Other - please explain\",\n        survey_method_other=\"Test survey\"\n    ).count(), 1)\n    self.assertTrue(AnnualPopulation.objects.filter(\n        population_estimate_category__name=\"Other (please describe how the \"\n                                           \"population size estimate was \"\n                                           \"determined)\",\n        population_estimate_category_other=\"Decennial census\"\n    ).count(), 1)\n    self.assertTrue(AnnualPopulation.objects.filter(\n        population_estimate_category__name=\"Ad hoc or \"\n                                           \"opportunistic monitoring\"\n    ).count(), 1)\n    self.assertTrue(AnnualPopulationPerActivity.objects.filter(\n        intake_permit=\"12345\"\n    ).count(), 1)\n    self.assertTrue(AnnualPopulationPerActivity.objects.filter(\n        reintroduction_source=\"KNP\"\n    ).count(), 1)\n    self.assertTrue(AnnualPopulationPerActivity.objects.filter(\n        founder_population=True\n    ).count(), 1)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_api_views.TestUploadSpeciesApiView.test_upload_species_without_login","title":"test_upload_species_without_login","text":"<pre><code>test_upload_species_without_login()\n</code></pre> <p>Test upload species api</p> Source code in <code>django_project/species/test_api_views.py</code> <pre><code>def test_upload_species_without_login(self):\n    \"\"\"Test upload species api\"\"\"\n\n    response = self.client.get(self.api_url)\n    self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_api_views.TestUploadSpeciesApiView.test_upload_task_with_upload_session_not_existing","title":"test_upload_task_with_upload_session_not_existing","text":"<pre><code>test_upload_task_with_upload_session_not_existing(mock_app)\n</code></pre> <p>Test upload task with upload session not existing.</p> Source code in <code>django_project/species/test_api_views.py</code> <pre><code>@mock.patch(\"species.tasks.upload_species.upload_species_data\")\ndef test_upload_task_with_upload_session_not_existing(self, mock_app):\n    \"\"\"Test upload task with upload session not existing.\"\"\"\n\n    self.assertEqual(upload_species_data(1), None)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_api_views.TestUploadSpeciesApiView.test_uploader_view_with_empty_compulsory_fields","title":"test_uploader_view_with_empty_compulsory_fields","text":"<pre><code>test_uploader_view_with_empty_compulsory_fields()\n</code></pre> <p>Test uploader file view with an empty value in compulsory field.</p> Source code in <code>django_project/species/test_api_views.py</code> <pre><code>def test_uploader_view_with_empty_compulsory_fields(self):\n    \"\"\"Test uploader file view with an empty value in\n    compulsory field.\"\"\"\n\n    csv_path = absolute_path(\n        'frontend', 'tests',\n        'csv', 'test_empty_value_of_compulsory_fields.csv')\n    data = open(csv_path, 'rb')\n    data = SimpleUploadedFile(\n        content=data.read(),\n        name=data.name,\n        content_type='multipart/form-data'\n    )\n\n    request = self.factory.post(\n        reverse('upload-species'), {\n            'file': data,\n            'token': self.token,\n            'property': self.property.id\n        }\n    )\n    request.user = self.user\n    view = SpeciesUploader.as_view()\n    response = view(request)\n    self.assertEqual(response.status_code, 204)\n    upload_session = UploadSpeciesCSV.objects.get(token=self.token)\n    upload_session.progress = 'Processing'\n    upload_session.save()\n    file_upload = SpeciesCSVUpload()\n    file_upload.upload_session = upload_session\n    file_upload.start('utf-8-sig')\n    self.assertTrue('error' in upload_session.error_file.path)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_api_views.TestUploadSpeciesApiView.test_uploader_view_without_file","title":"test_uploader_view_without_file","text":"<pre><code>test_uploader_view_without_file()\n</code></pre> <p>Test uploader file view with no file</p> Source code in <code>django_project/species/test_api_views.py</code> <pre><code>def test_uploader_view_without_file(self):\n    \"\"\"Test uploader file view with no file\"\"\"\n\n    request = self.factory.post(\n        reverse('upload-species'), {\n            'token': self.token,\n            'property': self.property.id\n        }\n    )\n    request.user = self.user\n    view = SpeciesUploader.as_view()\n    response = view(request)\n    self.assertEqual(response.status_code, 400)\n    self.assertEqual(response.data['detail'], 'File not found')\n</code></pre>"},{"location":"developer/manual/species/#tasks","title":"Tasks","text":""},{"location":"developer/manual/species/#django_project.species.tasks.upload_species.upload_species_data","title":"upload_species_data","text":"<pre><code>upload_species_data(upload_session_id)\n</code></pre> <p>Task for upload species file in the backend.</p> <p>Parameters:</p> Name Type Description Default <code>upload_session_id</code> <code>int</code> <p>Id of upload session model</p> required Source code in <code>django_project/species/tasks/upload_species.py</code> <pre><code>@shared_task(name='upload_species_data')\ndef upload_species_data(upload_session_id):\n    \"\"\"Task for upload species file in the backend.\n\n    :param\n    upload_session_id: Id of upload session model\n    :type\n    upload_session_id: int\n    \"\"\"\n\n    try:\n        upload_session = UploadSpeciesCSV.objects.get(id=upload_session_id)\n    except UploadSpeciesCSV.DoesNotExist:\n        logger.error(\"upload session doesn't exist\")\n        return\n\n    encoding = 'utf-8-sig'\n    upload_session.progress = 'Processing'\n    upload_session.processed = False\n    upload_session.success_notes = None\n    upload_session.error_notes = None\n    upload_session.canceled = False\n    if upload_session.success_file:\n        try_delete_uploaded_file(upload_session.success_file)\n        upload_session.success_file = None\n    if upload_session.error_file:\n        try_delete_uploaded_file(upload_session.error_file)\n        upload_session.error_file = None\n    upload_session.save()\n    file_upload = SpeciesCSVUpload()\n    file_upload.upload_session = upload_session\n    file_upload.start(encoding)\n</code></pre>"},{"location":"developer/manual/species/#views","title":"Views","text":""},{"location":"developer/manual/species/#django_project.species.views.TaxonFrontPageListAPIView","title":"TaxonFrontPageListAPIView","text":"<p>               Bases: <code>APIView</code></p> <p>Fetch taxon list to display on FrontPage.</p>"},{"location":"developer/manual/species/#django_project.species.views.TaxonListAPIView","title":"TaxonListAPIView","text":"<p>               Bases: <code>APIView</code></p> <p>Get taxon within the organisations</p>"},{"location":"developer/manual/species/#django_project.species.views.TaxonTrendPageAPIView","title":"TaxonTrendPageAPIView","text":"<p>               Bases: <code>APIView</code></p> <p>Fetch taxon detail to display on TrendPage.</p>"},{"location":"developer/manual/stakeholder/","title":"IDS SAWPS","text":""},{"location":"developer/manual/stakeholder/#admin","title":"Admin","text":""},{"location":"developer/manual/stakeholder/#django_project.stakeholder.admin.LoginStatusAdmin","title":"LoginStatusAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Admin page for LoginStatus model</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.admin.OrganisationAdmin","title":"OrganisationAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Admin page for Organisation model</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.admin.OrganisationInvitesAdmin","title":"OrganisationInvitesAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Admin page for OrganisationInvites model</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.admin.OrganisationRepresentativeAdmin","title":"OrganisationRepresentativeAdmin","text":"<p>               Bases: <code>OrganisationPersonnelBaseAdmin</code></p> <p>Admin page for OrganisationRepresentative model</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.admin.OrganisationUserAdmin","title":"OrganisationUserAdmin","text":"<p>               Bases: <code>OrganisationPersonnelBaseAdmin</code></p> <p>Admin page for OrganisationUser model</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.admin.RemindersAdmin","title":"RemindersAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Admin page for Reminders model</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.admin.UserRoleTypeAdmin","title":"UserRoleTypeAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Admin page for UserRoleType model</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.admin.UserTitleAdmin","title":"UserTitleAdmin","text":"<p>               Bases: <code>ModelAdmin</code></p> <p>Admin page for UserTitle model</p>"},{"location":"developer/manual/stakeholder/#factories","title":"Factories","text":""},{"location":"developer/manual/stakeholder/#django_project.stakeholder.factories.OrganisationInvitesFactory","title":"OrganisationInvitesFactory","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory class for Organisation Invites model.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.factories.loginStatusFactory","title":"loginStatusFactory","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory class for login status models.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.factories.organisationFactory","title":"organisationFactory","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory class for organisation model.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.factories.organisationRepresentativeFactory","title":"organisationRepresentativeFactory","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory class for organisation representative model.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.factories.organisationUserFactory","title":"organisationUserFactory","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory class for organisation user model.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.factories.userFactory","title":"userFactory","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory class for user models.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.factories.userLoginFactory","title":"userLoginFactory","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>User login facfory class.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.factories.userProfileFactory","title":"userProfileFactory","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory class for user profile model.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.factories.userRoleTypeFactory","title":"userRoleTypeFactory","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory class for user role type models.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.factories.userTitleFactory","title":"userTitleFactory","text":"<p>               Bases: <code>DjangoModelFactory</code></p> <p>Factory class for user title models.</p>"},{"location":"developer/manual/stakeholder/#models","title":"Models","text":""},{"location":"developer/manual/stakeholder/#django_project.stakeholder.models.LoginStatus","title":"LoginStatus","text":"<p>               Bases: <code>Model</code></p> <p>User login status model.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.models.Organisation","title":"Organisation","text":"<p>               Bases: <code>Model</code></p> <p>Organisation model.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.models.OrganisationInvites","title":"OrganisationInvites","text":"<p>               Bases: <code>Model</code></p> <p>OrganisationInvites model to store all invites</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.models.OrganisationPersonnel","title":"OrganisationPersonnel","text":"<p>               Bases: <code>Model</code></p> <p>Organisation personnel abstract model.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.models.OrganisationRepresentative","title":"OrganisationRepresentative","text":"<p>               Bases: <code>OrganisationPersonnel</code></p> <p>Organisation representative model.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.models.OrganisationUser","title":"OrganisationUser","text":"<p>               Bases: <code>OrganisationPersonnel</code></p> <p>Organisation user model.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.models.Reminders","title":"Reminders","text":"<p>               Bases: <code>Model</code></p> <p>Reminders model to store all reminders</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.models.UserLogin","title":"UserLogin","text":"<p>               Bases: <code>Model</code></p> <p>User login model.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.models.UserProfile","title":"UserProfile","text":"<p>               Bases: <code>Model</code></p> <p>Extend User model with one-to-one mapping.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.models.UserRoleType","title":"UserRoleType","text":"<p>               Bases: <code>Model</code></p> <p>User role type (Base users, admins ..etc.) model.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.models.UserTitle","title":"UserTitle","text":"<p>               Bases: <code>Model</code></p> <p>User title model.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.models.create_user_profile","title":"create_user_profile","text":"<pre><code>create_user_profile(sender, instance, created, **kwargs)\n</code></pre> <p>When a user is created, also create a UserProfile</p> Source code in <code>django_project/stakeholder/models.py</code> <pre><code>@receiver(post_save, sender=User)\ndef create_user_profile(sender, instance, created, **kwargs):\n    \"\"\"\n    When a user is created, also create a UserProfile\n    \"\"\"\n    if (\n        created and\n        not UserProfile.objects.filter(user=instance).exists()\n    ):\n        UserProfile.objects.create(user=instance)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.models.post_create_organisation_representative","title":"post_create_organisation_representative","text":"<pre><code>post_create_organisation_representative(\n    sender, instance, created, **kwargs\n)\n</code></pre> <p>Handle OrganisationRepresentative creation by automatically add them to Organisation Manager group.</p> Source code in <code>django_project/stakeholder/models.py</code> <pre><code>@receiver(post_save, sender=OrganisationRepresentative)\ndef post_create_organisation_representative(\n    sender,\n    instance: OrganisationRepresentative,\n    created,\n    **kwargs\n):\n    \"\"\"\n    Handle OrganisationRepresentative creation by\n    automatically add them to Organisation Manager group.\n    \"\"\"\n    add_user_to_org_manager(instance, Group)\n    # check if user becomes manager from member\n    is_made_manager = False\n    if created:\n        organisation_user = OrganisationUser.objects.filter(\n            user=instance.user,\n            organisation=instance.organisation\n        ).first()\n        member_invite = OrganisationInvites.objects.filter(\n            user=instance.user,\n            joined=True\n        ).first()\n        if organisation_user is None:\n            # case when representative is created in admin site\n            # create organisation user\n            OrganisationUser.objects.create(\n                user=instance.user,\n                organisation=instance.organisation\n            )\n            is_made_manager = True\n        elif member_invite:\n            # check if previously has been invited as member\n            is_made_manager = member_invite.assigned_as == MEMBER\n        else:\n            # this case could be the member is added through admin site\n            is_made_manager = True\n    if is_made_manager:\n        notify_user_becomes_manager(instance)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.models.post_create_organisation_user","title":"post_create_organisation_user","text":"<pre><code>post_create_organisation_user(\n    sender, instance, created, **kwargs\n)\n</code></pre> <p>Handle OrganisationUser creation by automatically add them to Organisation Member group.</p> Source code in <code>django_project/stakeholder/models.py</code> <pre><code>@receiver(post_save, sender=OrganisationUser)\ndef post_create_organisation_user(\n    sender,\n    instance: OrganisationUser,\n    created,\n    **kwargs\n):\n    \"\"\"\n    Handle OrganisationUser creation by\n    automatically add them to Organisation Member group.\n    \"\"\"\n    add_user_to_org_member(instance, OrganisationInvites, Group)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.models.post_delete_organisation_representative","title":"post_delete_organisation_representative","text":"<pre><code>post_delete_organisation_representative(\n    sender, instance, *args, **kwargs\n)\n</code></pre> <p>Handle OrganisationRepresentative deletion by removing them from Data contributor and Organisation Manager group, if they are no longer part of any organisation.</p> Source code in <code>django_project/stakeholder/models.py</code> <pre><code>@receiver(post_delete, sender=OrganisationRepresentative)\ndef post_delete_organisation_representative(\n    sender,\n    instance: OrganisationRepresentative,\n    *args,\n    **kwargs\n):\n    \"\"\"\n    Handle OrganisationRepresentative deletion by removing them\n    from Data contributor and Organisation Manager group, if they are no longer\n    part of any organisation.\n    \"\"\"\n    remove_user_from_org_manager(instance)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.models.post_delete_organisation_user","title":"post_delete_organisation_user","text":"<pre><code>post_delete_organisation_user(\n    sender, instance, *args, **kwargs\n)\n</code></pre> <p>Handle OrganisationUser deletion by removing them from Data contributor and Organisation Member group, if they are no longer part of any organisation.</p> Source code in <code>django_project/stakeholder/models.py</code> <pre><code>@receiver(post_delete, sender=OrganisationUser)\ndef post_delete_organisation_user(\n    sender,\n    instance: OrganisationUser,\n    *args,\n    **kwargs\n):\n    \"\"\"\n    Handle OrganisationUser deletion by removing them\n    from Data contributor and Organisation Member group, if they are no longer\n    part of any organisation.\n    \"\"\"\n    remove_user_from_org_member(instance)\n    # when user is removed from organisation\n    # also remove it from current_organisation in UserProfile\n    profile = UserProfile.objects.filter(\n        user=instance.user,\n        current_organisation=instance.organisation\n    ).first()\n    if profile:\n        profile.current_organisation = None\n        profile.save(update_fields=['current_organisation'])\n    # when user is removed, ensure that manager is removed as well\n    OrganisationRepresentative.objects.filter(\n        user=instance.user,\n        organisation=instance.organisation\n    ).delete()\n    # ensure invite record is removed\n    OrganisationInvites.objects.filter(\n        Q(email=instance.user.email) | Q(user=instance.user),\n        organisation=instance.organisation\n    ).delete()\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.models.save_user_profile","title":"save_user_profile","text":"<pre><code>save_user_profile(sender, instance, **kwargs)\n</code></pre> <p>Save the UserProfile whenever a save event occurs</p> Source code in <code>django_project/stakeholder/models.py</code> <pre><code>@receiver(post_save, sender=User)\ndef save_user_profile(sender, instance, **kwargs):\n    \"\"\"\n    Save the UserProfile whenever a save event occurs\n    \"\"\"\n    if UserProfile.objects.filter(\n        user=instance\n    ).exists():\n        instance.user_profile.save()\n    else:\n        UserProfile.objects.create(user=instance)\n</code></pre>"},{"location":"developer/manual/stakeholder/#test-case","title":"Test Case","text":""},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.LoginStatusTestCase","title":"LoginStatusTestCase","text":"<p>               Bases: <code>TestCase</code></p> <p>User login status test case.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.LoginStatusTestCase.test_create_login_status","title":"test_create_login_status","text":"<pre><code>test_create_login_status()\n</code></pre> <p>Test creating login status.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>def test_create_login_status(self):\n    \"\"\"Test creating login status.\"\"\"\n    self.assertEqual(LoginStatus.objects.count(), 1)\n    self.assertTrue(\n        isinstance(self.loginStatus, LoginStatus)\n    )\n    self.assertTrue(self.loginStatus.name in ['logged in', 'logged out'])\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.LoginStatusTestCase.test_delete_login_status","title":"test_delete_login_status","text":"<pre><code>test_delete_login_status()\n</code></pre> <p>Test deleting a login status.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>def test_delete_login_status(self):\n    \"\"\"Test deleting a login status.\"\"\"\n    self.loginStatus.delete()\n    self.assertEqual(LoginStatus.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.LoginStatusTestCase.test_update_login_status","title":"test_update_login_status","text":"<pre><code>test_update_login_status()\n</code></pre> <p>Test updating a login status.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>def test_update_login_status(self):\n    \"\"\"Test updating a login status.\"\"\"\n    self.loginStatus.name = 'logged in'\n    loginStatus = LoginStatus.objects.get(\n        id=self.loginStatus.id\n    )\n    self.assertTrue(loginStatus.name, 'logged in')\n    self.loginStatus.name = 'logged out'\n    loginStatus = LoginStatus.objects.get(\n        id=self.loginStatus.id\n    )\n    self.assertTrue(loginStatus.name, 'logged out')\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.OrganisationInvitesModelTest","title":"OrganisationInvitesModelTest","text":"<p>               Bases: <code>TestCase</code></p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.OrganisationInvitesModelTest.test_create_organisation_invite","title":"test_create_organisation_invite","text":"<pre><code>test_create_organisation_invite()\n</code></pre> <p>Test create organisation invite.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>def test_create_organisation_invite(self):\n    \"\"\"Test create organisation invite.\"\"\"\n    invite = OrganisationInvites.objects.create(\n        organisation=self.organisation, email='test@kartoza.com')\n    self.assertEqual(invite.organisation, self.organisation)\n    self.assertEqual(invite.email, 'test@kartoza.com')\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.OrganisationInvitesModelTest.test_delete_organisation_invite","title":"test_delete_organisation_invite","text":"<pre><code>test_delete_organisation_invite()\n</code></pre> <p>Test delete organisation invite.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>def test_delete_organisation_invite(self):\n    \"\"\"Test delete organisation invite.\"\"\"\n    invite = OrganisationInvites.objects.create(\n        organisation=self.organisation, email='test@kartoza.com')\n    invite.delete()\n    self.assertFalse(\n        OrganisationInvites.objects.filter(pk=invite.pk).exists())\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.OrganisationInvitesModelTest.test_read_organisation_invite","title":"test_read_organisation_invite","text":"<pre><code>test_read_organisation_invite()\n</code></pre> <p>Test read organisation invite.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>def test_read_organisation_invite(self):\n    \"\"\"Test read organisation invite.\"\"\"\n    invite = OrganisationInvites.objects.create(\n        organisation=self.organisation, email='test@kartoza.com')\n    saved_invite = OrganisationInvites.objects.get(pk=invite.pk)\n    self.assertEqual(saved_invite.organisation, self.organisation)\n    self.assertEqual(saved_invite.email, 'test@kartoza.com')\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.OrganisationInvitesModelTest.test_update_organisation_invite","title":"test_update_organisation_invite","text":"<pre><code>test_update_organisation_invite()\n</code></pre> <p>Test update organisation invite.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>def test_update_organisation_invite(self):\n    \"\"\"Test update organisation invite.\"\"\"\n    invite = OrganisationInvites.objects.create(\n        organisation=self.organisation, email='test@kartoza.com')\n    invite.organisation = self.organisation\n    invite.save()\n    updated_invite = OrganisationInvites.objects.get(pk=invite.pk)\n    self.assertEqual(updated_invite.organisation, self.organisation)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.OrganizationRepresentativeTestCase","title":"OrganizationRepresentativeTestCase","text":"<p>               Bases: <code>TestCase</code></p> <p>Test case for organization representative.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.OrganizationRepresentativeTestCase.setUpTestData","title":"setUpTestData  <code>classmethod</code>","text":"<pre><code>setUpTestData()\n</code></pre> <p>Setup test data for organisation representative model.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>@classmethod\ndef setUpTestData(cls):\n    \"\"\"Setup test data for organisation representative model.\"\"\"\n    cls.organizationRep = organisationRepresentativeFactory()\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.OrganizationRepresentativeTestCase.test_create_organisation_user","title":"test_create_organisation_user","text":"<pre><code>test_create_organisation_user()\n</code></pre> <p>Test creating organisation representative.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>def test_create_organisation_user(self):\n    \"\"\"Test creating organisation representative.\"\"\"\n    self.assertEqual(OrganisationRepresentative.objects.count(), 1)\n    self.assertTrue(\n        isinstance(\n            self.organizationRep,\n            OrganisationRepresentative\n        )\n    )\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.OrganizationRepresentativeTestCase.test_delete_organisation_user","title":"test_delete_organisation_user","text":"<pre><code>test_delete_organisation_user()\n</code></pre> <p>Test deleting organisation representative.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>def test_delete_organisation_user(self):\n    \"\"\"Test deleting organisation representative.\"\"\"\n    self.organizationRep.delete()\n    self.assertEqual(OrganisationRepresentative.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.OrganizationRepresentativeTestCase.test_update_organisation_user","title":"test_update_organisation_user","text":"<pre><code>test_update_organisation_user()\n</code></pre> <p>Test updating organisation representative.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>def test_update_organisation_user(self):\n    \"\"\" Test updating organisation representative.\"\"\"\n    self.organizationRep.user.username = 'test'\n    self.organizationRep.user.save()\n    self.assertEqual(\n        self.organizationRep.user.username,\n        'test'\n    )\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.OrganizationRepresentativeTestCase.test_upgrade_to_manager","title":"test_upgrade_to_manager","text":"<pre><code>test_upgrade_to_manager(mocked_send_mail)\n</code></pre> <p>Test upgrade a member to manager.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>@mock.patch('stakeholder.utils.send_mail')\ndef test_upgrade_to_manager(self, mocked_send_mail):\n    \"\"\"Test upgrade a member to manager.\"\"\"\n    mocked_send_mail.side_effect = mocked_sending_email\n    organisation_1 = organisationFactory()\n    # user without email\n    user_0 = User.objects.create_user(\n        username='testuser0',\n        password='testpassword0'\n    )\n    OrganisationRepresentative.objects.create(\n        user=user_0,\n        organisation=organisation_1\n    )\n    mocked_send_mail.assert_not_called()\n    self.assertTrue(OrganisationUser.objects.filter(\n        user=user_0,\n        organisation=organisation_1\n    ).exists())\n    # from no org_user - possible from admin site\n    mocked_send_mail.reset_mock()\n    user_1 = User.objects.create_user(\n        username='testuser1',\n        password='testpassword1',\n        email='testuser1@test.com'\n    )\n    OrganisationRepresentative.objects.create(\n        user=user_1,\n        organisation=organisation_1\n    )\n    mocked_send_mail.assert_called_once()\n    self.assertEqual(OrganisationUser.objects.filter(\n        user=user_1,\n        organisation=organisation_1\n    ).count(), 1)\n    # from existing org_user with invite = Member\n    mocked_send_mail.reset_mock()\n    user_2 = User.objects.create_user(\n        username='testuser2',\n        password='testpassword2',\n        email='testuser2@test.com'\n    )\n    OrganisationUser.objects.create(\n        user=user_2,\n        organisation=organisation_1\n    )\n    OrganisationInvites.objects.create(\n        user=user_2,\n        joined=True,\n        assigned_as=MEMBER\n    )\n    OrganisationRepresentative.objects.create(\n        user=user_2,\n        organisation=organisation_1\n    )\n    mocked_send_mail.assert_called_once()\n    self.assertEqual(OrganisationUser.objects.filter(\n        user=user_2,\n        organisation=organisation_1\n    ).count(), 1)\n    # from existing org_user with invite = Manager\n    mocked_send_mail.reset_mock()\n    user_3 = User.objects.create_user(\n        username='testuser3',\n        password='testpassword3',\n        email='testuser3@test.com'\n    )\n    OrganisationUser.objects.create(\n        user=user_3,\n        organisation=organisation_1\n    )\n    OrganisationInvites.objects.create(\n        user=user_3,\n        joined=True,\n        assigned_as=MANAGER\n    )\n    OrganisationRepresentative.objects.create(\n        user=user_3,\n        organisation=organisation_1\n    )\n    mocked_send_mail.assert_not_called()\n    self.assertEqual(OrganisationUser.objects.filter(\n        user=user_3,\n        organisation=organisation_1\n    ).count(), 1)\n    # from existing org_user without any invite\n    mocked_send_mail.reset_mock()\n    user_4 = User.objects.create_user(\n        username='testuser4',\n        password='testpassword4',\n        email='testuser4@test.com'\n    )\n    OrganisationUser.objects.create(\n        user=user_4,\n        organisation=organisation_1\n    )\n    OrganisationRepresentative.objects.create(\n        user=user_4,\n        organisation=organisation_1\n    )\n    mocked_send_mail.assert_called_once()\n    self.assertEqual(OrganisationUser.objects.filter(\n        user=user_4,\n        organisation=organisation_1\n    ).count(), 1)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.OrganizationTestCase","title":"OrganizationTestCase","text":"<p>               Bases: <code>TestCase</code></p> <p>Organization test case.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.OrganizationTestCase.test_create_organization","title":"test_create_organization","text":"<pre><code>test_create_organization()\n</code></pre> <p>Test creating organization.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>def test_create_organization(self):\n    \"\"\"Test creating organization.\"\"\"\n    self.assertEqual(Organisation.objects.count(), 1)\n    self.assertTrue(isinstance(self.organization, Organisation))\n    self.assertTrue(self.organization.name, Organisation.objects.get(\n        id=self.organization.id).name)\n    self.assertEqual(\n        self.organization.short_code,\n        'CA0001'\n    )\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.OrganizationTestCase.test_delete_organization","title":"test_delete_organization","text":"<pre><code>test_delete_organization()\n</code></pre> <p>Test deleting organization.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>def test_delete_organization(self):\n    \"\"\"Test deleting organization.\"\"\"\n    self.organization.delete()\n    self.assertEqual(Organisation.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.OrganizationTestCase.test_update_organization","title":"test_update_organization","text":"<pre><code>test_update_organization()\n</code></pre> <p>Test updating organization.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>def test_update_organization(self):\n    \"\"\"Test updating organization.\"\"\"\n    province, created = Province.objects.get_or_create(\n                name=\"Limpopo\"\n    )\n    property_1 = PropertyFactory.create(\n        organisation=self.organization,\n        province=province\n    )\n    property_2 = PropertyFactory.create(\n        organisation=self.organization,\n        province=province\n    )\n    self.organization.name = 'test'\n    self.organization.national = True\n    self.organization.province = province\n    self.organization.save()\n    self.organization.refresh_from_db()\n    property_1.refresh_from_db()\n    property_2.refresh_from_db()\n    self.assertEqual(Organisation.objects.get(\n        id=self.organization.id).name, 'test')\n    self.assertEqual(Organisation.objects.filter(\n        national=True).count(), 1)\n    self.assertEqual(Organisation.objects.filter(\n        province__name=\"Limpopo\").count(), 1)\n\n    self.assertEqual(\n        self.organization.short_code,\n        'LITE0001'\n    )\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.OrganizationUserTestCase","title":"OrganizationUserTestCase","text":"<p>               Bases: <code>TestCase</code></p> <p>Test case for organization user.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.OrganizationUserTestCase.setUpTestData","title":"setUpTestData  <code>classmethod</code>","text":"<pre><code>setUpTestData()\n</code></pre> <p>Setup test data for organisation user model.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>@classmethod\ndef setUpTestData(cls):\n    \"\"\"Setup test data for organisation user model.\"\"\"\n    cls.organizationUser = organisationUserFactory()\n    cls.user = UserFactory()\n    cls.organisation = organisationFactory()\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.OrganizationUserTestCase.test_create_organisation_user_default","title":"test_create_organisation_user_default","text":"<pre><code>test_create_organisation_user_default()\n</code></pre> <p>Test creating organisation user, defaulted to Organisation Member.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>def test_create_organisation_user_default(self):\n    \"\"\"Test creating organisation user, defaulted to Organisation Member.\"\"\"\n    self.assertEqual(OrganisationUser.objects.count(), 1)\n    self.assertTrue(isinstance(self.organizationUser, OrganisationUser))\n    self.assertEqual(\n        self.organizationUser.user.groups.first().name,\n        ORGANISATION_MEMBER\n    )\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.OrganizationUserTestCase.test_create_organisation_user_manager","title":"test_create_organisation_user_manager","text":"<pre><code>test_create_organisation_user_manager()\n</code></pre> <p>Test creating organisation user as manager.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>def test_create_organisation_user_manager(self):\n    \"\"\"Test creating organisation user as manager.\"\"\"\n    OrganisationRepresentative.objects.create(\n        user=self.user,\n        organisation=self.organisation\n    )\n    groups = Group.objects.filter(\n        user=self.user\n    )\n    all_groups = [group.name for group in groups]\n    self.assertIn(\n        ORGANISATION_MANAGER,\n        all_groups\n    )\n    self.assertIn(\n        ORGANISATION_MEMBER,\n        all_groups\n    )\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.OrganizationUserTestCase.test_create_organisation_user_member","title":"test_create_organisation_user_member","text":"<pre><code>test_create_organisation_user_member()\n</code></pre> <p>Test creating organisation user as member.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>def test_create_organisation_user_member(self):\n    \"\"\"Test creating organisation user as member.\"\"\"\n    OrganisationInvites.objects.create(\n        email=self.user.email,\n        joined=True,\n        assigned_as=MEMBER,\n        organisation=self.organisation\n    )\n    organisation_user = organisationUserFactory(\n        user=self.user,\n        organisation=self.organisation\n    )\n    self.assertEqual(\n        organisation_user.user.groups.first().name,\n        ORGANISATION_MEMBER\n    )\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.OrganizationUserTestCase.test_delete_organisation_user","title":"test_delete_organisation_user","text":"<pre><code>test_delete_organisation_user()\n</code></pre> <p>Test deleting organisation user.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>def test_delete_organisation_user(self):\n    \"\"\"Test deleting organisation user.\"\"\"\n    user = self.organizationUser.user\n    group = GroupF.create(name='Data contributor')\n    user.groups.add(group)\n    organisation_user_2 = organisationUserFactory.create(\n        user=user\n    )\n\n    OrganisationInvites.objects.create(\n        email=self.user.email,\n        joined=True,\n        assigned_as=MEMBER,\n        organisation=self.organisation\n    )\n    organisation_user_3 = organisationUserFactory(\n        user=self.user,\n        organisation=self.organisation\n    )\n    organisation_user_4 = organisationUserFactory(\n        user=self.user\n    )\n    self.assertEquals(\n        list(organisation_user_3.user.groups.values_list('name', flat=True)),\n        [ORGANISATION_MEMBER]\n    )\n\n    # delete organizationUser\n    # user would still be in group Organisation Member\n    # because he still belongs to other organisation\n    self.organizationUser.delete()\n    self.assertEqual(OrganisationUser.objects.count(), 3)\n    self.assertEqual(len(user.groups.all()), 1)\n    self.assertEqual(user.groups.first().name, ORGANISATION_MEMBER)\n\n    # set userprofile to organisation 4\n    user_profile = UserProfile.objects.filter(user=organisation_user_2.user).first()\n    self.assertTrue(user_profile)\n    user_profile.current_organisation = organisation_user_4.organisation\n    user_profile.save()\n    # delete organisation_user_2\n    # user would be removed from group Organisation Member\n    # because he no longer belongs any organisation\n    organisation_user_2.delete()\n    self.assertEqual(OrganisationUser.objects.count(), 2)\n    self.assertFalse(\n        user.groups.exists()\n    )\n    # ensure current_organisation is not removed\n    user_profile.refresh_from_db()\n    self.assertTrue(user_profile.current_organisation)\n    self.assertEqual(user_profile.current_organisation.id, organisation_user_4.organisation.id)\n\n    # set userprofile to organisation 4\n    user_profile = UserProfile.objects.filter(user=organisation_user_4.user).first()\n    self.assertTrue(user_profile)\n    user_profile.current_organisation = organisation_user_4.organisation\n    user_profile.save()\n    # set as manager\n    OrganisationRepresentative.objects.create(\n        user=organisation_user_4.user,\n        organisation=organisation_user_4.organisation\n    )\n    # create invite\n    OrganisationInvites.objects.create(\n        organisation=organisation_user_4.organisation,\n        email=organisation_user_4.user.email,\n        user=organisation_user_4.user,\n    )\n    # delete organisation_user_4\n    # user would not be removed from group Organisation Member\n    # because is still a member of other organisation\n    organisation_user_4.delete()\n    self.assertEqual(OrganisationUser.objects.count(), 1)\n    self.assertEquals(\n        list(self.user.groups.values_list('name', flat=True)),\n        [ORGANISATION_MEMBER]\n    )\n    # ensure no current_organisation after organisation 4 is deleted\n    user_profile.refresh_from_db()\n    self.assertFalse(user_profile.current_organisation)\n    # ensure no manager record\n    self.assertFalse(OrganisationRepresentative.objects.filter(\n        user=organisation_user_4.user,\n        organisation=organisation_user_4.organisation\n    ).exists())\n    # ensure no invitation\n    self.assertFalse(OrganisationInvites.objects.filter(\n        user=organisation_user_4.user,\n        organisation=organisation_user_4.organisation\n    ).exists())\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.OrganizationUserTestCase.test_update_organisation_user","title":"test_update_organisation_user","text":"<pre><code>test_update_organisation_user()\n</code></pre> <p>Test updating organisation user.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>def test_update_organisation_user(self):\n    \"\"\" Test updating organisation user.\"\"\"\n    self.organizationUser.user.username = 'test'\n    self.organizationUser.user.save()\n    self.assertEqual(\n        self.organizationUser.user.username,\n        'test'\n    )\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.TestUser","title":"TestUser","text":"<p>               Bases: <code>TestCase</code></p> <p>Test the main user model relation to the profie model.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.TestUser.test_create_new_user_with_new_profile","title":"test_create_new_user_with_new_profile","text":"<pre><code>test_create_new_user_with_new_profile()\n</code></pre> <p>Test creating new user when new profile is created.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>def test_create_new_user_with_new_profile(self):\n    \"\"\"Test creating new user when new profile is created.\"\"\"\n    self.assertGreater(UserProfile.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.TestUser.test_delete_profile","title":"test_delete_profile","text":"<pre><code>test_delete_profile()\n</code></pre> <p>Test deleting user when a profile is deleted.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>def test_delete_profile(self):\n    \"\"\"Test deleting user when a profile is deleted.\"\"\"\n    user_id = self.user_profile.user.id\n    self.user_profile.delete()\n    self.assertEqual(User.objects.count(), 1)\n\n    users = User.objects.filter(id=user_id)\n    self.assertFalse(users.exists())\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.TestUser.test_update_user_profile","title":"test_update_user_profile","text":"<pre><code>test_update_user_profile()\n</code></pre> <p>Test updating user through profile.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>def test_update_user_profile(self):\n    \"\"\"Test updating user through profile.\"\"\"\n    self.user_profile.user.username = 'test'\n    self.user_profile.user.first_name = 'test123'\n    self.user_profile.user.save()\n    self.assertEqual(\n        User.objects.get(username='test').first_name, 'test123'\n    )\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.TestUserLogin","title":"TestUserLogin","text":"<p>               Bases: <code>TestCase</code></p> <p>\"User login testcase.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.TestUserLogin.create_user_login","title":"create_user_login","text":"<pre><code>create_user_login()\n</code></pre> <p>Test creating new user login.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>def create_user_login(self):\n    \"\"\"Test creating new user login.\"\"\"\n    self.assertEqual(UserLogin.objects.count(), 1)\n    self.assertEqual(User.objects.count(), 2)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.TestUserLogin.test_delete_user_login","title":"test_delete_user_login","text":"<pre><code>test_delete_user_login()\n</code></pre> <p>Test deleting user login.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>def test_delete_user_login(self):\n    \"\"\"Test deleting user login.\"\"\"\n    self.user_login.delete()\n    self.assertEqual(UserLogin.objects.count(), 0)\n    self.assertEqual(User.objects.count(), 2)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.TestUserLogin.test_update_user_login","title":"test_update_user_login","text":"<pre><code>test_update_user_login()\n</code></pre> <p>Test updating user login.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>def test_update_user_login(self):\n    \"\"\"Test updating user login.\"\"\"\n    self.user_login.login_status.name = 'logged out'\n    self.user_login.login_status.save()\n    self.assertEqual(\n        UserLogin.objects.get(id=self.user_login.id).login_status.name,\n        'logged out'\n    )\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.TestUserRoleType","title":"TestUserRoleType","text":"<p>               Bases: <code>TestCase</code></p> <p>Test user's role type model.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.TestUserRoleType.test_create_new_role","title":"test_create_new_role","text":"<pre><code>test_create_new_role()\n</code></pre> <p>Test creating new role.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>def test_create_new_role(self):\n    \"\"\"Test creating new role.\"\"\"\n    self.assertEqual(UserRoleType.objects.count(), 1)\n    self.assertTrue(\n        self.UserRoleTypeFactory.name\n        in ['base user', 'admin', 'super user']\n    )\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.TestUserRoleType.test_delete_role","title":"test_delete_role","text":"<pre><code>test_delete_role()\n</code></pre> <p>Test deleting new role.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>def test_delete_role(self):\n    \"\"\"Test deleting new role.\"\"\"\n    self.UserRoleTypeFactory.delete()\n    self.assertEqual(UserRoleType.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.TestUserRoleType.test_update_role","title":"test_update_role","text":"<pre><code>test_update_role()\n</code></pre> <p>Test updating a role.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>def test_update_role(self):\n    \"\"\"Test updating a role.\"\"\"\n    self.UserRoleTypeFactory.name = 'admin'\n    self.UserRoleTypeFactory.save()\n    UserRoleObject = UserRoleType.objects.get(\n        id=self.UserRoleTypeFactory.id\n    )\n    self.assertEqual(UserRoleObject.name, 'admin')\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.UserTitleTestCase","title":"UserTitleTestCase","text":"<p>               Bases: <code>TestCase</code></p> <p>User title test case.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.UserTitleTestCase.test_create_new_title","title":"test_create_new_title","text":"<pre><code>test_create_new_title()\n</code></pre> <p>Test creating new title.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>def test_create_new_title(self):\n    \"\"\"Test creating new title.\"\"\"\n    self.assertEqual(UserTitle.objects.count(), 1)\n    self.assertTrue(self.userTitle.name in ['mr', 'mrs', 'miss', 'dr'])\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.UserTitleTestCase.test_delete_new_title","title":"test_delete_new_title","text":"<pre><code>test_delete_new_title()\n</code></pre> <p>Test deleting a title.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>def test_delete_new_title(self):\n    \"\"\"Test deleting a title.\"\"\"\n    self.userTitle.delete()\n    self.assertEqual(UserTitle.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_stakeholder_models.UserTitleTestCase.test_update_title","title":"test_update_title","text":"<pre><code>test_update_title()\n</code></pre> <p>Test updating a title.</p> Source code in <code>django_project/stakeholder/tests/test_stakeholder_models.py</code> <pre><code>def test_update_title(self):\n    \"\"\"Test updating a title.\"\"\"\n    self.userTitle.name = 'mr'\n    userTitle = UserTitle.objects.get(id=self.userTitle.id)\n    self.assertTrue(userTitle.name, 'mr')\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_profile.TestProfileView","title":"TestProfileView","text":"<p>               Bases: <code>TestCase</code></p> <p>Tests CURD on Profile Model and test update profile view.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_profile.TestProfileView.test_404","title":"test_404","text":"<pre><code>test_404()\n</code></pre> <p>Test 404 mismatch user</p> Source code in <code>django_project/stakeholder/tests/test_profile.py</code> <pre><code>def test_404(self):\n    \"\"\"\n    Test 404 mismatch user\n    \"\"\"\n    user = get_user_model().objects.create(\n        is_staff=False,\n        is_active=True,\n        is_superuser=False,\n        username='test',\n        email='test@test.com',\n    )\n    device = TOTPDevice(\n        user=self.test_user,\n        name='device_name'\n    )\n    device.save()\n\n    resp = self.client.login(username='testuser', password='testpassword')\n    self.assertTrue(resp)\n\n    response = self.client.post(\n        '/profile/{}/'.format(user.username)\n    )\n    # if mismatch user\n    self.assertEqual(response.status_code, 404)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_profile.TestProfileView.test_post_with_data","title":"test_post_with_data","text":"<pre><code>test_post_with_data()\n</code></pre> <p>Test update profile from the form page</p> Source code in <code>django_project/stakeholder/tests/test_profile.py</code> <pre><code>def test_post_with_data(self):\n    \"\"\"\n    Test update profile from the form page\n    \"\"\"\n    device = TOTPDevice(\n        user=self.test_user,\n        name='device_name'\n    )\n    device.save()\n    title = userTitleFactory.create(\n        id=1,\n        name = 'test',\n    )\n    role = userRoleTypeFactory.create(\n        id=1,\n        name = 'test',\n    )\n    resp = self.client.login(username='testuser', password='testpassword')\n    self.assertTrue(resp)\n\n    post_dict = {\n        'first-name': 'Fan',\n        'last-name': 'Fan',\n        'email': self.test_user.email,\n        'organization': 'Kartoza',\n        'profile_picture': '/profile/pic/path',\n        'title': '1',\n        'role': '1',\n    }\n\n    response = self.client.post(\n        '/profile/{}/'.format(self.test_user.username), post_dict\n    )\n    self.assertEqual(response.status_code, 302)\n    updated_user = get_user_model().objects.get(id=self.test_user.id)\n    self.assertEqual(updated_user.first_name, 'Fan')\n    self.assertEqual(updated_user.last_name, 'Fan')\n    self.assertIsNotNone(updated_user.user_profile.picture)\n    self.assertEqual(updated_user.user_profile.title_id.name, title.name)\n    self.assertEqual(updated_user.user_profile.user_role_type_id.name, role.name)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_profile.TestProfileView.test_profile_create","title":"test_profile_create","text":"<pre><code>test_profile_create()\n</code></pre> <p>Tests profile creation</p> Source code in <code>django_project/stakeholder/tests/test_profile.py</code> <pre><code>def test_profile_create(self):\n    \"\"\"\n    Tests profile creation\n    \"\"\"\n    user = UserF.create()\n\n    self.assertTrue(user.user_profile is not None)\n\n    profile = UserProfile.objects.get(\n        id=user.user_profile.id\n    )\n\n    profile.picture = 'profile_pictures/picture_P.jpg'\n    profile.save()\n\n    self.assertEqual(UserProfile.objects.get(\n        id=profile.id\n    ).picture, 'profile_pictures/picture_P.jpg')\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_profile.TestProfileView.test_profile_delete","title":"test_profile_delete","text":"<pre><code>test_profile_delete()\n</code></pre> <p>Tests profile delete</p> Source code in <code>django_project/stakeholder/tests/test_profile.py</code> <pre><code>def test_profile_delete(self):\n    \"\"\"\n    Tests profile delete\n    \"\"\"\n    user = UserF.create()\n    profile = user.user_profile\n    profile.delete()\n\n    self.assertTrue(profile.pk is None)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_profile.TestProfileView.test_profile_update","title":"test_profile_update","text":"<pre><code>test_profile_update()\n</code></pre> <p>Tests profile update</p> Source code in <code>django_project/stakeholder/tests/test_profile.py</code> <pre><code>def test_profile_update(self):\n    \"\"\"\n    Tests profile update\n    \"\"\"\n    user = UserF.create()\n    profile = user.user_profile\n    profile_picture = {\n        'picture': 'profile_pictures/picture_P.jpg',\n    }\n    profile.__dict__.update(profile_picture)\n    profile.first_name = 'j'\n    profile.last_name = 'jj'\n    profile.save()\n\n    user.email = 't@t.com'\n    user.save()\n\n    self.assertIsNotNone(profile.picture)\n    self.assertIsNotNone(profile.first_name)\n    self.assertIsNotNone(profile.last_name)\n    self.assertIsNotNone(user.email)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_tasks.TestUpdatePropertyShortCode","title":"TestUpdatePropertyShortCode","text":"<p>               Bases: <code>TestCase</code></p> <p>Update Property Short Code test case.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_tasks.TestUpdatePropertyShortCode.test_update_short_code_from_organisation","title":"test_update_short_code_from_organisation","text":"<pre><code>test_update_short_code_from_organisation()\n</code></pre> <p>Test updating property short code when organization is updated.</p> Source code in <code>django_project/stakeholder/tests/test_tasks.py</code> <pre><code>def test_update_short_code_from_organisation(self):\n    \"\"\"Test updating property short code when organization is updated.\"\"\"\n    self.assertEqual(\n        self.organization.short_code,\n        'LICA0001'\n    )\n    property_1 = PropertyFactory.create(\n        organisation=self.organization,\n        province=self.province\n    )\n    property_2 = PropertyFactory.create(\n        organisation=self.organization,\n        province=self.province\n    )\n    self.organization.name = 'test'\n    self.organization.national = True\n    self.organization.province = self.province\n    self.organization.save()\n\n    # call task function\n    update_property_short_code(self.organization.id)\n\n    property_1.refresh_from_db()\n    property_2.refresh_from_db()\n\n    self.assertEqual(\n        self.organization.short_code,\n        'LITE0002'\n    )\n    self.assertEqual(\n        property_1.short_code,\n        'LITEPR0001'\n    )\n    self.assertEqual(\n        property_2.short_code,\n        'LITEPR0002'\n    )\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tests.test_tasks.TestUpdatePropertyShortCode.test_update_short_code_from_province","title":"test_update_short_code_from_province","text":"<pre><code>test_update_short_code_from_province()\n</code></pre> <p>Test updating property and organisaition short code when provincr is updated.</p> Source code in <code>django_project/stakeholder/tests/test_tasks.py</code> <pre><code>def test_update_short_code_from_province(self):\n    \"\"\"\n    Test updating property and organisaition short code when provincr is updated.\n    \"\"\"\n    province, created = Province.objects.get_or_create(\n        name=\"Western Cape\"\n    )\n    property_1 = PropertyFactory.create(\n        organisation=self.organization,\n        province=self.province\n    )\n    property_2 = PropertyFactory.create(\n        organisation=self.organization,\n        province=self.province\n    )\n    self.organization.name = 'test'\n    self.organization.national = True\n    self.organization.province = province\n    self.organization.save()\n\n    # call task function\n    update_property_short_code(self.organization.id)\n\n    property_1.refresh_from_db()\n    property_2.refresh_from_db()\n\n    self.assertEqual(\n        self.organization.short_code,\n        'WCTE0001'\n    )\n    self.assertEqual(\n        property_1.short_code,\n        'LITEPR0001'\n    )\n    self.assertEqual(\n        property_2.short_code,\n        'LITEPR0002'\n    )\n</code></pre>"},{"location":"developer/manual/stakeholder/#tasks","title":"Tasks","text":""},{"location":"developer/manual/stakeholder/#django_project.stakeholder.tasks.send_reminder_emails","title":"send_reminder_emails","text":"<pre><code>send_reminder_emails(*args)\n</code></pre> <p>check any reminders that need to be sent, update reminder status and user notifications</p> Source code in <code>django_project/stakeholder/tasks.py</code> <pre><code>@shared_task\ndef send_reminder_emails(*args):\n    \"\"\"check any reminders that need to be sent,\n    update reminder status and user notifications\"\"\"\n    current_datetime = timezone.now()\n    due_reminders = Reminders.objects.filter(\n        status=Reminders.ACTIVE,\n        email_sent=False,\n        date__lte=current_datetime\n    )\n\n    for reminder in due_reminders:\n        if reminder.type == Reminders.PERSONAL:\n            send_reminder_email(reminder.id)\n            update_user_profile(reminder.user)\n        else:\n            org_users_list = OrganisationUser.objects.filter(\n                organisation=reminder.organisation\n            )\n            for org_user in org_users_list:\n                send_reminder_email(reminder.id, org_user.user.id)\n                update_user_profile(org_user.user)\n        reminder.status = Reminders.PASSED\n        reminder.email_sent = True\n        reminder.save()\n</code></pre>"},{"location":"developer/manual/stakeholder/#utils","title":"Utils","text":""},{"location":"developer/manual/stakeholder/#django_project.stakeholder.utils.add_user_to_org_manager","title":"add_user_to_org_manager","text":"<pre><code>add_user_to_org_manager(instance, GroupModel=None)\n</code></pre> <p>Add user to Organisation Manager group.</p> Source code in <code>django_project/stakeholder/utils.py</code> <pre><code>def add_user_to_org_manager(\n    instance,\n    GroupModel=None,\n):\n    \"\"\"\n    Add user to Organisation Manager group.\n    \"\"\"\n    from django.contrib.auth.models import Group\n\n    GroupModel = GroupModel if GroupModel else Group\n    group, _ = GroupModel.objects.get_or_create(name=ORGANISATION_MANAGER)\n    instance.user.groups.add(group)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.utils.add_user_to_org_member","title":"add_user_to_org_member","text":"<pre><code>add_user_to_org_member(\n    instance, OrgInvModel=None, GroupModel=None\n)\n</code></pre> <p>Add user to Organisation Member group.</p> Source code in <code>django_project/stakeholder/utils.py</code> <pre><code>def add_user_to_org_member(\n    instance,\n    OrgInvModel=None,\n    GroupModel=None,\n):\n    \"\"\"\n    Add user to Organisation Member group.\n    \"\"\"\n    from stakeholder.models import OrganisationInvites\n    from django.contrib.auth.models import Group\n\n    OrgInvModel = OrgInvModel if OrgInvModel else OrganisationInvites\n    GroupModel = GroupModel if GroupModel else Group\n    group, _ = GroupModel.objects.get_or_create(name=ORGANISATION_MEMBER)\n    instance.user.groups.add(group)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.utils.remove_user_from_org_manager","title":"remove_user_from_org_manager","text":"<pre><code>remove_user_from_org_manager(instance)\n</code></pre> <p>Remove user from Organisation Manager group.</p> Source code in <code>django_project/stakeholder/utils.py</code> <pre><code>def remove_user_from_org_manager(instance):\n    \"\"\"\n    Remove user from Organisation Manager group.\n    \"\"\"\n\n    from stakeholder.models import OrganisationRepresentative\n    from django.contrib.auth.models import Group\n\n    organisation_reps = OrganisationRepresentative.objects.filter(\n        user=instance.user\n    )\n\n    if not organisation_reps.exists():\n        group = Group.objects.filter(name=ORGANISATION_MANAGER).first()\n        if group:\n            instance.user.groups.remove(group)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.utils.remove_user_from_org_member","title":"remove_user_from_org_member","text":"<pre><code>remove_user_from_org_member(instance)\n</code></pre> <p>Remove user from Organisation Member group.</p> Source code in <code>django_project/stakeholder/utils.py</code> <pre><code>def remove_user_from_org_member(instance):\n    \"\"\"\n    Remove user from Organisation Member group.\n    \"\"\"\n\n    from stakeholder.models import OrganisationUser\n    from django.contrib.auth.models import Group\n\n    organisation_users = OrganisationUser.objects.filter(user=instance.user)\n\n    # Remove from Data Contributor groups if user is\n    # no longer assigned to any organisation\n    group = Group.objects.filter(name='Data contributor').first()\n    if group:\n        instance.user.groups.remove(group)\n\n    if not organisation_users.exists():\n        group = Group.objects.filter(name=ORGANISATION_MEMBER).first()\n        if group:\n            instance.user.groups.remove(group)\n</code></pre>"},{"location":"developer/manual/stakeholder/#views","title":"Views","text":""},{"location":"developer/manual/stakeholder/#django_project.stakeholder.views.OrganisationAPIView","title":"OrganisationAPIView","text":"<p>               Bases: <code>APIView</code></p> <p>Get organisation</p>"},{"location":"devops/","title":"IDS SAWPS","text":""},{"location":"devops/#devops-documentation","title":"DevOps Documentation","text":"<p>This section contains all documentation relevant to DevOps procedures.</p> <p>The devops content is divided into two sections:</p> <ul> <li>The devops guide, which describes common workflows for deployment and management of running instances in a tutorial format.</li> <li>The devops manual, which provides links and references to deployment configuration files, frameworks and deployment systems used etc.</li> </ul>"},{"location":"devops/guide/","title":"IDS SAWPS","text":""},{"location":"devops/guide/#devops-guide","title":"DevOps Guide","text":""},{"location":"devops/manual/","title":"IDS SAWPS","text":""},{"location":"devops/manual/#devops-documentation","title":"DevOps Documentation","text":""},{"location":"devops/manual/#containers-used","title":"Containers Used","text":""},{"location":"devops/manual/#sdlc","title":"SDLC","text":""},{"location":"devops/manual/#continuous-integration","title":"Continuous Integration","text":""},{"location":"devops/manual/#testing-deployments","title":"Testing Deployments","text":""},{"location":"devops/manual/#backend-orchestration","title":"Backend Orchestration","text":""},{"location":"devops/manual/#deployments","title":"Deployments","text":""},{"location":"devops/manual/#kubernetes","title":"Kubernetes","text":""},{"location":"user/","title":"IDS SAWPS","text":""},{"location":"user/#for-users","title":"For Users","text":"<p>This is the homepage for all user related documentation.</p> <p>The user content is divided into three sections:</p> <ul> <li>The quickstart tutorial, which aims to get you familiar with the basics of platform in around 5 minutes.</li> <li>The user guide, which describes common workflows in a tutorial format.</li> <li>The user manual, which describes each page of the user interface and what the various options on that page do.</li> </ul>"},{"location":"user/guide/","title":"IDS SAWPS","text":""},{"location":"user/guide/#sawps-user-guide","title":"SAWPS User Guide","text":"<p>Welcome to the SAWPS user guide. In this section of the documentation, we aim to show users how to utilise the platform effectively, customise their profiles and so forth. Here is a brief overview of the content provided here:</p> <ul> <li>Registering: This page will show you how to register on the platform.</li> <li>Help and Contact Pages: Here we explain how to get help with the platform, either from the documentation or through contacting the SAWPS team.</li> <li>Upload Data: This section guides you through using the data upload feature on the site.</li> <li>The Explore Page: This section explains how use the Explore page of the platform and the various tabs contained within the explore page.</li> <li>Profile Setup: Describes how to set up your user profile and to navigate the various tabs of the profile page.</li> <li>Organisations: This documentation shows you the features of the organisation page that organisation managers can utilise.</li> </ul> <p>DISCLAIMER: Some of the images in the guide may vary slightly from what you see on the platform due to continuous updates to the platform.</p>"},{"location":"user/guide/data-upload/","title":"IDS SAWPS","text":""},{"location":"user/guide/data-upload/#working-with-the-data-upload","title":"Working with the data upload","text":"<p>The data upload function allows users to fill in an online form or upload a CSV file to the SAWPS platform to further enrich their data.</p> <p>Note: Users must first download a template from the platform, which they populate with their own data.</p>"},{"location":"user/guide/data-upload/#how-do-i-upload-data-to-a-new-property","title":"How do I upload data to a new property?","text":"<p>Click on the <code>UPLOAD DATA</code> button in the navigation bar. This will redirect you to an interactive map which will allow you to <code>CREATE A NEW PROPERTY</code> by clicking on 1\ufe0f\u20e3 the button with the same name. This will redirect you to <code>STEP 1</code>.</p> <p></p>"},{"location":"user/guide/data-upload/#step-1","title":"Step 1","text":"<p>In this step/tab, you should enter the information for your property (such as Property Name, whether the property is an Open/Closed System and the Property Type) and once you have entered all of the relevant information you should click on 1\ufe0f\u20e3 <code>SAVE PROPERTY INFORMATION</code> button. This will redirect you to <code>STEP 2</code>.</p> <p></p>"},{"location":"user/guide/data-upload/#step-2","title":"Step 2","text":"<p>In this step/tab, zoom into the location of your property on the map and then decide whether you would like to 1\ufe0f\u20e3 select the boundary from the existing parcel polygons, 2\ufe0f\u20e3 digitise your boundary, or 3\ufe0f\u20e3 upload a supported vector file(s) of your property.</p> <p></p>"},{"location":"user/guide/data-upload/#select-parcel-polygons","title":"Select parcel polygons","text":"<p>Once you click on the <code>SELECT</code> button, it will change to say 1\ufe0f\u20e3 <code>CANCEL</code>, the other two options will be greyed out and the map will highlight orange.</p> <p></p> <p>You can then select your property boundary from the existing parcel polygons. Your selected polygons will be outlined in red.</p> <p></p> <p>Once you have selected your property boundary, you can then move on to saving Your Property Boundary. The selected parcel 1\ufe0f\u20e3 id's will be displayed on the left side. Once you select the boundary, the <code>UPLOAD</code> button will change to say 2\ufe0f\u20e3 <code>CLEAR BOUNDARY</code> you can clear all the selected boundaries by clicking on this button.</p> <p></p>"},{"location":"user/guide/data-upload/#digitise-property","title":"Digitise property","text":"<p>Once you have clicked on the <code>DIGITISE</code> button, the other two buttons will be greyed out and you will be able to select 1\ufe0f\u20e3 the polygon tool from the toolbar that appears. If you hover your mouse over the buttons there is a popup that appears with the name of the tool.</p> <p></p> <p>Once you have digitised your property boundary polygon, right-click on your mouse and then click on 1\ufe0f\u20e3 the <code>Save</code> button.</p> <p></p> <p>The platform will then process the geometry you have input.</p> <p></p> <p>Once it has processed the geometry, it will zoom into the bounding box of the polygon you have digitised and will also highlight any parcels that overlap your digitised boundary.</p> <p></p> <p>Once you have finished digitising your property boundary, you can then move on to saving Your Property Boundary.</p>"},{"location":"user/guide/data-upload/#upload-property","title":"Upload property","text":"<p>Once you have clicked on the <code>UPLOAD</code> button, an Upload popup window will appear where you can upload a supported vector file of your property. You can drag and drop the file(s) or <code>Browse</code> on your computer for the correct file(s), once you have uploaded your file(s) it will appear on the popup in the 1\ufe0f\u20e3 Uploaded Files section.</p> <p>Make sure you zipped your shapefiles directly, NOT the directory containing the shapefiles. Otherwise, the shapefiles inside the zip file will not be detected (e.g. the zip folder will contain a <code>.cpg</code>, <code>.dbf</code>, a <code>.prj</code>, a <code>.shp</code>, and a <code>.shx</code> file).</p> <p>Disclaimer: If you upload any geometry type that is not polygon, or multi-polygon, (e.g. line, multi-line, etc.) the site will process for a while and then return an error message. Ensure your data is a polygon, or multi-polygon, and not another geometry type.</p> <p></p> <p>Once you have uploaded your file(s), click on <code>UPLOAD FILES</code>, the platform will then process your file(s).</p> <p></p> <p>A progress bar will appear at the top of the popup window indicating the percentage that your upload is processed.</p> <p></p> <p>Once your file(s) have been processed (i.e. when the progress bar reaches <code>100%</code>), the platform will display a message (either success, failure, or warning) and you can click on 1\ufe0f\u20e3 the <code>CLOSE</code> button.</p> <p></p>"},{"location":"user/guide/data-upload/#upload-message-types","title":"Upload Message Types","text":"<ol> <li> <p>Success Message: If you have uploaded data that is in the correct CRS (EPSG:4326), is of the polygon/multi-polygon geometry type, and doesn't overlap another user's properties then you will see a success message at the top of the upload popup window.     </p> </li> <li> <p>Warning Message: If you upload data that can be processed but overlaps/contains parcels that have previously been used by another user, then you will receive a warning message.     </p> </li> <li> <p>Failure Message: If you upload data with an incorrect CRS, an incorrect geometry type, or another issue, you will receive an error message.     Incorrect CRS:     </p> <p>Incorrect Geometry type: </p> </li> </ol> <p>Once you close the popup window, the platform will redirect you to the map and show the outline of your property boundary, and you can fine tune your property using the panel on the left of the screen.</p> <p></p> <p>Once you are satisfied with your property boundary, you can then move on to saving Your Property Boundary.</p>"},{"location":"user/guide/data-upload/#save-boundary","title":"Save Boundary","text":"<p>Removing a property can be done by clicking on the \u2018dustbin\u2019 icon, and once you are satisfied with your property boundary, click on 1\ufe0f\u20e3 the <code>SAVE BOUNDARY</code> button. This will redirect you to <code>STEP 3</code>.</p> <p>Note: this example used a selected property boundary</p> <p></p>"},{"location":"user/guide/data-upload/#step-3","title":"Step 3","text":"<p>In this step/tab, you can update the Species Population Data by using 1\ufe0f\u20e3 the <code>ONLINE FORM</code> or 2\ufe0f\u20e3 download the template and then upload it using the <code>UPLOAD DATA</code> button. You can also manage the property boundary using 3\ufe0f\u20e3 the <code>UPDATE PROPERTY BOUNDARY</code> button, which will redirect you to <code>STEP 2</code> where you can edit the property boundary. The property information is also viewable.</p> <p></p>"},{"location":"user/guide/data-upload/#the-online-form","title":"The Online Form","text":"<p>If you choose to use the <code>ONLINE FORM</code> and click on the button of the same name, the site will redirect you to the first part online form (the SPECIES DETAIL page). On this page, you are required to fill in every field that has an asterisk (little star '') next to the field title, as these are mandatory. Once you have filled in the required fields, you can click on 1\ufe0f\u20e3 <code>Next</code> to move on to the next page (the ACTIVITY DETAIL* page). If you wish to leave and come back to the form later one, you can click on 2\ufe0f\u20e3 <code>SAVE DRAFT</code>.</p> <p></p> <p>On the ACTIVITY DETAIL page, you can add details regarding Introduction/Reintroduction and/or Off-take of individuals on the property. Once you have filled out the Introduction/Reintroduction section you can click on 1\ufe0f\u20e3 the <code>+ ADD</code> button, and/or once you have filled in the Off-take section you can click on 2\ufe0f\u20e3 the <code>+ ADD</code> button.</p> <p>After adding a new event, you can click on 3\ufe0f\u20e3 the <code>NEXT</code> button. If you would like to change the species on your property you can click 4\ufe0f\u20e3 the <code>BACK</code> button, or if you wish to leave and come back to the form later one, you can click on 5\ufe0f\u20e3 <code>SAVE DRAFT</code>. Again, you are required to fill in every field that has an asterisk (little star '*') next to the field title, as these are mandatory. If you don't have an event to add you can just click on 3\ufe0f\u20e3 the <code>NEXT</code> button.</p> <p></p> <p>Clicking <code>NEXT</code> redirects you to the REVIEW &amp; SUBMIT page of the online form where you can confirm the information you have entered regarding your property. If you are content with the data associated with your project, you can click on 1\ufe0f\u20e3 the <code>SUBMIT</code> button. If you would like to change the activity details for your property you can click 2\ufe0f\u20e3 the <code>BACK</code> button, or if you wish to leave and come back to the form later one, you can click on 3\ufe0f\u20e3 <code>SAVE DRAFT</code>.</p> <p></p> <p>Once you have clicked on <code>SUBMIT</code> a popup will appear letting you know your data has been uploaded successfully. You can then click on the <code>OK</code> button to close the form and get redirected back to the REPORTS page.</p> <p></p>"},{"location":"user/guide/data-upload/#upload-data-using-the-template","title":"Upload Data using the template","text":"<p>If you would like to download the data template to then upload it, you can click on 1\ufe0f\u20e3 the <code>DOWNLOAD TEMPLATE</code> button. This will download the template to your computer as an Excel file (a .xlsx file). The 2\ufe0f\u20e3 Property Code available here will be used in the spreadsheet.</p> <p></p> <p>When you first open the file, the <code>MASTER</code> sheet will be displayed. This page is an upload \u2018blue-print\u2019 explaining how to input data into the spreadsheet. The key explains the difference between compulsory fields (green), non-compulsory fields (yellow) and automatically calculated fields (grey). It is critical to refer to this page when inputting your data to avoid errors.</p> <p></p> <p>Navigate to 1\ufe0f\u20e3 the <code>Dataset_pilot</code> sheet, and start imputing your species data. Keep in mind the compulsory fields as specified in 2\ufe0f\u20e3 the <code>Master</code> sheet and the Property Code for your specific property that can be found on the site, as shown previously.</p> <p></p> <p>Once you have adequately filled in the spreadsheet, you can then click on 1\ufe0f\u20e3 the <code>UPLOAD DATA</code> button. This will open a popup where you can drag and drop the file(s) or <code>Browse</code> on your computer for the correct file(s), once you have uploaded your file(s) it will appear on the popup in the 2\ufe0f\u20e3 Uploaded Files section. You can then click on 3\ufe0f\u20e3 the <code>UPLOAD FILE</code> button.</p> <p></p> <p>The platform will then process your file.</p> <p></p> <p>Once the platform has processed your uploaded data, a success message will be displayed and you can then click on the <code>CLOSE</code> button on the popup.</p> <p></p> <p>The data has now been uploaded and is associated with your property</p>"},{"location":"user/guide/data-upload/#what-happens-if-there-are-issues-with-my-upload","title":"What happens if there are issues with my upload?","text":"<p>If there is an issue with your uploaded data the site will return a warning or a CSV file with information about the issue with your data. These are explained below:</p>"},{"location":"user/guide/data-upload/#uploading-duplicate-data","title":"Uploading duplicate data","text":"<p>If you attempt to upload data that is populated with previously uploaded data, the site will successfully upload the data but will return a warning saying that the row(s) already exist in the database.</p> <p></p>"},{"location":"user/guide/data-upload/#compulsory-fields-not-filled-in","title":"Compulsory fields not filled in","text":"<p>If you attempt to upload data that is missing one (or many) compulsory field(s), the site will not allow for the upload and will then return an error message. If you click on 1\ufe0f\u20e3 the <code>ERROR FILE</code> button, an error CSV file will be downloaded to your computer.</p> <p></p> <p>If you open the error CSV file, the first column in the file will contain a message regarding the error the platform has encountered (this example didn't input the scientific name). You need to correct the issue in the file you want to upload.</p> <p></p> <p>Once you have fixed the error in the file you want to upload, click on 1\ufe0f\u20e3 the <code>X</code> button to remove the upload with an error and then 2\ufe0f\u20e3 upload the corrected file.</p> <p></p>"},{"location":"user/guide/data-upload/#the-property-code-provided-does-not-match-the-selected-property","title":"The Property code provided does not match the selected property","text":"<p>If you try to upload data that has a project code that does not match with the property code of the property you are trying to upload data to, the platform will not allow the upload to happen and will then return an error message. If you click on 1\ufe0f\u20e3 the <code>ERROR FILE</code> button, an error CSV file will be downloaded to your computer.</p> <p></p> <p>If you open the error CSV file, the first column in the file will contain a message explaining what you need to change your property code to, to be correct.</p> <p></p> <p>Once you have fixed the error in the file you want to upload, click on 1\ufe0f\u20e3 the <code>X</code> button to remove the upload with an error and then 2\ufe0f\u20e3 upload the corrected file.</p> <p></p> <p>This Section Will Be Updated.</p>"},{"location":"user/guide/data-upload/#empty-sheet-uploaded","title":"Empty sheet uploaded","text":"<p>If you try to upload an empty data file, the site will return an error message. Fill in all the mandatory fields in the file and try uploading again.</p> <p></p>"},{"location":"user/guide/data-upload/#how-do-i-upload-to-or-manage-an-existing-property","title":"How do I upload to, or manage, an existing property?","text":"<p>Click on the <code>UPLOAD DATA</code> button in the navigation bar. This will redirect you to an interactive map which will prompt you to 1\ufe0f\u20e3 enter the \u2018search area\u2019 you are interested or 2\ufe0f\u20e3 \u2018select property\u2019 that you are interested in.</p> <p></p> <p>You will be redirected to <code>Step 3</code>, where the interactive map will now highlight the property boundary. You can update the Species Population Data by using 1\ufe0f\u20e3 the <code>ONLINE FORM</code> or 2\ufe0f\u20e3 download the template and then upload it using the <code>UPLOAD DATA</code> button. You can also manage the property boundary using 3\ufe0f\u20e3 the <code>UPDATE PROPERTY BOUNDARY</code> button, which will redirect you to <code>STEP 2</code> where you can edit the property boundary. The property information is also viewable.</p> <p></p> <p>If you would like to edit the property's information, click on <code>STEP 1</code> and edit the fields as needed. When you are done, click on 1\ufe0f\u20e3 the <code>SAVE PROPERTY INFORMATION</code> button.</p> <p></p> <p>If you would like to edit the property's boundary information, click on <code>STEP 2</code> and edit the boundaries as needed. When you are done, click on 1\ufe0f\u20e3 the <code>SAVE BOUNDARY</code> button.</p> <p></p>"},{"location":"user/guide/explore/","title":"IDS SAWPS","text":""},{"location":"user/guide/explore/#explore-page","title":"Explore page","text":"<p>This documentation explains how to use the map on the platform as well as how to use the various other tabs contained within the Explore page. On the landing page, click on the <code>Explore</code> button in the navigation bar to be redirected to the explore page.</p> <p>Disclaimer: The screenshots in the documentation may vary slightly from the actual site due to continuous updates and improvements to the platform.</p> <p></p>"},{"location":"user/guide/explore/#switching-between-dark-and-light-mode-on-the-map","title":"Switching between dark and light mode on the map","text":"<p>When you first load the explore page, the map is in light mode. If you wish to change to dark mode you can switch by simply clicking on 1\ufe0f\u20e3 the <code>Toggle Dark Mode</code> button.</p> <p></p> <p>This will switch your map from light mode to dark mode.</p> <p></p> <p>To switch your map from dark mode to light mode, click on 1\ufe0f\u20e3 the <code>Toggle Light Mode</code> button.</p> <p></p> <p>This will switch your map from dark mode to light mode.</p> <p></p> <p>This guide is done mostly in Dark mode, so the visuals will look slightly different to if you are working in light mode.</p>"},{"location":"user/guide/explore/#changing-zoom-levels-on-the-map","title":"Changing zoom levels on the map","text":"<p>There are multiple ways to change zoom levels on the map: you can scroll up and down on your mouse, you can swipe two fingers up and down on your laptop's touchpad, or you can use 1\ufe0f\u20e3 the <code>Zoom in</code> and <code>Zoom out</code> buttons.</p> <p></p> <p>Click on the <code>plus</code> (<code>Zoom in</code>) button to zoom in</p> <p></p> <p>And click on the <code>minus</code> (<code>Zoom out</code>) button to zoom out and click on the <code>minus</code> (<code>Zoom out</code>) button to zoom out.</p> <p></p>"},{"location":"user/guide/explore/#working-with-map-layers","title":"Working with map layers","text":"<p>When you first arrive on the explore page, to the left of the map will be the <code>FILTERS</code> panel. Click on the <code>LAYERS</code> tab on the panel to switch to the <code>LAYERS</code> panel.</p> <p></p> <p>From the list of layers, you can enable and disable layers as needed. If a checkbox is empty then the layer is disabled and not visible. If there is a tick in the checkbox then the layer is enabled and visible.</p> <p></p> <p>Keep in mind that some layers are only visible between certain zoom levels, like the Protected areas and Cadastral boundaries.</p> <p></p>"},{"location":"user/guide/explore/#ngi-aerial-imagery","title":"NGI Aerial Imagery","text":"<p>By default, the NGI Aerial Imagery layer is disabled and when you enable it, it will only appear when you zoom in enough.</p> <p></p> <p></p>"},{"location":"user/guide/explore/#changing-map-orientation","title":"Changing map orientation","text":"<p>When you first view the map, it will be in an overhead 2D view. If you right click and drag your mouse pointer on the map, you can change the view orientation and in turn visualise your data in a 3D manner, or you can click on 1\ufe0f\u20e3 the <code>Toggle 3D view</code> button.</p> <p></p> <p>When viewing the data in a 3D view, the different intervals are represented at different heights (i.e. the interval with the highest upper bound would be the tallest column).</p> <p></p> <p>If you want to reset the map view back to the standard overhead view, click on 1\ufe0f\u20e3 the <code>Toggle 3D view</code> button and this will return the map to the 2D overhead view.</p> <p></p>"},{"location":"user/guide/explore/#printing-your-current-map-view","title":"Printing your current map view","text":"<p>The print option on the map allows you to take a screenshot of whatever is present on your map canvas. To save this screenshot, click on the print icon which is located next to the layers panel.</p> <p></p> <p>Select your desired page size, orientation, image format and DPI and then click on the <code>Generate</code> button.</p> <p></p> <p>After clicking the <code>Generate</code> button, you will be prompted to save the image to your local machine.</p> <p></p> <p>Once the image is saved to you will be able to open it and view it.</p> <p></p>"},{"location":"user/guide/explore/#using-the-filters-panel","title":"Using the Filters Panel","text":"<p>To apply filters to the data being displayed on your map, open the <code>FILTERS</code> panel. In this panel there are a few options of filters that you can apply to your map.</p> <p></p> <p>If you know a nearby location to your property, you can use 1\ufe0f\u20e3 the <code>Search Place</code> field to search for cities, towns, villages, and suburbs (The list of places is from the Surveyor General and some more recent locations may not be searchable). You will need to type at least two characters (letters) before the platform will return a list of search results.</p> <p></p> <p>If you know the species you would like to view data for, then you can select the scientific name from 1\ufe0f\u20e3 the <code>Species</code> dropdown list (this example uses Connochaetes taurinus, i.e. the Blue Wildebeest). Once you have selected a species then 2\ufe0f\u20e3 the key showing the intervals in population will be displayed on the map (i.e. a choropleth map), and zooming in on your properties will let you see which interval they fall into based off of their colour.</p> <p></p> <p>If you would like to filter the data by organisation(s), you can use 1\ufe0f\u20e3 the <code>Organisation</code> dropdown list to select the organisation(s) for which you would like to view data.</p> <p></p> <p>If your property/properties had been previously created, you can use 1\ufe0f\u20e3 the <code>Property</code> dropdown list to select the property/properties for which you would like to view data.</p> <p></p> <p>If you would like to filter data by year, you can enter in 1\ufe0f\u20e3 the <code>Year Field</code> to view data for that specific year.</p> <p></p> <p>When you click on 1\ufe0f\u20e3 the <code>Activity</code> dropdown, you will be able to choose from a list of activities that can occur on properties that are specified during the data upload process, or you can select all of the activities using the <code>Select All</code> option. Selecting different combinations of options will change the intervals shown on the interval key.</p> <p></p>"},{"location":"user/guide/explore/#applying-the-spatial-filters","title":"Applying the Spatial Filters","text":"<p>There are two types of spatial filters on the platform, the <code>Critical Biodiversity Areas</code> and the <code>Ecosystems</code>. When you apply the spatial filters, whichever of your properties do not intersect the desired sub-section of either of the spatial layers will not be displayed. For example if you choose the Tsakane Clay Grassland as the <code>Ecosystem</code> filter, then all of your properties that do not overlap that ecosystem type will not appear on the map.</p> <p>If none of the <code>Critical Biodiversity Areas</code> filters are selected, then all of the example properties are displayed.</p> <p></p> <p>However, if only the <code>Ecological Support Area 1</code> filter is selected, then only those properties displayed that intersect Ecological Support Area 1.</p> <p></p> <p>If none of the <code>Critical Biodiversity Areas</code> filters are selected, but you select an <code>Ecosystem</code> filter that your properties do not intersect, then none of your properties will be visible.</p> <p></p> <p>Unless you choose an <code>Ecosystem</code> filter that intersects your properties.</p> <p></p>"},{"location":"user/guide/explore/#reports","title":"Reports","text":"<p>If you would like reports about different species you will need to navigate to the <code>REPORTS</code> tab of the <code>EXPLORE</code> page. To get there, click on the <code>EXPLORE</code> link in the navigation bar and then click on the <code>REPORTS</code> tab.</p> <p></p> <p>If you navigate directly to the <code>REPORTS</code> tab, having not implemented any filters on the map, you will be greeted by a prompt asking you select a species to begin.</p> <p></p> <p>If you had already been exploring the map and using a species filter (as shown in Using the Filters Panel), then you will see all data on the platform associated with that species (from your active organisation). This example chose Connochaetes taurinus (i.e. the Blue Wildebeest), but you are free to choose whatever species you would like to get a report for.</p> <p></p> <p>Depending on the <code>Report Type</code> option(s) selected, the platform will adapt and automatically update the report to contain the other field types in the displayed table.</p> <p></p> <p>Depending on the <code>Activity</code> type(s) selected, the platform will adapt and automatically update the report to contain the other field types in the displayed table.</p> <p></p> <p>Adjusting the year slider the <code>Year</code> slider, or the year interval using the <code>From</code> and <code>To</code> fields, will also cause the platform to adapt and only display fields that are within the specified time frame.</p> <p></p> <p>Applying any of, or a combination of, the spatial filters ( <code>Critical Biodiversity Areas</code> and/or <code>Ecosystems</code>) will cause the platform to only display records that overlap the desired sub-section of either of the spatial layers. For example if you choose the Critical Biodiversity Area 2 as the <code>Critical Biodiversity Areas</code> filter, then a report of all of your properties that overlap that critical biodiversity area type will appear on the tables.</p> <p></p> <p>You can customise which columns will be displayed in the report by clicking on 1\ufe0f\u20e3 the columns dropdown menu, and then ticking or unticking the various columns you would like to have as part of your report. Keep in mind there are multiple columns so you can scroll up and down on the dropdown menu.</p> <p></p> <p>Once you have customised the report to your preferred specifications, scroll down on the reports page and click on either 1\ufe0f\u20e3 <code>DOWNLOAD DATA</code> to then be prompted to download the data currently displayed as either a CSV or an XLSX file, or 2\ufe0f\u20e3 <code>DOWNLOAD DATA REPORT</code> to download the report as PDF file.</p> <p></p> <p>If you clicked on <code>DOWNLOAD DATA</code>, a small popup menu will be shown where you can choose your preferred format.</p> <p></p> <p>Once you choose your preferred format, you will be prompted to save the file (CSV or XLSX) to your computer.</p> <p></p> <p>After you have saved the file you can then open it using a program that can open CSV or XLSX file (e.g. using Excel).</p> <p></p> <p>If you click on <code>DOWNLOAD DATA REPORT</code>, a popup warning you it may take some time appears.</p> <p></p> <p>After which, you wil be redirected to a new tab in your web browser where you can view the PDF report and the report will be downloaded to your computer.</p> <p></p>"},{"location":"user/guide/explore/#charts","title":"Charts","text":"<p>If you would like to view charts about different species you will need to navigate to the <code>CHARTS</code> tab of the <code>EXPLORE</code> page. To get there, click on the <code>EXPLORE</code> link in the navigation bar and then click on the <code>CHARTS</code> tab.</p> <p></p> <p>On this page, you can view various charts associated with the chosen species here. If you adjust the filters, the charts you see will change and display different information.</p> <p></p> <p></p> <p></p> <p>To download the charts, you can click on 1\ufe0f\u20e3 the <code>DOWNLOAD DATA VISUALISATIONS</code> button. A popup warning you it may take some time appears.</p> <p></p> <p>After that, the PDF file will be downloaded to your system.</p> <p></p>"},{"location":"user/guide/explore/#charts-description","title":"Charts Description","text":"<p>Referring to the description of each chart will provide a clearer understanding.</p>"},{"location":"user/guide/explore/#number-of-properties-per-population-category-count-of-species-for-year-chart","title":"Number of properties per population category (count) of species for year chart","text":"<p>This chart illustrates the distribution of properties across population categories, based on the total population sizes of the selected species for the chosen year. The population is categorised into six groups. Each bar represents the count of properties per population category, categorised by property type.</p> <p></p>"},{"location":"user/guide/explore/#number-of-properties-per-population-category-population-density-of-species-for-year-chart","title":"Number of properties per population category (population density) of species for year chart","text":"<p>This chart illustrates the distribution of properties across population density categories, based on the total population densities of the selected species for the chosen year. Population density is calculated by dividing population size by the available area for the species, which is then grouped into six categories. Each bar represents the count of properties per population density category, categorised by property type.</p> <p></p>"},{"location":"user/guide/explore/#number-of-properties-per-categories-of-area-ha-for-species-for-year-chart","title":"Number of properties per categories of area (ha) for species for year chart","text":"<p>This chart illustrates the distribution of total property size (in hectares) for the chosen year and selected species. The property area is categorised into six groups. Each bar represents the count of properties per property area range, categorised by property type.</p> <p></p>"},{"location":"user/guide/explore/#number-of-properties-per-categories-of-area-ha-available-to-species-for-year-chart","title":"Number of properties per categories of area (ha) available to species for year chart","text":"<p>This chart illustrates the distribution area available to the selected species (in hectares) for the chosen year, which may be a subset of the total size of the property. The area available to species is categorised into six groups. Each bar represents the count of properties per area available to species on the property, categorised by property type.</p> <p></p>"},{"location":"user/guide/explore/#total-count-of-species-per-province-chart","title":"Total count of species per province chart","text":"<p>This chart illustrates the total population size of the selected species per province for the chosen year.</p> <p></p>"},{"location":"user/guide/explore/#activity-count-as-of-total-population-of-species-for-year-chart","title":"Activity count as % of total population of species for year chart","text":"<p>This chart illustrates the proportions of animals for the selected species, expressed as a percentage of the total population, under different activities for the chosen year. The text above each bar expresses the total count per activity for the chosen year. The total population size is assumed to be the net population size after all reported activities have been conducted.</p> <p></p>"},{"location":"user/guide/explore/#total-count-per-population-estimate-category-for-species-for-year-chart","title":"Total count per population estimate category for species for year chart","text":"<p>This chart illustrates the population estimate for the selected species split into the count method used for the chosen year.</p> <p></p>"},{"location":"user/guide/explore/#mean-and-standard-deviation-of-age-classes-for-species-chart","title":"Mean and standard deviation of age classes for species chart","text":"<p>This chart illustrates the mean and standard deviation of population demographics (age and gender) of the selected species and year across properties categorised by property type. Note these data reflect only the properties for which demographic information is available.</p> <p></p>"},{"location":"user/guide/explore/#trends","title":"Trends","text":"<p>If you would like to view trends for different species you will need to navigate to the <code>TRENDS</code> tab of the <code>EXPLORE</code> page. To get there, click on the <code>EXPLORE</code> link in the navigation bar and then click on the <code>TRENDS</code> tab.</p> <p></p> <p>On this page, you can view various trend charts associated with the chosen species here. If you adjust the filters, the charts you see will change and display different information.</p> <p></p> <p></p> <p>To download the trend charts, you can click on 1\ufe0f\u20e3 the <code>DOWNLOAD JSON DOCUMENT</code> button.</p> <p></p> <p>You will then be prompted to save the trends data to your computer.</p> <p></p> <p>Once the file is downloaded, you can open it using a text editor (e.g. Notepad).</p> <p></p>"},{"location":"user/guide/explore/#trends-description","title":"Trends Description","text":"<p>Referring to the description of each trend will provide a clearer understanding.</p>"},{"location":"user/guide/explore/#species-national-population-trend","title":"Species National Population Trend","text":"<p>National population trend.\u00a0The trend in the total population size across all properties (sub-populations) for all years where data are available. The trend for each property was estimated using General Additive Models fitted to raw population estimates, and then the fitted population estimates were aggregated across all properties in South Africa, each year. The shaded area represents the 95% confidence interval for the population trends. \u00a0 Note \u2013 the population estimates are derived from a variety of sampling methods and specific uncertainty bounds (for example, see the Population Estimate Category graph)</p> <p></p>"},{"location":"user/guide/explore/#large-species-populations-chart","title":"Large species populations chart","text":"<p>Percentage of populations that are increasing and decreasing: Large populations \u00a0 The percentage of large populations determined by natural breaks in population size categories in South Africa that are increasing or decreasing in size (rapidly or steadily) over the last 3, 5 and 10 years. The number of populations in each category is shown above each bar. Rates of population change are determined from the General Additive Model population trends fitted to raw population estimates.</p> <p></p>"},{"location":"user/guide/explore/#medium-species-populations-chart","title":"Medium species populations chart","text":"<p>Percentage of populations that are increasing and decreasing: Medium populations \u00a0 The percentage of medium-sized elephant populations (determined by natural breaks in population size categories) in South Africa that are increasing or decreasing in size (rapidly or steadily) over the last 3, 5 and 10 years. The number of populations in each category is shown above each bar. Rates of population change are determined from the General Additive Model population trends fitted to raw population estimates.</p> <p></p>"},{"location":"user/guide/explore/#small-species-populations-chart","title":"Small species populations chart","text":"<p>Percentage of populations that are increasing and decreasing: Small populations \u00a0 The percentage of small populations determined by natural breaks in population size categories in South Africa that are increasing or decreasing in size (rapidly or steadily) over the last 3, 5 and 10 years. The number of populations in each category is shown above each bar. Rates of population change are determined from the General Additive Model population trends fitted to raw population estimates.</p> <p></p>"},{"location":"user/guide/explore/#total-area-vs-area-available-to-species-chart","title":"Total area vs area available to species chart","text":"<p>The chart illustrates the total area versus the available area for the species.</p> <p></p>"},{"location":"user/guide/explore/#province-population-trend-charts","title":"Province Population Trend Charts","text":"<p>Trend in the total population size across all properties (sub-populations) in the province. The trend for each property was estimated using General Additive Models fitted to raw population estimates, and then the fitted population estimates were aggregated across all properties in the province, each year. Sudden jumps or dips may represent the inclusion of new properties, or translocation of animals out of the province, rather than natural population changes. The total number of properties for each time period can be checked in other graphs. The shaded area represents the 95% confidence interval for the population trends.</p> <p>Note: the population estimates are derived from a variety of sampling methods and specific uncertainty bounds (for example, see the Population Estimate Category graph)</p> <p></p>"},{"location":"user/guide/explore/#trends-by-property","title":"Trends by property","text":"<p>The trend in the total population size for the property is based on a General Additive Model fitted to raw population estimates (raw data shown as dots). Where there were only two estimates a simple log-linear curve was used to connect the two points.</p> <p></p>"},{"location":"user/guide/help/","title":"IDS SAWPS","text":""},{"location":"user/guide/help/#help-and-contact","title":"Help and Contact","text":"<p>The help and contact pages are there to ensure that you, as a user, can be assisted with utilising the platform effectively.</p>"},{"location":"user/guide/help/#what-do-i-do-if-i-need-help","title":"What do I do if I need help?","text":"<p>Once logged in, navigate to the <code>HELP</code> button on the navigation bar. This will redirect you to the help page of the platform. Here you will see 1\ufe0f\u20e3 the help desk system that displays some of the documentation. If you would like to view the full documentation site you can click on 2\ufe0f\u20e3 <code>Visit our Documentation</code> or you can click on 3\ufe0f\u20e3 the <code>CONTACT US</code> button to be redirected to the <code>Contact Us</code> page.</p> <p></p>"},{"location":"user/guide/help/#how-do-i-make-contact-with-the-sawps-team","title":"How do I make contact with the SAWPS team?","text":"<p>Navigate to the <code>CONTACT</code> button on the <code>Home</code> page (or the <code>CONTACT US</code> button from the <code>Help</code> page) and fill out the prompted information so the team can get back to you.</p> <p></p>"},{"location":"user/guide/help/#what-do-i-do-if-i-forgot-my-password","title":"What do I do if I forgot my password?","text":"<p>On the <code>Login</code> page, click the <code>Forgot Password</code> option.</p> <p></p> <p>You will be directed to the following page where you can enter the email address associated with your SAWPS account and click the <code>RESET PASSWORD</code> button.</p> <p></p> <p>Once you have clicked this button an email containing reset instructions will be sent to you and the following screen will be visible.</p> <p></p> <p>Once in your email inbox, open the email and you can click the <code>PASSWORD RESET</code> button to be redirected to the SAWPS platform.</p> <p></p> <p>After you are redirected to the platform, you will now be able to set a new password to access your account. Once you have entered your new password, click on the <code>Reset Password</code> button.</p> <p></p> <p>You will be notified when your password has successfully been reset. You can now login with your new password.</p> <p></p>"},{"location":"user/guide/organisations/","title":"IDS SAWPS","text":""},{"location":"user/guide/organisations/#organisation-page","title":"Organisation page","text":"<p>Every organisation can manage their organisation members via this page. The organisation page allows for the viewing of organisation members, inviting new members to the organisation (provided the user has the necessary permissions), deleting organisation members (provided the user has the necessary permissions), and searching to see if a member exists within an organisation.</p> <p>When the user clicks the dropdown icon 1\ufe0f\u20e3 next to their username and profile picture, a dropdown menu will appear. If a user clicks on the organisation under current organisation 2\ufe0f\u20e3, the page will redirect to that Organisation's page.</p> <p></p>"},{"location":"user/guide/organisations/#organisation-members","title":"Organisation members","text":"<p>On the Organisation's page a user can see 1\ufe0f\u20e3 the organisation name which indicates to the user the current organisation they are viewing. To add new members, a user (with necessary permissions) can click on the <code>Add People</code> button 2\ufe0f\u20e3 which will open a popup (example below) where a new member's information can be added. Underneath the Members heading 3\ufe0f\u20e3, a user can use the search box 4\ufe0f\u20e3 to find specific members within the organisation. Users can decided how many rows per page they would like to see by adjusting the rows per page 5\ufe0f\u20e3 (fewer rows displayed can be useful on smaller devices). A user can see which page of members they are on or click on the navigation links 6\ufe0f\u20e3 to change between pages. On the Invitations table 7\ufe0f\u20e3, a user can see the members that have been invited to the organisation and if the user has a status role, they can see if a new user has joined the organisation or not in the status column 8\ufe0f\u20e3.</p> <p></p> <p>The Add People popup contains an <code>Email address</code> field 1\ufe0f\u20e3 that the inviter needs to populate with the email address for the individual they wish to invite to the organisation. The inviter also needs to specify if the individual they\u2019re inviting will have a manager or member role within the organisation using the <code>Invite as</code> field 2\ufe0f\u20e3. To finalise adding a new member, an inviting user needs to click on the <code>Invite</code> button 3\ufe0f\u20e3 to send the invitation to the individual being invited to the organisation.</p> <p></p> <p>A success message will show if the email has been sent.</p> <p></p> <p>In the Invitation Email received by the individual being invited to an organisation, they should click on the <code>Register</code> button 1\ufe0f\u20e3 to be redirected to the website to complete their registration.</p> <p></p> <p>Once redirected to the registration page, the user needs to fill in the form. Once the registration is complete and the user clicks on the <code>Register</code> button, they will then be able to login and see their new organisation under accessible organisations.</p> <p></p> <ul> <li>If the user is a new member on platform, they will be taken through the normal registration and added to the organisation.</li> <li>If the user is already registered on platform, they will just be registered on to the organisation they're being invited.</li> </ul>"},{"location":"user/guide/organisations/#request-an-organisation","title":"Request an organisation","text":"<p>When a user on the platform wishes to either have an organisation, or be added to one, they can request for one to be created or to be added to an existing one. The SANBI administrator will review the request and if they approve of it, they will create the organisation for the user, or add them to an existing organisation, and then notify them via email.</p> <p>To request to be added to an organisation, or have one created, a user needs to click on the profile menu dropdown and then click on the <code>Request Organisation</code> button 1\ufe0f\u20e3.</p> <p></p> <p>When the <code>Request Organisation</code> button is clicked, a popup window is will appear. On the popup, a user can specify the name/s of the organisation they wish to have created in <code>Organisation Name</code> field 1\ufe0f\u20e3 and add message providing a description of the organisation, etc. in the <code>Message to administrator</code> field 2\ufe0f\u20e3. Once the user has filled in the relevant fields, they can then click on the <code>Send</code> button 3\ufe0f\u20e3.</p> <p></p> <p>A confirmation will be returned to the user to let them know their invitation has been sent.</p> <p></p> <p>After these steps have been completed, the user will need to wait to receive feedback from the SANBI administrator.</p>"},{"location":"user/guide/organisations/#switch-active-organisation","title":"Switch active organisation","text":"<p>If you are part of multiple organisations, you can switch which organisation is your active one. To do so, navigate to 1\ufe0f\u20e3 the profile dropdown menu in the navigation bar and then click on 2\ufe0f\u20e3 the <code>My Profile</code> link to be redirected to your profile.</p> <p></p> <p>Once on your profile, navigate to 1\ufe0f\u20e3 the organisations tab and then click on 2\ufe0f\u20e3 the <code>SET ACTIVE</code> button next to whichever organisation you would like to choose as your active organisation (i.e. the organisation that you will upload species data to).</p> <p></p>"},{"location":"user/guide/profile-setup/","title":"IDS SAWPS","text":""},{"location":"user/guide/profile-setup/#profile-setup","title":"Profile setup","text":"<p>The documentation herein, describes how to customise your profile as needed and to adjust other profile related settings.</p>"},{"location":"user/guide/profile-setup/#getting-to-the-profile-page","title":"Getting to the profile page","text":"<p>Click on the profile navigation menu 1\ufe0f\u20e3, and then click on <code>My Profile</code> 2\ufe0f\u20e3 to be redirected to your profile page.</p> <p></p>"},{"location":"user/guide/profile-setup/#updating-your-information","title":"Updating your information","text":"<p>On your profile page, in the <code>PROFILE</code> tab you will be able to update your information.</p> <p></p> <p>Once you have made changes, you can click on 1\ufe0f\u20e3 the <code>UPDATE</code> button to save your changes.</p> <p></p>"},{"location":"user/guide/profile-setup/#reminders-page","title":"Reminders page","text":"<p>The Reminders feature has a multiple functions including allowing an organisation to set a reminder for everyone within the organisation, a user to set a personal reminder, a reminder to be edited (to change its state from active, draft and passed or altering other details etc.), a reminder to be deleted, and to send the reminder via email while also notifying the user via the platform.</p> <p>Other functionalities on the Reminders Page are the ability to search for specific reminders, to filter reminders, and pagination. Organisations can view all reminders set by users who have the permissions to create reminders for all members of that specific organisation. Users are capable of viewing personal reminders.</p> <p>Under the profile section, there is a reminders tab 1\ufe0f\u20e3 which when clicked renders the reminders page. To add a reminder, a user needs to click on the <code>Add Reminder</code> button 2\ufe0f\u20e3 to open the form (example below) to populate for the reminder they intend to create. A user can type keywords in the search box 3\ufe0f\u20e3 to filter the reminder and the title columns. By changing the filter 4\ufe0f\u20e3, a user is able to refine the search to only return reminders containing the keywords specifically provided by the filter selected. Clicking on any reminder 5\ufe0f\u20e3 will cause a popup window (example below) for editing the reminder to appear. When a user clicks on the <code>Delete</code> button 6\ufe0f\u20e3, the delete reminder popup will appear (example below). The user is able to choose the number of notifications they prefer to see on a page by changing the number here 7\ufe0f\u20e3 (The minimum is 5). In the bottom right, a user is able to see the current page they're own and, to navigate to previous and next pages using the navigation links 8\ufe0f\u20e3.</p> <p></p> <p>On the Add Reminder reminder form the user can see the title 1\ufe0f\u20e3. They should set the date and time 2\ufe0f\u20e3 that the reminder should appear and then they should provide a description in the reminder field 3\ufe0f\u20e3. After adding a description, the user should add the reminder type 4\ufe0f\u20e3 and based on their user role within that specific organisation they can specify if the reminder is for all organisation members or it's a personal reminder. Finally the user should click on the <code>Add</code> button 5\ufe0f\u20e3 to create the reminder.</p> <p></p> <p>In the Edit Reminder popup window the user can change the reminder title 1\ufe0f\u20e3 and by changing the date and time 2\ufe0f\u20e3 the user can change when the reminder is scheduled. The user can then edit the description in the reminder field 3\ufe0f\u20e3 and change the reminder type 4\ufe0f\u20e3 and based on their user role within that specific organisation. The user is able to change the reminder status 5\ufe0f\u20e3: if it is set to active the reminder is still scheduled, if it is set to draft the reminder is on pause, and if it is set to passed the reminder will be moved to the notifications section but no email will be sent. When a user is finished making changes they can click on the <code>Save</code> button 6\ufe0f\u20e3 to save the changes made to the reminder.</p> <p></p> <p>The Delete Reminder popup is opened when a user clicks on the <code>Delete</code> button and prompts the user if they are sure of the actions they wish to take. The user will see the Delete Confirmation title 1\ufe0f\u20e3, and then they can choose to click on the <code>Delete</code> or <code>Cancel</code> buttons 2\ufe0f\u20e3 depending on their intentions with the reminder.</p> <p></p> <ul> <li>The user can delete their reminders.</li> <li>Organisation Managers can delete organisation reminders.</li> </ul>"},{"location":"user/guide/profile-setup/#notifications","title":"Notifications","text":"<p>The notifications feature allows for the user to receive push notifications of the reminders they have set via the platform. When a notification comes in, a small bell icon 1\ufe0f\u20e3 appears on the user profile icon. A link for notifications 2\ufe0f\u20e3 becomes available in profile dropdown menu, this allows for the user to view the notifications from any page on the system. Clicking on the notification will lead the user to the notifications page where they can review more details about the notifications. On the profile pages a small notification badge 3\ufe0f\u20e3 appears showing the number of notifications the user has.</p> <p></p> <p>Under the profile section, a notifications tab 1\ufe0f\u20e3 is available. When the tab is clicked, the notification page appears. On the notifications page, users can search for specific notifications entering keywords for the notification and the title columns into the search box 2\ufe0f\u20e3. By clicking on the Filter box 3\ufe0f\u20e3, a user can refine the search to only return notifications containing the providing keywords specifically by the filter selected. Clicking on any notification 4\ufe0f\u20e3 will cause the popup with the notification's information to appear (example of popup below). When a user clicks on the <code>Delete</code> button 5\ufe0f\u20e3, a popup appears asking a user to confirm the deletion (example below). The user is able to choose the number of notifications they prefer to see on a page by changing the number here 6\ufe0f\u20e3 (The minimum is 5). In the bottom right, a user is able to see the current page they're own and, to navigate to previous and next pages using the navigation links 7\ufe0f\u20e3.</p> <p></p> <p>Example: popup with the notification's information</p> <p></p> <p>Example: Delete notification popup</p> <p>A user will see a Delete Confirmation title 1\ufe0f\u20e3 explaining what the popup is. On the popup, user can decide to click on the <code>Delete</code> button 2\ufe0f\u20e3 to delete the reminder or click on the <code>Cancel</code> button to abort deletion.</p> <p></p> <p>Note: A user can delete their notifications and Organisation Managers can delete organisation notifications.</p>"},{"location":"user/guide/profile-setup/#two-factor-authentication-settings","title":"Two factor authentication settings","text":"<p>The Two factor authentication page handles the user\u2019s two factor authentication settings. The settings include:</p> <ul> <li>Backup tokens</li> <li>Two factor authentication devices</li> </ul> <p>Navigate to the 2FA tab 1\ufe0f\u20e3 under the profile page. This dropdown menu 2\ufe0f\u20e3 shows the current 2FA method that the user utilises to log on to the platform. Clicking this button 3\ufe0f\u20e3 will open a popup window, requiring the user to enter a new device's details before saving. This is the table 4\ufe0f\u20e3 that shows the current 2FA devices that the user utilises to log on to the platform. Clicking the <code>Delete Button</code> 5\ufe0f\u20e3 will open a popup window confirming that the user is sure that they want to remove the device before proceeding to removing it. Under the Recovery Options header 6\ufe0f\u20e3, there is a list of the backup tokens the user can use to log on to the platform in case they have lost their device. The <code>Generate backup tokens</code> button 7\ufe0f\u20e3 allows a user to to refresh their backup tokens as well as create new ones when they've just registered onto the platform.</p> <p></p>"},{"location":"user/guide/profile-setup/#adding-new-device","title":"Adding new device","text":"<p>When a user clicks on <code>Add Device</code>, a popup window appears. The popup contains the Device Name label 1\ufe0f\u20e3, which indicates the value that is required in the field below it, and the <code>Add button</code> 2\ufe0f\u20e3, which when clicked will save the new device.</p> <p></p> <p>Once the <code>Add button</code> has been clicked, the popup will change to display a QR Image Code Label 1\ufe0f\u20e3 ,indicating the success result when the device is added, and the QR Code 2\ufe0f\u20e3, which the user should scan with the authenticator app of their choice on their new device.</p> <p></p>"},{"location":"user/guide/profile-setup/#deleting-a-device","title":"Deleting a device","text":"<p>The <code>Cancel</code> button 1\ufe0f\u20e3 will prevent the device from being removed (This is in case the user isn't sure or clicked the icon by accident). The <code>Delete</code> button 2\ufe0f\u20e3 will remove the device from the platform meaning the user will no longer be able to login using that device.</p> <p></p>"},{"location":"user/guide/profile-setup/#organisation-settings","title":"Organisation settings","text":"<p>In the <code>ORGANISATIONS</code> tab, you can apply for a new organisation or can switch your active organisation.</p>"},{"location":"user/guide/profile-setup/#joining-a-new-organisation","title":"Joining a new organisation","text":"<p>If you didn't apply to be in an organisation when you registered, you can still apply to be added to one or have an organisation created. Navigate to the <code>ORGANISATIONS</code> tab on the <code>Profile Configuration</code> page. Then click on the <code>+REQUEST ORGANISATION</code> button, this will cause a popup to appear.</p> <p></p> <p>In the pop up, you need to fill in the name of the organisation that you would like to be added to (or have created for you) and a message to the administrator with any additional information you think is necessary. Once you have filled in everything, click on the <code>SEND</code> button.</p> <p></p> <p>This will send your request to the admin team for verification.</p> <p></p>"},{"location":"user/guide/profile-setup/#switching-organisations","title":"Switching organisations","text":"<p>If you are part of multiple organisations, you can switch which organisation is your active one. To do so, navigate to 1\ufe0f\u20e3 the profile dropdown menu in the navigation bar and then click on 2\ufe0f\u20e3 the <code>My Profile</code> link to be redirected to your profile.</p> <p></p> <p>Once on your profile, navigate to 1\ufe0f\u20e3 the organisations tab and then click on 2\ufe0f\u20e3 the <code>SET ACTIVE</code> button next to whichever organisation you would like to choose as your active organisation (i.e. the organisation that you will upload species data to).</p> <p></p>"},{"location":"user/guide/registering/","title":"IDS SAWPS","text":""},{"location":"user/guide/registering/#registration-and-logging-in","title":"Registration and Logging In","text":"<p>This document will take you through various workflows associated with registering on the platform and, in turn, logging in.</p>"},{"location":"user/guide/registering/#how-do-i-register-on-the-site","title":"How do I register on the site?","text":"<p>Navigate to the <code>REGISTER</code> button on the home page and fill in your details in the space provided.</p> <p></p> <p>You will be redirected to the registration page where you will be prompted to fill in some information. Namely; your first name, Last name (surname), Email address you'd like associated with your account, and the password you will use to log in to the platform. Once you have filled in all of the information click on the <code>REGISTER</code> button at the bottom of the registration window.</p> <p>Hint: Read the descriptor beneath the password fields to ensure you have a strong password for security reasons, or use a password manages to generate a password of 14 characters.</p> <p></p> <p>A popup will appear letting you know that a verification email will then be sent to the address you have provided.</p> <p></p> <p>Login to your email account and click on the green <code>VERIFICATION LINK</code> button attached in the mail.</p> <p></p> <p>This will redirect you to a profile configuration page.</p> <p></p> <p>This step will require you to download and install a token generator, such as the Google Authenticator from the Google Play store. You can install the token generator on your preferred device (i.e. cellphone, laptop, etc.)</p> <p></p> <p>You will use this app to scan the QR code and input the token generated. Keep in mind that for security purposes, you will have 30-60 seconds to type in the generated code before a new one is generated.</p> <p></p> <p>Once you type in the OTP (one time pin) successfully, you be logged in and will, once again, be redirected to <code>Profile Configuration</code> page. Here you can click on the <code>GENERATE BACKUP TOKENS</code> button to generate <code>Two-Factor Recovery Tokens</code> for your account.</p> <p></p> <p>You can use these in future to login to your profile. Additional devices can also be added as needed.</p> <p></p> <p>The next step is to request to be added to the \u2018Organisation\u2019 in which you belong. Navigate to the <code>ORGANISATIONS</code> tab on the <code>Profile Configuration</code> page. Then click on the <code>+REQUEST ORGANISATION</code> button, this will cause a popup to appear.</p> <p></p> <p>In the pop up, you need to fill in the name of the organisation that you would like to be added to (or have created for you) and a message to the administrator with any additional information you think is necessary. Once you have filled in everything, click on the <code>SEND</code> button.</p> <p></p> <p>This will send your request to the admin team for verification.</p> <p></p>"},{"location":"user/guide/registering/#how-do-i-register-when-added-by-an-organisation","title":"How do I register when added by an Organisation?","text":"<p>Follow the link emailed to you by clicking on the <code>REGISTER</code> button. This will redirect you to the SAWPS site.</p> <p></p> <p>This will redirect you to the SAWPS site where you can click on the \u2018REGISTER\u2019 button and fill in the requested information. After which you should follow the same steps as for registering</p> <p></p>"},{"location":"user/guide/registering/#how-do-i-login","title":"How do I login?","text":"<p>Navigate to the home page of the platform and click on either of the two <code>LOGIN</code> buttons.</p> <p></p> <p>You will then be redirected to the Login page. Fill in the email address you used for registration and your password. Then click on <code>LOGIN</code>.</p> <p></p> <p>You will then be prompted for your Two-Factor Authentication OTP code. Enter the code from your relevant authenticator app (e.g. Google Authenticator), and click on <code>AUTHENTICATE</code>.</p> <p></p> <p>You will then be redirected back to the logged in landing page, from there you can navigate around the platform.</p> <p></p>"},{"location":"user/guide/registering/#how-do-i-logout","title":"How do I logout?","text":"<p>Click the <code>LOGOUT</code> button on the top right of the screen.</p> <p></p>"},{"location":"user/manual/","title":"IDS SAWPS","text":""},{"location":"user/manual/#user-manual","title":"User manual","text":"<p>Welcome to the SAWPS user manual. This section of the documentation describes every page in the application and what the various components of that page do. The manual is intended to function as a reference for the application. For narrative/workflow based tutorials, you may prefer to work through our user guide. Here is a brief overview of the content provided here:</p> <ul> <li>Landing Page: This page describes the landing page of the platform.</li> <li>Login and Logout: This section of the documentation explains the login, logout, and forgot password pages.</li> <li>Register: This documentation explains the various pages associated with registration.</li> <li>About Page: This page explains the <code>About</code> page of the platform.</li> <li>Explore: These pages explain the explore page and its subsections.</li> <li>Upload Data: This documentation describes the various pages associated with the data upload functionality.</li> <li>Help and Contact: This section describes the help and contact pages.</li> <li>User Profile: These pages of documentation explain the various subpages of the user profile.</li> <li>User Roles: This page breaks down the various user roles of the platform.</li> </ul>"},{"location":"user/manual/about/","title":"IDS SAWPS","text":""},{"location":"user/manual/about/#about-sawps","title":"About SAWPS","text":"<p>Welcome to the <code>About</code> page of the <code>South African Wildlife Population System (SAWPS)</code>. This page provides the user with essential information about the platform, its purpose, and how to make the most of the user's experience here.</p>"},{"location":"user/manual/about/#about-page","title":"About Page","text":"<ol> <li> <p>About: In the navigation bar at the top of the page, a user will find the <code>ABOUT</code> navigation link to navigate about page.</p> </li> <li> <p>SAWPS Video Guide: A quick start video guide to using the <code>SAWPS</code> system. This video walks the user through the key features and functionalities of the platform, making it easier for the user to navigate and utilise the system effectively.</p> </li> <li> <p>Description: Brief description of the <code>SAWPS</code> platform.</p> </li> <li> <p>Biodiversity Advisor: The user can explore the <code>SANBI Biodiversity Adviser</code> site by clicking on the link.</p> </li> <li> <p>Site Core Features: Description of the core features of the site.</p> </li> </ol> <p>Now that the user has a better understanding of SAWPS and its features, it is time for the user to embark on a data exploration journey. Whether the user is interested in the latest population trends, contributing their own data, or simply learning more about South Africa's wildlife, SAWPS is here to facilitate the user.</p> <p>Thank you for choosing SAWPS as the platform for exploring and contributing to South African wildlife population data.</p>"},{"location":"user/manual/help-contact/","title":"IDS SAWPS","text":""},{"location":"user/manual/help-contact/#help-and-contact","title":"Help and Contact","text":"<p>The Help and Contact pages are valuable resources designed to assist users in navigating and understanding the application. This documentation explains the available features on the two pages.</p>"},{"location":"user/manual/help-contact/#help-page-overview","title":"Help page overview","text":"<ol> <li> <p>The Help Button: Locate the <code>HELP</code> button within the application's user interface, typically found in the navigation menu, this will redirect the user to the Help Page.</p> </li> <li> <p>Available Document links:  These documentation links serve as valuable resources, providing users with comprehensive information and guidance on navigating and utilising various aspects of the site. Whether users are seeking assistance with specific features or gaining a deeper understanding of the platform's capabilities, the available documentation links offer a convenient pathway to enhance their overall experience and proficiency while interacting with the site.</p> </li> <li> <p>Visit Our Documentation: To enhance your experience and maximise the utility of our platform, we encourage you to explore our comprehensive documentation. \"Visit Our Documentation\" provides a gateway to a wealth of resources aimed at guiding users through the site's features and functionalities. Whether you are a new user seeking a step-by-step guide or an experienced user looking for advanced tips and tricks, our documentation is tailored to cater to a diverse range of needs. Dive into detailed tutorials, troubleshooting guides, and informative articles to make the most out of your interaction with our platform. We believe that by visiting our documentation, you'll unlock the full potential of the site and discover efficient ways to achieve your goals.</p> <p></p> </li> <li> <p>Contact Us: Connect with SANBI through the dedicated contact page by clicking on the <code>Contact Us</code> button. SANBI welcomes user's inquiries and looks forward to assisting users.</p> </li> </ol>"},{"location":"user/manual/help-contact/#contact-page","title":"Contact Page","text":"<p>The Contact Page serves as a means for users to get in touch with different organisations or platforms. Users can use this page to send messages, inquiries, or feedback. This documentation provides an overview of the fields and features available on the Contact Page.</p>"},{"location":"user/manual/help-contact/#contact-form","title":"Contact Form","text":"<p>The Contact Page features a user-friendly contact form where users can provide their information and messages. The key components of the contact form are:</p> <p></p> <ol> <li> <p>Name: Users are required to enter their name in this field.  It is where they should input their full name or a name by which they want to be addressed.</p> </li> <li> <p>Email: This field is for users to provide their email address. It is important for the platform needs to have a way to reach out to users, so this is a required field.</p> </li> <li> <p>Subject: Users can specify the subject or topic of their message in this field. It helps categorise and route messages appropriately.</p> </li> <li> <p>Message: Users can compose their message or inquiry in this text box.  It is where they can provide detailed information or ask questions.</p> </li> <li> <p>Send me a copy (Checkbox): Users have the option to check this box if they want to receive a copy of the message they are sending to their own email address. This can be useful for reference.</p> </li> <li> <p>Send Button: After filling in the required information and composing their message, users can click the <code>SEND</code> button to submit their message. This initiates the process of sending the message to the organisation.</p> </li> </ol>"},{"location":"user/manual/help-contact/#summary","title":"Summary","text":"<p>The Contact Page offers a straightforward and user-friendly contact form for users to get in touch. Users can provide their name, email address, specify the subject, and compose their message. Additionally, there is an option to request a copy of the message they are sending. The <code>SEND</code> button is used to send the message to the platform. This page is an essential communication channel for users to connect with the organisation.</p>"},{"location":"user/manual/landing-page/","title":"IDS SAWPS","text":""},{"location":"user/manual/landing-page/#landing-page","title":"Landing Page","text":"<p>Welcome to the SAWPS <code>Landing Page</code>. The landing page is the entry point to users' data exploration journey. The <code>Landing Page</code> provides a user-friendly interface to view aggregated species population data trends for South Africa and access features like log in, register a new account, or learn more about the platform.</p>"},{"location":"user/manual/landing-page/#prior-to-login","title":"Prior to Login","text":"<p>Upon initial interaction with the platform, users will be greeted by the landing page.</p>"},{"location":"user/manual/landing-page/#landing-page-header-and-navigation-bar","title":"Landing Page Header and Navigation Bar","text":"<p>In the navigation bar at the top of the page, users will find several options:</p> <ol> <li> <p>About: The <code>ABOUT</code> navigation link navigates to the about page.</p> </li> <li> <p>Help: The <code>HELP</code> navigation link provides access to the help page and support resources.</p> </li> <li> <p>Contact:  The <code>CONTACT</code> navigation link navigates to the contact page where the SAWPS team is ready to assist with any inquiries or issues.</p> </li> <li> <p>Login: The <code>LOGIN</code> button opens the login form for registered users.</p> </li> <li> <p>Register: The <code>REGISTER</code> button opens the registration form where users can register for access to the full platform.</p> </li> <li> <p>About: The <code>ABOUT</code> button navigates to the about page.</p> </li> <li> <p>Login: The <code>LOGIN</code> button navigates to the login form where registered users can securely access the platform using their credentials.</p> </li> <li> <p>Register: The <code>REGISTER</code> button navigates to the registration form where new users can register on the platform. Becoming a registered user opens up a world of data contribution and exploration.</p> </li> </ol>"},{"location":"user/manual/landing-page/#national-population-trends","title":"National Population Trends","text":"<p>On the <code>Landing Page</code>, users can view interactive charts that display national population trends. The charts provide valuable insights into demographic changes and trends over time.</p> <p></p> <ol> <li> <p>Icon: Representative image of the species.</p> </li> <li> <p>Scientific Name: Scientific name of the species.</p> </li> <li> <p>Chart: Chart showing the population trend for the species over time.</p> </li> <li> <p>HOME: The <code>HOME</code> link to return to the main landing page.</p> </li> <li> <p>DOCUMENTATION: The <code>DOCUMENTATION</code> link navigates the user to the SAWPS documentation site in a new tab.</p> </li> <li> <p>CONTACT: The <code>CONTACT</code> link navigates to the contact page where a user can use the contact form to ask any questions or wish to provide feedback to the SAWPS support team.</p> </li> </ol>"},{"location":"user/manual/landing-page/#additional-resources-and-pages","title":"Additional Resources and Pages","text":"<p>The footer section, located at the bottom of the <code>Landing Page</code>, offers links to additional resources and pages:</p> <ol> <li> <p>SANBI Logo: By clicking on the <code>SANBI LOGO</code>, users will be redirected to the <code>SANBI (South African National Biodiversity Institute)</code> platform. The South African National Biodiversity Institute (SANBI) contributes to South Africa\u2019s sustainable development by facilitating access to biodiversity data, generating information and knowledge, building capacity, providing policy advice, showcasing and conserving biodiversity in its national botanical and zoological gardens.</p> <p>SANBI</p> <p></p> </li> <li> <p>IDS Logo: By clicking on the <code>IDS LOGO</code>, users will be redirected to the <code>IDS (Information Decision Systems)</code> platform. Information Decision Systems (IDS) is a progressive Geographical Information Systems, Environmental Consulting and Disaster Management service provider.</p> <p>IDS</p> <p></p> </li> <li> <p>KARTOZA Logo: By clicking on the <code>KARTOZA LOGO</code>, users will be redirected to the <code>KARTOZA</code> platform. Kartoza is a South Africa-based Free and Open Source GIS service provider. Kartoza develop and maintain geographic information systems and train teams to use geospatial software to its full potential.</p> <p>KARTOZA</p> <p></p> </li> </ol>"},{"location":"user/manual/landing-page/#landing-page-once-logged-in","title":"Landing Page Once Logged In","text":"<p>Once the user has logged in to the SAWPS platform the landing page updates. In the header, there are new navigation links to features of the site that users with credentials have access to, their user profile, and the Quick links provide access to site features that users will need frequently.</p> <p></p>"},{"location":"user/manual/landing-page/#navigation-bar","title":"Navigation Bar","text":"<p>The navigation bar at the top of the <code>Landing Page</code> offers convenient access to key sections and actions within the SAWPS platform. It includes the following elements:</p> <ol> <li> <p>About: The <code>ABOUT</code> navigation link navigates to the about page.</p> </li> <li> <p>Explore: The <code>EXPLORE</code> link navigates to the explore page, where users can delve into the data and perform analyses.</p> </li> <li> <p>Upload Data: The <code>UPLOAD DATA</code> link navigates to the upload data page, where the user can start the data upload process.</p> </li> <li> <p>Help: The <code>HELP</code> link navigates to the help system and documentation built into the site.</p> </li> <li> <p>Contact: The <code>CONTACT</code> link navigates to the contact page where users can reach out to the SAWPS support team.</p> </li> <li> <p>Profile Name and Icon: Users can access their user profile by clicking on <code>MY PROFILE.</code> Here, users can customise their settings and view their user information, including their profile image.</p> </li> <li> <p>Logout: The <code>LOGOUT</code> button allows users to securely log out of their account when they are done using the platform.</p> </li> <li> <p>About: The <code>ABOUT</code> button serves as a link to the about page for the platform and its objectives.</p> </li> <li> <p>Explore: Clicking <code>EXPLORE</code> will take users directly to the explore page, where they can view, manipulate, and analyse their datasets with various tools and filters.</p> </li> <li> <p>Upload Data: Clicking <code>UPLOAD DATA</code> will take users to the data upload process.</p> </li> </ol>"},{"location":"user/manual/landing-page/#national-population-trends_1","title":"National Population Trends","text":"<ol> <li> <p>Image: Image of the species.</p> </li> <li> <p>Scientific Name: Scientific name of the species.</p> </li> <li> <p>Chart: Chart showing the data of the species over the year.</p> </li> <li> <p>Home: The <code>HOME</code> link returns users to the main <code>Landing Page</code>, providing an easy way to start their journey on the platform.</p> </li> <li> <p>EXPLORE: The <code>EXPLORE</code> link navigates the user to the explore page.</p> </li> <li> <p>Documentation: Click <code>DOCUMENTATION</code> to access comprehensive documentation, like this page you are viewing, which provides detailed information on various aspects of the platform.</p> </li> <li> <p>Contact: If users need to get in touch with the team for any reason, the <code>CONTACT</code> link provides access to the support and communication channels.</p> </li> </ol>"},{"location":"user/manual/landing-page/#additional-resources-and-pages_1","title":"Additional Resources and Pages","text":"<p>The footer section, located at the bottom of the <code>Landing Page</code>, offers links to additional resources and pages:</p> <ol> <li> <p>SANBI Logo: By clicking on the <code>SANBI LOGO</code>, users will navigate to the <code>SANBI (South African National Biodiversity Institute)</code> platform. The South African National Biodiversity Institute (SANBI) contributes to South Africa\u2019s sustainable development by facilitating access to biodiversity data, generating information and knowledge, building capacity, providing policy advice, showcasing and conserving biodiversity in its national botanical and zoological gardens.</p> <p>SANBI</p> <p></p> </li> <li> <p>IDS Logo: By clicking on the <code>IDS LOGO</code>, users will navigate to the <code>IDS (Information Decision Systems)</code> platform. Information Decision Systems (IDS) is a progressive Geographical Information Systems, Environmental Consulting and Disaster Management service provider.</p> <p>IDS</p> <p></p> </li> <li> <p>KARTOZA Logo: By clicking on the <code>KARTOZA LOGO</code>, users will navigate to the <code>KARTOZA</code> platform. Kartoza is a South Africa-based Free and Open Source GIS service provider. Kartoza develop and maintain geographic information systems and train teams to use geospatial software to its full potential.</p> <p>KARTOZA</p> <p></p> </li> </ol>"},{"location":"user/manual/landing-page/#summary","title":"Summary","text":"<p>The enhanced <code>Landing Page</code> is the starting point for data exploration and interaction. With easy access to national population trends, a user-friendly interface, and convenient navigation options, users can seamlessly embark on their data journey and explore demographic insights while enjoying comprehensive support.</p>"},{"location":"user/manual/user-roles/","title":"IDS SAWPS","text":""},{"location":"user/manual/user-roles/#user-roles-documentation","title":"User Roles Documentation","text":""},{"location":"user/manual/user-roles/#user-roles","title":"User Roles","text":"<ol> <li> <p>Unnamed user: A user on the internet who is not registered with the site.</p> <p></p> <ul> <li>Full access: The unnamed user has full access to login, register, about, contact, and help page. Unnamed users can access the documentation site.</li> </ul> </li> <li> <p>Floating user: A registered user without an organisation who needs to request an addition to an organisation.</p> <p></p> <ul> <li>Full access: The floating user has full access to login, register, about, contact, profile, notification, reminders, two-factor authentication and help page. Floating users can access the documentation site.</li> </ul> </li> <li> <p>Organisation member: A user who is registered on the site and part of an organisation.</p> <p></p> <ul> <li> <p>Full access: The organisation member has full access to login, register, about, contact, profile, notification, reminders, two-factor authentication, help, data upload, property upload, and species upload page. Organisation members can access the documentation site.</p> </li> <li> <p>Access with conditions: The organisation member can access the following pages with conditions.</p> <ol> <li> <p>Organisation member page: Cannot add people to organisation.</p> </li> <li> <p>Explore page map tab: Can see their organisation properties and information on the map.</p> </li> <li> <p>Explore page reports tab: Can see data tables with information about properties for their organisation.</p> </li> <li> <p>Explore page charts tab: Can see data charts with information about properties for their organisation.</p> </li> <li> <p>Automated reporting: Only for their organisation.</p> </li> <li> <p>Download CSV of data from the filtered table: Can only download reports for their organisation.</p> </li> <li> <p>Download charts image: Can only download charts for their organisation.</p> </li> </ol> </li> </ul> </li> <li> <p>Organisation manager: A user who is registered on the site and part of an organisation that can add other members to the site.</p> <p></p> <ul> <li> <p>Full access: The organisation manager has full access to login, register, about, contact, profile, notification, reminders, two-factor authentication, help, data upload, property upload, and species upload page. Organisation managers can access the documentation site.</p> </li> <li> <p>Access with conditions: The organisation manager can access the following pages with conditions.</p> <ol> <li> <p>Organisation member page: Cannot add people to organisation.</p> </li> <li> <p>Explore page map tab: Can see their organisation properties and information on the map.</p> </li> <li> <p>Explore page reports tab: Can see data tables with information about properties for their organisation.</p> </li> <li> <p>Explore page charts tab: Can see data charts with information about properties for their organisation.</p> </li> <li> <p>Automated reporting: Only for their organisation.</p> </li> <li> <p>Download CSV of data from the filtered table: Can only download reports for their organisation.</p> </li> <li> <p>Download charts image: Can only download charts for their organisation.</p> </li> </ol> </li> </ul> </li> <li> <p>Provincial data consumer: A decision-maker type user who has access to the site to consume aggregate data about the region but not property specific information.</p> <p></p> <ul> <li> <p>Full access: The provincial data consumer has full access to login, register, about, contact, profile, notification, reminders, two-factor authentication, and help page. Provincial data consumers can access the documentation site.</p> </li> <li> <p>Access with conditions: The provincial data consumer can access the following pages with conditions.</p> <ol> <li> <p>Organisation member page: Can only add organisation members if instated as a manager of an organisation/ their own organisation.</p> </li> <li> <p>Explore page map tab: Can see mapped aggregate data at a regional scale i.e. provincial, e.g. number of properties per region, number of species per region, number of activities per region.</p> </li> <li> <p>Explore page reports tab: Can see data tables with aggregate data at a regional scale i.e. provincial, e.g. number of properties per region, number of species per region, and number of activities per region.</p> </li> <li> <p>Explore page charts tab: Can see data charts with aggregate data at a regional scale i.e. provincial, e.g. number of properties per region, number of species per region, and number of activities per region.</p> </li> <li> <p>Automated reporting: Only aggregate data for the region.</p> </li> <li> <p>Download CSV of data from the filtered table: Can only download aggregate reports data for their region.</p> </li> <li> <p>Download charts image: Can only download aggregate chart data for their region.</p> </li> </ol> </li> </ul> </li> <li> <p>National data consumer: A national decision-maker-type user who has access to the site to consume aggregate data about the region but not property-specific information.</p> <p></p> <ul> <li> <p>Full access: The national data consumer has full access to login, register, about, contact, profile, notification, reminders, two-factor authentication, and help page. National data consumers can access the documentation site.</p> </li> <li> <p>Access with conditions: The national data consumer can access the following pages with conditions.</p> <ol> <li> <p>Organisation member page: Can only add organisation members if instated as a manager of an organisation/ their own organisation.</p> </li> <li> <p>Explore page map tab: Can see mapped aggregate data at a South African scale i.e. provincial, e.g. number of properties for South Africa, number of species for South Africa, number of activities for South Africa.</p> </li> <li> <p>Explore page reports tab: Can see data tables with aggregate data at a national scale i.e. provincial, e.g. number of properties in South Africa, number of species in South Africa, number of activities in South Africa.</p> </li> <li> <p>Explore page charts tab: Can see data charts with aggregate data at a national scale i.e. provincial, e.g. number of properties in South Africa, number of species in South Africa, number of activities in South Africa.</p> </li> <li> <p>Automated reporting: Only aggregate data for South Africa.</p> </li> <li> <p>Download CSV of data from the filtered table: Can only download aggregate reports data for South Africa.</p> </li> <li> <p>Download charts image: Can only download aggregate chart data for South Africa.</p> </li> </ol> </li> </ul> </li> <li> <p>Provincial data scientist: A provincial data reviewer who can view data down to the property level and use the data for e.g. planning and permitting.</p> <p></p> <ul> <li> <p>Full access: The provincial data scientist has full access to login, register, about, contact, profile, notification, reminders, two-factor authentication, and help page. Provincial data scientists can access the documentation site.</p> </li> <li> <p>Access with conditions: The provincial data scientist can access the following pages with conditions.</p> <ol> <li> <p>Organisation member page: Can only add organisation members if instated as a manager of an organisation/ their own organisation.</p> </li> <li> <p>Explore page map tab: Can see all data on the map at property level for their region and filter by organisation, year and species etc.</p> </li> <li> <p>Explore page reports tab: Can see all data on the SAWPS platform for all properties to property level, and can filter by organisation, property and species at a regional scale.</p> </li> <li> <p>Explore page charts tab: Can see all data on the SAWPS platform for all properties to property level, and can filter by organisation, property and species at a regional scale.</p> </li> <li> <p>Data upload: Can upload property and species data if they are part of an organisation. Additionally, in the user role as a data scientist, they retain the ability to view data from other organisations.</p> </li> <li> <p>Automated reporting: All types of reports are available for regions as per filters applied by the user.</p> </li> <li> <p>Download CSV of data from the filtered table: Can download all types of reports available for regions as per filters applied by the user.</p> </li> <li> <p>Download charts image: Can download all types of charts available for regions as per filters applied by the user.</p> </li> </ol> </li> </ul> </li> <li> <p>National data scientist: A national data reviewer who can view data down to the property level and use the data for e.g. planning and permitting.</p> <p></p> <ul> <li> <p>Full access: The national data scientist has full access to login, register, about, contact, profile, notification, reminders, two-factor authentication, and help page. National data scientists can access the documentation site.</p> </li> <li> <p>Access with conditions: The national data scientist can access the following pages with conditions.</p> <ol> <li> <p>Organisation member page: Can only add organisation members if instated as a manager of an organisation or their organisation.</p> </li> <li> <p>Explore page map tab: Can see all data on the map at the property level for South Africa and filter by organisation, year, species etc.</p> </li> <li> <p>Explore page reports tab: Can see all data on the SAWPS platform for all properties to property level, and can filter by organisation, property and species for all of South Africa.</p> </li> <li> <p>Explore page charts tab: Can see all data on the SAWPS platform for all properties to property level, and can filter by organisation, property and species for all of South Africa.</p> </li> <li> <p>Data upload: Can upload property and species data if they are part of an organisation. Additionally, in the user role as a data scientist, they retain the ability to view data from other organisations.</p> </li> <li> <p>Automated reporting: All types of reports are available for South Africa as per filters applied by the user.</p> </li> <li> <p>Download CSV of data from the filtered table: Can download all types of reports available for South Africa as per filters applied by the user.</p> </li> <li> <p>Download charts image: Can download all types of charts available for South Africa as per filters applied by the user.</p> </li> </ol> </li> </ul> </li> <li> <p>Site administrator: A SANBI staff member with superuser access to all functionality on the site and the Django admin page.</p> <p></p> <ul> <li>Full access: The site administrator holds a privileged role with full access to all aspects of the website, as well as to the admin panel.</li> </ul> </li> <li> <p>Statistician: A user who has access to the statistics portal and R code.</p> <p></p> <ul> <li> <p>Full access: The statistician has full access to login, register, about, contact, profile, notification, reminders, two-factor authentication, help, organisation member, and explore(map tab) page. Statisticians can access the documentation site.</p> </li> <li> <p>Access with conditions: The statistician can access the reports and charts tabs on the explore page, as well as the data upload, property upload, species upload, and automated reporting pages. They can also download CSV reports and charts if they are part of an organisation.</p> </li> </ul> </li> </ol>"},{"location":"user/manual/user-roles/#assigning-roles","title":"Assigning Roles","text":"<p>This section shows a few methods on how a user can obtain a role.</p> Role Assignment Method Organisation member User makes organisation request, orSite administrator invites a user to an organisation as member. Organisation manager Site administrator invites a user to an organisation as manager. For detailed instruction on adding/inviting organisation manager click here. Invite <code>Organisation Manager</code> to organisation from Organisation Invites Table in Django Admin page. Add <code>Organisation Manager</code> to organisation from Organisation Manager Table in Django Admin page Provincial data consumer Add <code>Provincial data consumer</code> to user group from User Table in Django Admin page. National data consumer Add <code>National data consumer</code> to user group from User Table in Django Admin page. Provincial data scientist Add <code>Provincial data scientist</code> to user group from User Table in Django Admin page. National data scientist Add <code>National data scientist</code> to user group from User Table in Django Admin page. Site administrator Set user as staff and superuser from User Table in Django Admin page  ."},{"location":"user/manual/data-upload/","title":"IDS SAWPS","text":""},{"location":"user/manual/data-upload/#upload-data","title":"Upload Data","text":"<p>This section of the documentation describes the various elements of the upload data page. It consists of:</p> <ul> <li>A Panel Overview: This section is an overview explanation of the upload data panel and functionality.</li> <li>The Online Form: This page explains the online form section of the data upload.</li> <li>Template Upload: This documentation describes the template file for data upload.</li> <li>Update Data: This documentation describes the how the user can update the property and the species data.</li> </ul>"},{"location":"user/manual/data-upload/online-form/","title":"IDS SAWPS","text":""},{"location":"user/manual/data-upload/online-form/#data-upload-online-form-documentation","title":"Data Upload Online Form Documentation","text":""},{"location":"user/manual/data-upload/online-form/#online-form-step-1-species-detail","title":"Online Form Step 1 (Species detail)","text":"<p>The data upload online form provides a convenient and structured way to enter species population data for the user's selected property. This form is designed to capture detailed information about species populations, including scientific names, counts, survey methods, and more. In addition, the form displays an image of the selected property in the top left corner, along with property information.</p> <p>DISCLAIMER: Some of the images in the manual may vary slightly from what you see on the platform due to continuous updates to the platform. On the platform you will see <code>green question mark</code>  buttons in the top right corner (underneath the <code>LOGOUT</code> button), you can click on these to access the help desk.</p>"},{"location":"user/manual/data-upload/online-form/#species-detail","title":"Species detail","text":"<ol> <li> <p>Species detail: First step of data upload online form <code>SPECIES DETAIL</code>.</p> </li> <li> <p>Property detail: Showing property details along with the image.</p> </li> <li> <p>Scientific Name: Select the scientific name of the species from the dropdown menu. This field is mandatory.</p> </li> <li> <p>Common Name (Prefilled): The common name is automatically prefilled based on the scientific name.</p> </li> <li> <p>Year: Enter the year of the population count manually or select it from the calendar icon. This field is mandatory.</p> </li> <li> <p>Survey Method: Choose the survey method used for data collection from the dropdown menu. If <code>Other - please explain</code> is selected, an additional adjacent field will appear, prompting users to specify the method used. This field is mandatory.</p> <p></p> <ol> <li>If other please explain: If the user chooses the option <code>Other - please explain</code> in the survey method dropdown, then this field becomes mandatory. Here, the user can provide specific details and explanations about the survey method they utilised.</li> </ol> </li> <li> <p>Sampling Effort Coverage Dropdown: Select the level of sampling effort coverage from the dropdown menu.</p> </li> <li> <p>Population Estimate Category: Choose the appropriate population estimate category from the dropdown menu. This field is mandatory.</p> </li> <li> <p>Sampling Notes: Add any relevant notes or details about the sampling process.</p> </li> <li> <p>Species Present on Property: Select either <code>Yes</code> or <code>No</code> using the radio buttons to indicate whether the species is present on the property.</p> </li> <li> <p>Population Status: Specify the population status by selecting an option from the dropdown menu.</p> </li> <li> <p>Total Adult: The total number of adult species.</p> </li> <li> <p>Adult Males: Enter the number of adult males for the species.</p> </li> <li> <p>Adult Females: Enter the number of adult females for the species.</p> </li> <li> <p>Total Sub-adult: The total number of sub-adult species.</p> </li> <li> <p>Sub-adult Males: Enter the number of subadult males for the species.</p> </li> <li> <p>Sub-adult Females: Enter the number of subadult females for the species.</p> </li> <li> <p>Total Juvenile: The total number of juvenile species.</p> </li> <li> <p>Juvenile Males: Enter the number of juvenile males for the species.</p> </li> <li> <p>Juvenile Females: Enter the number of juvenile females for the species.</p> </li> <li> <p>Total Count: The total count will be automatically calculated based on the individual counts entered.</p> </li> <li> <p>Area Available to Species: Specify the area available to the species in hectares. This field is mandatory.</p> </li> <li> <p>Number of Groups (Prides, Herds, etc.): Enter the number of groups, prides, herds, or similar groupings.</p> </li> <li> <p>Population Estimate Certainty: Select the certainty level of the population estimate from the dropdown menu. If <code>Other (please describe how the population size estimate was determined)</code> is chosen, an additional adjacent field will appear, asking users to specify the certainty method employed. This field is mandatory.</p> <p></p> <ol> <li>If Other, Please Explain: If the user selects <code>Other (please describe how the population size estimate was determined)</code> in the population estimate certainty dropdown, this field becomes mandatory. Use this space to provide specific details and explanations regarding the method used to determine the population size estimate. This ensures a more detailed and accurate record.</li> </ol> </li> <li> <p>Certainty of Bounds: Provide additional information regarding the certainty of population bounds.</p> </li> <li> <p>Upper Confidence Level: Enter the upper confidence level.</p> </li> <li> <p>Lower Confidence Level: Enter the lower confidence level.</p> </li> <li> <p>SAVE DRAFT: Click on this button to save the current form as a draft, allowing the user to return to it later and continue with data entry.</p> </li> <li> <p>NEXT: Click on this button to proceed to the next step of the data upload process.</p> </li> </ol>"},{"location":"user/manual/data-upload/online-form/#summary","title":"Summary","text":"<p>The data upload online form streamlines the process of entering detailed species population data for the user's selected property. Ensure that mandatory fields are filled in and that the user has provided accurate information before saving the user's draft or moving to the next step in the data upload process.</p>"},{"location":"user/manual/data-upload/online-form/#online-form-step-2-activity-detail","title":"Online Form Step 2 (Activity detail)","text":"<p>The second step introduces the <code>Introduction/Reintroduction</code> and <code>Off-take</code> sections, each with its table and form. These sections allow the user to record important information related to species introduction or reintroduction and off-take data.</p>"},{"location":"user/manual/data-upload/online-form/#activity-detail","title":"Activity Detail","text":"<ol> <li> <p>Activity Detail: Second step of data upload online form <code>ACTIVITY DETAIL</code>.</p> </li> <li> <p>Introduction/Reintroduction: The <code>Introduction/Reintroduction</code> section displays the table and form. table for relevant data in a structured tabular format, and form for entering detailed information related to species introduction or reintroduction.</p> <p>Introduction/Reintroduction Table and Form</p> <p></p> <ol> <li> <p>Introduction/Reintroduction Table: The <code>Introduction/Reintroduction</code> table displays relevant data in a structured tabular format, making it easy to review and manage the user's introduction and reintroduction records.</p> </li> <li> <p>Edit Icon: This icon allows the user to edit the data of the row.</p> </li> <li> <p>Delete Icon: This icon allows the user to delete the data of the row</p> </li> <li> <p>Rows per page: This is a dropdown for choosing the number of rows to display in the table.</p> </li> <li> <p>Adult Males: Enter the count of adult males.</p> </li> <li> <p>Adult Females: Specify the count of adult females.</p> </li> <li> <p>Juvenile Males: Provide the count of juvenile males.</p> </li> <li> <p>Juvenile Females: Record the count of juvenile females.</p> </li> <li> <p>Total Count: The total count field will automatically calculate based on the counts entered for adult males, adult females, juvenile males, and juvenile females.</p> </li> <li> <p>Founder Population: Indicate whether the introduced or reintroduced group is considered a founder population. Use the radio buttons to select <code>Yes</code> or <code>No</code>. This is mandatory.</p> </li> <li> <p>Event: Select the appropriate event type from the dropdown menu. Choose the event category that best describes the introduction or reintroduction process. This field is mandatory.</p> </li> <li> <p>Source: Describe the source of the introduced or reintroduced population. This field is mandatory.</p> </li> <li> <p>Permit Number: Enter the permit number.</p> </li> <li> <p>Notes: Include any additional notes or comments relevant to the introduction or reintroduction event.</p> </li> <li> <p>Add: Click on the <code>ADD</code> button to save the information entered into the form. This action will record the introduction or reintroduction event with the specified details.</p> </li> </ol> </li> <li> <p>Off-take: The <code>Off-take</code> section displays the table and form. The table provides a clear overview of the user's off-take data, and form for input data related to species off-take.</p> <p>Off-take Table and Form</p> <p></p> <ol> <li> <p>Off-take Table: The <code>Off-take</code> table displays relevant data in a structured tabular format, making it easy to review and manage the user's Off-take records.</p> </li> <li> <p>Off-take Form: The <code>Off-take</code> is the same as the <code>Introduction/Reintroduction</code>. Enter the information related to off-take and add it by clicking on the <code>ADD</code> button.</p> </li> </ol> </li> <li> <p>Save Draft: Use the <code>SAVE DRAFT</code> button to save the user's progress and store the data that the user has entered in the forms. This allows the user to return to the user's work at a later time.</p> </li> <li> <p>Back: The <code>BACK</code> button enables the user to go back to the previous step if the user needs to review or edit data from Step 1.</p> </li> <li> <p>Next: Click <code>NEXT</code> to advance to the next step in the data upload process.</p> </li> </ol>"},{"location":"user/manual/data-upload/online-form/#summary_1","title":"Summary","text":"<p>Step 2 of the data upload online form introduces the <code>Introduction/Reintroduction</code> and <code>Off-take</code> sections, each comprising a table and a form for data entry. These sections are critical for recording and managing information related to species introduction or reintroduction and off-take. The provided navigation buttons, including <code>SAVE DRAFT</code>, <code>BACK</code>, and <code>NEXT</code>, give the user control over the user's data entry process and progression through the data management steps.</p>"},{"location":"user/manual/data-upload/online-form/#online-form-step-3-review-submit","title":"Online Form Step 3 (Review &amp; Submit)","text":""},{"location":"user/manual/data-upload/online-form/#overview","title":"Overview","text":"<p>Step 3, <code>Review &amp; Submit</code>, is the final stage of the data management process, where the user has the opportunity to review and confirm the details that they have entered. This step provides an overview of species and activity details, as well as introduction/reintroduction and off-take data. It ensures that the information the user has provided is accurate and complete before final submission.</p>"},{"location":"user/manual/data-upload/online-form/#review-submit","title":"Review &amp; Submit","text":"<ol> <li> <p>Species Detail: The <code>Species Detail</code> section displays a summary of the species-specific information the user has entered, providing an overview of species counts and other relevant details.</p> </li> <li> <p>Edit Note Icon: For editing the species detail, simply click on the <code>Edit Note</code> icon to access and modify the species-related information.</p> </li> <li> <p>Activity Detail: The <code>Activity Detail</code> section provides a summary of the activity-related information the user has entered, giving the user an overview of the activity's attributes and data.</p> </li> <li> <p>Edit Note Icon: For editing the activity detail, simply click on the <code>Edit Note</code> icon to access and modify the activity-related information.</p> </li> <li> <p>Introduction/Reintroduction Table: The <code>Introduction/Reintroduction Table</code> displays a tabular view of data related to species introduction or reintroduction events, including counts and details of the introduction process.</p> </li> <li> <p>Off-take Table: The <code>Off-take Table</code> provides a tabular view of the user's off-take data, summarising details related to the removal of species from the property.</p> </li> <li> <p>Save Draft: Use the <code>SAVE DRAFT</code> button to save the user's progress and store the data the user has entered in the forms. This allows the user to return to the user's work at a later time.</p> </li> <li> <p>Back: The <code>BACK</code> button enables the user to go back to the previous step if the user needs to review or edit data from Step 2.</p> </li> <li> <p>Next: Click <code>NEXT</code> to advance to the next step in the data upload process.</p> </li> </ol>"},{"location":"user/manual/data-upload/online-form/#summary_2","title":"Summary","text":"<p>Step 3, <code>Review &amp; Submit</code>, offers a comprehensive overview of the user's data before final submission. Users can review species details, activity details, and introduction/reintroduction and off-take data. The <code>Edit Note</code> icons allow the user to make any necessary changes. This step ensures that the user's data is accurate and complete, providing confidence in the user's final submission.</p>"},{"location":"user/manual/data-upload/panel/","title":"IDS SAWPS","text":""},{"location":"user/manual/data-upload/panel/#data-upload-page-documentation","title":"Data Upload Page Documentation","text":"<p>The Data Upload Page is a key component for managing and uploading user data. This page provides an intuitive interface for adding new data and customising the user's view. It also includes a map with interactive features to help the user visualise spatial data.</p> <p>DISCLAIMER: Some of the images in the manual may vary slightly from what you see on the platform due to continuous updates to the platform. On the platform you will see <code>green question mark</code>  buttons in the top right corner (underneath the <code>LOGOUT</code> button), you can click on these to access the help desk.</p>"},{"location":"user/manual/data-upload/panel/#data-upload","title":"Data upload","text":"<ol> <li> <p>Search area: The central feature of the Data Upload Page is the data search area, where the user can search for specific areas within South Africa This search field allows the user to enter keywords or details related to places within South Africa, or the user's records, to locate specific areas.</p> </li> <li> <p>Select Property: The Property Selection dropdown is a vital tool for categorising the user's data. Users can choose from existing properties to then associate data with a specific property. This helps organise and categorise users' records effectively.</p> </li> <li> <p>Create a new property: If the property that the user wants to associate their data with does not exist in the dropdown, the user can create a new property. Click on the <code>CREATE A NEW PROPERTY</code> button to add a new property category. Users will be prompted to enter a name and details for the new property, and it will be added to the dropdown for future use.</p> </li> </ol>"},{"location":"user/manual/data-upload/panel/#interactive-map","title":"Interactive Map","text":"<p>On the Data Upload Page, the user will find an interactive map that allows the user to visualise spatial data. In the bottom left corner of the map, there are buttons that provide several options:</p>"},{"location":"user/manual/data-upload/panel/#map-visualisation","title":"Map Visualisation","text":"<ol> <li> <p>Zoom In: Click on the plus (+) sign to zoom in on the map for a closer view of specific areas.</p> </li> <li> <p>Zoom Out: Click on the minus (-) sign to zoom out and get a broader view of the map.</p> </li> <li> <p>3D Toggle: Click on the (3D) icon to toggle between the three-dimensional (3D) and two-dimensional (2D) visualisations. Toggling this icon allows the user to alternate between three-dimensional and two-dimensional representations of the visual content.</p> </li> <li> <p>Dark/Light Mode: Toggle between a dark and light mode by clicking on the moon and sun icons. This feature provides visual comfort based on the user's preference.</p> </li> <li> <p>Print: Click on the print icon to generate a printable version of the map for the user's records or to share with others.</p> </li> </ol> <p>The map enhances the user's ability to work with spatial data and provides valuable insights into the geographical aspects of the user's records.</p>"},{"location":"user/manual/data-upload/panel/#summary","title":"Summary","text":"<p>The Data Upload Page is an essential tool for managing the user's data, allowing the user to input new records, categorise them with properties, and visualise spatial data using the interactive map. Whether the user is adding new information or searching for existing records, this page provides a user-friendly experience to help the user effectively handle their data.</p>"},{"location":"user/manual/data-upload/panel/#step-1","title":"Step 1","text":"<p>The Data Table Page serves as the central hub for viewing and interacting with the user's data. This comprehensive platform offers various features to help the user explore, analyse, and manipulate the user's dataset. To get started, the user will need to upload data, and the first step in this process involves providing property information using the Property Information Form.</p>"},{"location":"user/manual/data-upload/panel/#property-information-form","title":"Property Information Form","text":"<p>The Property Information Form is the initial stage of data upload. It's designed to capture essential details about the property being added to the dataset. Here is a breakdown of the form fields:</p> <ol> <li> <p>Step 1: First step of data upload.</p> </li> <li> <p>Property Name: Enter the name of the property in the <code>Property Name</code> input field.</p> </li> <li> <p>Owner Name: The <code>Owner Name</code> field is pre-filled with the default owner name.</p> </li> <li> <p>Owner Email: Similar to the owner name, the <code>Owner Email</code> field is pre-filled with the default owner email.</p> </li> <li> <p>Open/Close System: Select the open or close system for the property from the dropdown menu. This choice reflects the accessibility status of the property.</p> </li> <li> <p>Property Type: Choose the property type from the <code>Property Type</code> dropdown menu. This classification helps categorize the property.</p> </li> <li> <p>Organisation: The <code>Organisation</code> displays the name of the organisation.</p> </li> <li> <p>SAVE PROPERTY INFORMATION: Once the user has filled in all the necessary details, they can click the <code>SAVE PROPERTY INFORMATION</code> button to store this information and proceed with the data upload process.</p> </li> </ol> <p>The map enhances the user's ability to work with spatial data and provides valuable insights into the geographical aspects of the user's records.</p> <p>By completing the <code>Property Information Form</code>, the user establishes a foundational record for the property in the dataset, which is essential for effective data management and analysis.</p> <p>This step ensures that the user's data is organised and ready for further processing within the data upload.</p>"},{"location":"user/manual/data-upload/panel/#step-2","title":"Step 2","text":"<p>The second step of the data upload process on the Data upload involves working with Parcel ID and Parcel Type. This stage is crucial for adding detailed information related to parcels within the property.</p>"},{"location":"user/manual/data-upload/panel/#parcel-details","title":"Parcel Details","text":"<ol> <li> <p>Step 2: Step 2 of data upload.</p> </li> <li> <p>Message: Utilise this feature to establish your property boundary. Options include selecting cadastral parcels that form the property, manually digitising the boundary using the provided tools, or uploading a boundary file associated with your property. Choose the method that best suits your preference for defining the property boundary.</p> </li> <li> <p>SELECT: The <code>SELECT</code> button allows the user to choose specific parcels from the map.</p> </li> <li> <p>DIGITISE: Clicking the <code>DIGITISE</code> button initiates the process of mapping parcel boundaries. This step is essential for geospatial data.</p> </li> <li> <p>UPLOAD: The <code>UPLOAD</code> is used for creating parcel boundaries using the supported formats: zip, json, geojson, gpkg, kml (CRS 4326).</p> </li> <li> <p>SAVE PROPERTY INFORMATION: If the user needs to update or modify the property information, the user can click the <code>SAVE PROPERTY INFORMATION</code> button to make changes to the property-level information.</p> </li> </ol> <p>Completing Step 2 ensures that the user's dataset is comprehensive and includes detailed information about individual parcels within the property. This data is essential for various analyses and property management tasks.</p>"},{"location":"user/manual/data-upload/panel/#select-the-parcel-using-the-select-button","title":"Select the parcel using the select button","text":"<ol> <li> <p>Select parcel: Zoom in the map until parcels are visible, once the user can see the parcels they can select parcels.</p> </li> <li> <p>Cancel: Users can cancel the selection of the parcel using this button.</p> <p></p> <ol> <li> <p>Parcel ID The <code>Parcel ID</code> displayed in the side panel corresponds to the selected parcel.</p> </li> <li> <p>Delete Icon: The user can delete a particular parcel by clicking on the <code>Delete</code> icon. This will remove that parcel.</p> </li> <li> <p>CLEAR BOUNDARY: The user can clear all the selected boundaries by clicking on the <code>CLEAR BOUNDARY</code> button this will remove all the selected boundaries from the map.</p> </li> <li> <p>SAVE BOUNDARY: Click on the <code>SAVE BOUNDARY</code> button to save the boundaries. Once the user has chosen the boundary, this button will become clickable. The selected parcel ID and its type will then be visible to the user.</p> </li> </ol> </li> </ol>"},{"location":"user/manual/data-upload/panel/#select-the-parcel-using-the-digitise-button","title":"Select the parcel using the digitise button","text":"<p>The <code>DIGITISE</code> button is a powerful tool that allows the user to digitise parcel boundaries. When the user clicks the <code>DIGITISE</code> button, they will see a set of options on the left top of the map, giving the user full control over the digitisation process. These options are essential for mapping out parcel boundaries accurately.</p>"},{"location":"user/manual/data-upload/panel/#digitisation-options","title":"Digitisation Options","text":"<ol> <li> <p>Digitise: By clicking on the <code>DIGITISE</code>  button, the user will see a set of options on the left top of the map to digitise the boundaries.</p> </li> <li> <p>Polygon tool: By clicking on the <code>Polygon tool Icon</code> the user can choose a specific area on the map. This selection is used to outline the boundaries of the parcel that the user digitising.</p> </li> <li> <p>Delete Icon: The <code>Delete Icon</code> is for removing or deleting any selected area that the user no longer needs. This option allows the user to make adjustments as they digitise.</p> </li> <li> <p>Save Icon: Click on the <code>Save Icon</code> to save the selected area as a digitised parcel boundary. This is a critical step to preserve the boundaries the user has defined.</p> <p></p> <ol> <li> <p>Parent Parcel ID The <code>Parent Parcel ID</code> displayed in the side panel corresponds to the selected parent parcel.</p> </li> <li> <p>Other Parcel ID The <code>Other Parcel ID</code> displayed in the side panel corresponds to the other selected parcel. For example, if the user manually selects a portion of another parcel using digitisation, the parcel ID will also be shown in the side panel.</p> </li> </ol> </li> <li> <p>Cross Icon: The <code>Cross Icon</code> is used to cancel or discard any digitisation progress if the user needs to start over or abandon the current selection.</p> </li> <li> <p>Digitised parcel: Digitised parcel is shown.</p> </li> <li> <p>Save boundary: After the user has successfully digitised and outlined the parcel boundary using the above options, they can finalise the process by clicking the <code>SAVE BOUNDARY</code> button. This saves the digitised boundary and incorporates it into the user's property data.</p> </li> </ol> <p>By utilising the digitisation options, the user can accurately define parcel boundaries, which is essential for geospatial data and mapping applications. This tool provides the user with the flexibility to create precise boundaries and make adjustments as needed during the digitisation process.</p>"},{"location":"user/manual/data-upload/panel/#upload-parcel-using-the-upload-data-button","title":"Upload parcel using the upload data button","text":"<p>The <code>UPLOAD</code> button is a pivotal element of the <code>DATA UPLOAD</code>, allowing the user to upload essential data for parcel boundaries. By clicking this button, the user initiates the data upload process, which includes defining parcel boundaries and saving them. Here is a step-by-step explanation of this feature:</p> <p>Disclaimer: If users upload any geometry type that is not polygon, or multi-polygon, (e.g. line, multi-line, etc.) the site will process for a while and then return an error message. Users should ensure that their data is a polygon, or multi-polygon, and not another geometry type.</p>"},{"location":"user/manual/data-upload/panel/#uploading-data","title":"Uploading Data","text":"<ol> <li>Upload: Clicking on the <code>UPLOAD</code> button will open a popup window, providing the user with options for uploading data.</li> </ol> <p>The popup window includes the following components:</p> <ol> <li> <p>File Selector: Clicking on the <code>Browse</code> button and allows the user to select the file(s) they want to upload. Supported formats include zip, json, geojson, gpkg, kml (CRS 4326). These files typically contain geospatial data, and the user will use them to define parcel boundaries. Alternatively, users can just drag and drop files from their computer into the green box to begin uploading them.</p> </li> <li> <p>Uploaded Files: This shows a list of the user's uploaded file(s).</p> </li> <li> <p>Upload Files: After the user has selected the appropriate files, they can click on the <code>Upload Files</code> button to begin the data upload process. This action will upload and process the selected data.</p> </li> <li> <p>Cancel: If the user decides not to proceed with the data upload, they can click on the <code>Cancel</code> button to close the popup window.</p> </li> </ol>"},{"location":"user/manual/data-upload/panel/#processing-uploaded-data","title":"Processing Uploaded Data","text":"<ol> <li> <p>Uploaded Files: This shows a list of the user's uploaded file(s).</p> </li> <li> <p>Processing Files: The <code>UPLOAD FILES</code> button gets greyed out and displays <code>PROCESSING FILES</code> while the files are being processed.</p> </li> </ol>"},{"location":"user/manual/data-upload/panel/#upload-messages","title":"Upload Messages","text":"<ol> <li> <p>Success Message: If users have uploaded data that is in the correct CRS (EPSG:4326), is of the polygon/multi-polygon geometry type, and doesn't overlap another user's properties then they will see a success message at the top of the upload popup window.</p> <p></p> </li> <li> <p>Failure Message: If users upload data with an incorrect CRS, an incorrect geometry type, or another issue, they will receive an error message.</p> <p>Incorrect CRS: </p> <p>Incorrect Geometry type: </p> </li> </ol> <p>The <code>DATA UPLOAD</code> feature is crucial for geospatial data and mapping applications, ensuring the users data is accurate and complete.</p>"},{"location":"user/manual/data-upload/panel/#after-selecting-the-parcel","title":"After selecting the parcel","text":"<ol> <li> <p>Parcel ID: The Parcel ID is a unique identifier for each parcel within the property.</p> </li> <li> <p>Parcel Type: Parcel Type categorises the parcels based on their purpose or characteristics.</p> </li> <li> <p>Delete icon: This delete icon allows the user to delete a particular parcel detail.</p> </li> </ol>"},{"location":"user/manual/data-upload/panel/#step-3","title":"Step 3","text":"<p>Step 3 of the data upload process is a crucial phase that allows the user to upload species population data. In this step, the user will find two buttons for uploading their data, along with an option to download a template for the user's convenience. Additionally, there is a button to update property boundaries, which leads the user to Step 2 where they can make property boundary modifications.</p>"},{"location":"user/manual/data-upload/panel/#data-upload-step-3","title":"Data Upload Step 3","text":"<ol> <li> <p>Step 3: Step 3 of data upload.</p> </li> <li> <p>Online Form: Clicking on the <code>ONLINE FORM</code> button allows users to access the online data upload form. This option is ideal for manually entering data into a user-friendly interface. Following the provided prompts lets users input species population data.</p> <p></p> </li> </ol> <p>Click here to see the detailed documentation for the online form.</p> <ol> <li> <p>Download Template: Clicking on the <code>DOWNLOAD TEMPLATE</code> button allows users to obtain a blank template that they can use as a starting point for entering their species population data. This template is designed to assist the user in organising their data correctly.</p> </li> <li> <p>Upload Template: Using the <code>UPLOAD DATA</code> button lets users upload a pre-prepared template containing species population data. Templates are useful for bulk data uploads or when the user has data formatted in a specific way. Ensure the user's template adheres to the required format and guidelines for a successful upload.</p> <p></p> </li> </ol> <p>Click here to see the detailed documentation of the template upload.</p> <ol> <li> <p>Update Property Boundary: By clicking the <code>UPDATE PROPERTY BOUNDARY</code> button, the user will be redirected to Step 2 of the data upload process. In this step, the user can modify property boundaries.</p> </li> <li> <p>Property Information Display: A section is provided on this page to display information about the property. This information is for reference and provides details about the property related to the data that the user is uploading.</p> </li> <li> <p>Selected property: The property is highlighted on the map to make it easy for the user to pinpoint the area.</p> </li> </ol>"},{"location":"user/manual/data-upload/panel/#summary_1","title":"Summary","text":"<p>Step 3 of the data upload process provides multiple options for uploading species population data, allowing flexibility in how the user inputs their information. Users can choose between an online form or uploading a prepared template. Additionally, the availability of a downloadable template simplifies data organisation. If needed, the user can update property boundaries by clicking the dedicated button, which takes the user to Step 2 where they can make the necessary adjustments while visually identifying the selected property on the map.</p>"},{"location":"user/manual/data-upload/template-upload/","title":"IDS SAWPS","text":""},{"location":"user/manual/data-upload/template-upload/#template-upload-documentation","title":"Template upload Documentation","text":"<p>The data upload feature enables the user to seamlessly upload their data for analysis and integration into the system. When the user clicks on the <code>DATA UPLOAD</code> option, an upload data popup window will appear, providing the user with easy-to-use tools for uploading their data. The supported file formats for upload are CSV and XLSX.</p> <p>DISCLAIMER: Some of the images in the manual may vary slightly from what you see on the platform due to continuous updates to the platform. On the platform you will see <code>green question mark</code>  buttons in the top right corner (underneath the <code>LOGOUT</code> button), you can click on these to access the help desk.</p>"},{"location":"user/manual/data-upload/template-upload/#uploading-data","title":"Uploading Data","text":"<ol> <li> <p>Download Template: Click on the <code>DOWNLOAD TEMPLATE</code> button to obtain a blank template that the user can use as a starting point for entering the user's species population data. This template is designed to assist the user in organising the user's data correctly.</p> </li> <li> <p>Upload data: Click on the <code>UPLOAD DATA</code> button, and the upload data popup window will appear, providing the user with easy-to-use tools for uploading the user's data.</p> </li> <li> <p>Browse Button: Click on the <code>Browse</code> button to select the file that the user wishes to upload. A user can choose a file from the user's local storage that is in either CSV or XLSX format. This file should contain the data the user wants to integrate into the system for further analysis.</p> </li> <li> <p>Upload File Button: After selecting the file, click on the <code>UPLOAD FILE</code> button to begin the data upload process. The system will validate and process the data, making it available for the user to use.</p> </li> <li> <p>Close Button: If the user decides not to proceed with the upload or wishes to cancel the operation, the user can click on the <code>CLOSE</code> button. This will close the upload popup without initiating the data upload process.</p> </li> </ol>"},{"location":"user/manual/data-upload/template-upload/#update-data","title":"Update data","text":"<ol> <li>Success Message: The users can update species data through the data upload feature. To initiate an update, simply upload the same file containing the revised data. The system will process the upload, and upon completion, the data will be successfully updated. This streamlined process ensures an efficient and straightforward method for keeping species information current.</li> </ol>"},{"location":"user/manual/data-upload/template-upload/#error","title":"Error","text":"<ol> <li>Error Message: The error message provides details about the specific issue encountered during the data upload using either the CSV or XLSX file. This message is designed to offer clear and precise information about any errors that may occur, aiding users in identifying and addressing issues effectively.</li> </ol>"},{"location":"user/manual/data-upload/template-upload/#summary","title":"Summary","text":"<p>The data upload feature provides a user-friendly way to integrate the user's data into the system. With support for popular file formats like CSV and XLSX, the user can easily upload their data for further analysis and exploration. The <code>Browse</code> button allows the user to select their data file, the <code>UPLOAD</code> button initiates the upload process, and the <code>CLOSE</code> button enables the user to exit the upload popup if needed.</p>"},{"location":"user/manual/data-upload/update-data/","title":"IDS SAWPS","text":""},{"location":"user/manual/data-upload/update-data/#user-manual-updating-propertyspecies-data","title":"User Manual Updating Property/Species Data","text":"<ol> <li> <p>Upload Data: Click on the <code>Upload Data</code> option available in the navigation to navigate to the upload data page.</p> </li> <li> <p>Search Property: The user can use the search property dropdown to locate the property they want to edit. Alternatively, they can directly type the property name for quicker access. Click on the property name to go to the upload page, where the user can view or update property details.</p> </li> </ol>"},{"location":"user/manual/data-upload/update-data/#step-1-tab","title":"Step 1 Tab","text":"<p>Click on the <code>Step 1</code> tab to update property details.</p> <p>The user can update the property name, open/close system, and property type here. After updating the desired fields, click on the <code>SAVE PROPERTY INFORMATION</code> button to save the changes.</p> <p>Property details before update.</p> <p></p> <p>Property details after update.</p> <p></p>"},{"location":"user/manual/data-upload/update-data/#step-2-tab","title":"Step 2 Tab","text":"<p>Click on the <code>Step 2</code> tab to update property boundaries. The highlighted boundary visible on the map represents the existing property boundary. To modify the boundary, users can utilise the <code>SELECT</code> and <code>DIGITISE</code> buttons.</p> <ol> <li> <p>Delete Icon: If the user wants to delete the existing boundaries and add a new boundary they can delete the existing boundary parcel by clicking on the delete icon available with the parcel details or can keep it if do not want to delete the existing boundary.</p> </li> <li> <p>SELECT: Click the <code>SELECT</code> button to choose and update the property boundary by adding a new parcel from the map. After selecting, click on the <code>SAVE BOUNDARY</code> button to save the selected boundary.</p> </li> </ol> <p>Property boundary while selecting new parcels for the property boundary update.</p> <p></p> <p>Property boundary after adding new parcels.</p> <p></p> <ol> <li> <p>DIGITISE: Click the <code>DIGITISE</code> button to manually digitise and update the boundary on the map.</p> <p></p> <ol> <li> <p>Polygon Tool Icon Click on this icon to select the boundary manually on the map. The selected boundary will be visible on the map.</p> </li> <li> <p>Save Icon After selecting, click on the <code>SAVE</code> icon at the top left corner of the map to save the digitise boundary. After saving the digitise boundary refresh the page the user will see the new digitise boundaries.</p> <p></p> <ol> <li> <p>Blue Boundary: The <code>Blue</code> boundary displays the manually digitised boundary.</p> </li> <li> <p>Red Boundary: The <code>Red</code> boundary indicates the digitised boundary selected from specific parcels.</p> </li> <li> <p>Farm ID The selected farm's <code>Farm ID</code> can be used to verify whether the user has chosen the correct farm portion.</p> </li> </ol> </li> </ol> </li> <li> <p>CLEAR BOUNDARY: Click on this button to clear all boundaries, then use <code>SELECT</code> or <code>DIGITISE</code> to add the property boundary.</p> </li> </ol>"},{"location":"user/manual/data-upload/update-data/#step-3-tab","title":"Step 3 Tab","text":"<p>Click on the Step 3 tab to update species details.</p> <p></p> <ol> <li> <p>Upload Data: Use the upload data method to update existing species data. If the user does not have the template, download it by clicking on the <code>DOWNLOAD TEMPLATE</code> button. Fill in the data in the downloaded template, ensuring the property ID matches the property ID you want to update. Upon clicking the <code>UPLOAD DATA</code> button, the upload data popup window will appear, providing the user with easy-to-use tools for uploading the user's data.</p> <p></p> <ol> <li> <p>Browse Button: Click on the Browse button to select the file that the user wishes to upload. A user can choose a file from the user's local storage that is in either CSV or XLSX format. This file should contain the data the user wants to integrate into the system for further analysis.</p> </li> <li> <p>Upload File Button: After selecting the file, click on the <code>UPLOAD FILE</code> button to begin the data upload process. The system will validate and process the data, making it available for the user to use. If there is any error in the uploaded file the system will generate the error file.</p> <p></p> <ol> <li> <p>ERROR FILE: Click on this button to download the error file. In this file, the user will find the error message indicating the root cause of the issue, facilitating an easier resolution of the error. Open the downloaded error file and click on the first column <code>error message</code> to view the error message.</p> <p></p> </li> </ol> </li> <li> <p>Close Button: If the user decides not to proceed with the upload or wishes to cancel the operation, the user can click on the <code>CLOSE</code> button. This will close the upload popup without initiating the data upload process.</p> </li> </ol> </li> </ol> <p>Ensure that the user saves their changes at each step to update property data accurately.</p>"},{"location":"user/manual/explore/","title":"IDS SAWPS","text":""},{"location":"user/manual/explore/#explore-page","title":"Explore Page","text":"<p>This section of documentation describes the various page elements of the Explore page and its sub-pages. It consists of:</p> <ul> <li>Layers: Explains the various components of the layers tab.</li> <li>Filters: Explains the various components of the filter side panel.</li> <li>Map: Explains the various components of the interactive map.</li> <li>Reports: Explains the various components of the reports tab.</li> <li>Charts: Explains the various components of the charts.</li> <li>Trends: Explains the various components of the trends tab.</li> </ul>"},{"location":"user/manual/explore/charts/","title":"IDS SAWPS","text":""},{"location":"user/manual/explore/charts/#charts-page-download-data-visualisation-functionality-documentation","title":"Charts Page: Download Data Visualisation Functionality Documentation","text":"<p>The <code>Charts</code> tab is a powerful tool for visualising data through various charts and graphs. This documentation outlines the functionality of the <code>Download Data Visualisation</code> feature, which allows the user to download the charts presented on the page.</p> <p>DISCLAIMER: Some of the images in the manual may vary slightly from what you see on the platform due to continuous updates to the platform. On the platform you will see <code>green question mark</code>  buttons in the top right corner (underneath the <code>LOGOUT</code> button), you can click on these to access the help desk.</p>"},{"location":"user/manual/explore/charts/#charts-tab","title":"Charts Tab","text":"<ol> <li> <p>Explore: To access the Charts, click on the <code>EXPLORE</code> option in the navigation bar.</p> </li> <li> <p>Charts: Navigate to the <code>CHARTS</code> tab to explore a variety of charts available for data visualisation.</p> </li> <li> <p>Filters: Enhance chart visualisation by utilising the available filters for more precise data representation.</p> </li> <li> <p>Clear All: Click on <code>Clear All</code> to remove all applied filters and reset the chart view. If you click <code>Clear All</code>, you will be required to select an organisation or property (or both) before you can view species.</p> </li> <li> <p>Message: A helpful and informative message prompts users to explore and view charts.</p> </li> </ol>"},{"location":"user/manual/explore/charts/#topper","title":"Topper","text":"<ol> <li> <p>Selected Species: Indicates the currently chosen species.</p> </li> <li> <p>Species Icon: Displays the icon representing the selected species along with its scientific name.</p> </li> <li> <p>Lists: Presents a comprehensive list of the selected species, organisations, properties, and activities. This section provides an overview of the elements currently chosen.</p> </li> <li> <p>DOWNLOAD DATA VISUALISATION: The <code>DOWNLOAD DATA VISUALISATION</code> button serves as a convenient feature, allowing users to download the charts and visualisations presented on the current page. This functionality provides users with the option to retain and share the visualised data for further analysis or documentation.</p> </li> </ol>"},{"location":"user/manual/explore/charts/#charts","title":"Charts","text":""},{"location":"user/manual/explore/charts/#number-of-properties-per-population-category-count-of-species-for-year-chart","title":"Number of properties per population category (count) of species for year chart","text":"<ol> <li> <p>Chart Title: The chart title displays the title of the chart, including the year and common name of the selected species. This provides users with key information about the context and scope of the chart.</p> </li> <li> <p>Tooltip: The tooltip feature provides additional details about each data point on the chart. It specifically shows the property type along with corresponding colors. Users can interact with the chart by clicking on the name of a property type in the Tooltip, enabling them to selectively remove bars from the chart. This interactive functionality allows users to focus on and explore specific property types of their choice within the chart.</p> <p></p> </li> <li> <p>Population count Range: This feature signifies the range of population counts depicted on the chart. It provides users with information about the span of population numbers represented in the visual data.</p> </li> <li> <p>Information Icon: Hover over the information icon to access details about the chart.</p> </li> <li> <p>Download Icon: Click the download icon to save the currently displayed chart.</p> <p></p> </li> <li> <p>Bars: These represent the population distribution. Users can hover over each bar to access information about the property type, population range, and the specific count of the property of that type.</p> </li> </ol>"},{"location":"user/manual/explore/charts/#number-of-properties-per-population-category-population-density-of-species-for-year-chart","title":"Number of properties per population category (population density) of species for year chart","text":"<ol> <li> <p>Chart Title: The chart title displays the title of the chart, including the year and common name of the selected species. This provides users with key information about the context and scope of the chart.</p> </li> <li> <p>Tooltip: The tooltip feature provides additional details about each data point on the chart. It specifically shows the property type along with corresponding colors. Users can interact with the chart by clicking on the name of a property type in the Tooltip, enabling them to selectively remove bars from the chart. This interactive functionality allows users to focus on and explore specific property types of their choice within the chart.</p> <p></p> </li> <li> <p>Population Density Range: This element denotes the extent of population density showcased on the chart. It offers users information about the range of population densities represented in the visual data.</p> </li> <li> <p>Information Icon: Hover over the information icon to access details about the chart.</p> </li> <li> <p>Download Icon: Click the download icon to save the currently displayed chart.</p> <p></p> </li> <li> <p>Bars: These bars represent the distribution of properties based on different population density categories. Users can hover over each bar to access information about the property type, the corresponding population range, and the specific count of properties within that category.</p> </li> </ol>"},{"location":"user/manual/explore/charts/#number-of-properties-per-categories-of-area-ha-for-species-for-year-chart","title":"Number of properties per categories of area (ha) for species for year chart","text":"<ol> <li> <p>Chart Title: The chart title displays the title of the chart, including the year and common name of the selected species. This provides users with key information about the context and scope of the chart.</p> </li> <li> <p>Tooltip: The tooltip feature provides additional details about each data point on the chart. It specifically shows the property type along with corresponding colors. Users can interact with the chart by clicking on the name of a property type in the Tooltip, enabling them to selectively remove bars from the chart. This interactive functionality allows users to focus on and explore specific property types of their choice within the chart.</p> <p></p> </li> <li> <p>Area Size Range: This feature illustrates the span of area sizes presented on the chart. It provides users with information about the range of different area sizes included in the visual representation.</p> </li> <li> <p>Information Icon: Hover over the information icon to access details about the chart.</p> </li> <li> <p>Download Icon: Click the download icon to save the currently displayed chart.</p> <p></p> </li> <li> <p>Bars: These bars represent the distribution of properties based on different area size categories. Users can hover over each bar to access information about the property type, the corresponding population range, and the specific count of properties within that category.</p> </li> </ol>"},{"location":"user/manual/explore/charts/#number-of-properties-per-categories-of-area-ha-available-to-species-for-year-chart","title":"Number of properties per categories of area (ha) available to species for year chart","text":"<ol> <li> <p>Chart Title: The chart title displays the title of the chart, including the year and common name of the selected species. This provides users with key information about the context and scope of the chart.</p> </li> <li> <p>Tooltip: The tooltip feature provides additional details about each data point on the chart. It specifically shows the property type along with corresponding colors. Users can interact with the chart by clicking on the name of a property type in the Tooltip, enabling them to selectively remove bars from the chart. This interactive functionality allows users to focus on and explore specific property types of their choice within the chart.</p> <p></p> </li> <li> <p>Area Available Range: This feature illustrates the span of available area sizes presented on the chart. It provides users with information about the range of different available area sizes included in the visual representation.</p> </li> <li> <p>Information Icon: Hover over the information icon to access details about the chart.</p> </li> <li> <p>Download Icon: Click the download icon to save the currently displayed chart.</p> <p></p> </li> <li> <p>Bars: These bars represent the distribution of properties based on different area size categories. Users can hover over each bar to access information about the property type, the corresponding population range, and the specific count of properties within that category.</p> </li> </ol>"},{"location":"user/manual/explore/charts/#total-count-of-species-per-province-chart","title":"Total count of species per province chart","text":"<ol> <li> <p>Chart Title: The chart title provides an overview of the total count of species across different provinces.</p> </li> <li> <p>Bars: These bars represent the total count of species for each province. Users can hover over each bar to access information about the specific province and its corresponding total count of species.</p> </li> <li> <p>Province Name: This chart component visually represents the diversity of provinces, with each bar corresponding to a specific province and its associated total count of species. It offers users a comprehensive understanding of the distribution of species across various regions.</p> </li> <li> <p>Information Icon: Users can hover over the information icon to access more details about the chart, providing context and additional insights.</p> </li> <li> <p>Download Icon: Clicking the download icon allows users to save the current chart for future reference or sharing.</p> <p></p> </li> </ol>"},{"location":"user/manual/explore/charts/#activity-count-as-of-total-population-chart","title":"Activity count as % of total population chart","text":"<ol> <li> <p>Chart Title: The chart title displays the title of the chart.</p> </li> <li> <p>Tooltip: The tooltip feature provides additional details about each data point on the chart. It specifically shows the activity type along with corresponding colors. Users can interact with the chart by clicking on the name of an activity type in the Tooltip, enabling them to selectively remove bars from the chart. This interactive functionality allows users to focus on and explore specific activity types of their choice within the chart.</p> <p></p> </li> <li> <p>n=count: This shows the number of the species affected by the specific activity type</p> </li> <li> <p>Information Icon: Hover over the information icon to access details about the chart.</p> </li> <li> <p>Download Icon: Click the download icon to save the currently displayed chart.</p> <p></p> </li> <li> <p>Bars: These bars represent the distribution of activities as a percentage of the total population. Users can hover over each bar to access information about the activity name, the corresponding percentage, and the specific count of that activity type.</p> </li> </ol>"},{"location":"user/manual/explore/charts/#total-count-per-population-estimate-category-for-species-for-year-chart","title":"Total count per population estimate category for species for year chart","text":"<ol> <li> <p>Chart Title: The chart title provides an overview of the total count of species based on different population estimate categories in the year.</p> </li> <li> <p>Tooltip: A tooltip feature is available, allowing users to gather additional details for each data point on the chart. It provides insights into specific population estimate categories and facilitates interaction by enabling users to focus on particular areas of interest.</p> <p></p> </li> <li> <p>Pie Chart: This chart component visually represents the diversity of Population Estimate Categories for species. Each slice of the pie corresponds to a specific estimate category, offering users a comprehensive understanding of the distribution.</p> </li> <li> <p>Information Icon: Hover over the information icon to access details about the chart.</p> </li> <li> <p>Download Icon: Click the download icon to save the currently displayed chart.</p> <p></p> </li> </ol>"},{"location":"user/manual/explore/charts/#mean-and-standard-deviation-of-age-classes-for-species-chart","title":"Mean and standard deviation of age classes for species chart","text":"<ol> <li> <p>Chart Title: The chart title provides an overview of the mean and standard deviation of age classes for the specified species.</p> </li> <li> <p>Tooltip: A tooltip feature is available, allowing users to gather additional details for each data point on the chart. It provides insights into specific age classes, mean values, and standard deviations, facilitating interaction and focus on particular areas of interest.</p> <p></p> </li> <li> <p>Bars: These data points represent the mean and standard deviation of age classes for the species. Users can hover over each point to access information about the specific age class, its mean value, and standard deviation.</p> </li> <li> <p>Age Classes: This chart component visually represents the distribution of age classes for the species. Each data point on the chart is associated with the mean and standard deviation of a particular age class, offering users a comprehensive understanding of the age structure.</p> </li> <li> <p>Information Icon: Users can hover over the information icon to access more details about the chart, providing context and additional insights.</p> </li> <li> <p>Download Icon: Clicking the download icon allows users to save the current chart for future reference or sharing.</p> <p></p> </li> </ol>"},{"location":"user/manual/explore/charts/#summary","title":"Summary","text":"<p>Welcome to the <code>Charts Page</code>, where the site presents visual insights into various aspects of data. Explore the distribution of properties based on area sizes and population categories, understand the total count of species across provinces, and delve into the age structure of a specified species with mean and standard deviation values for different age classes. While these charts offer a convenient way to comprehend complex information.</p> <p>DISCLAIMER: Some of the images in the manual may vary slightly from what you see on the platform due to continuous updates to the platform.</p>"},{"location":"user/manual/explore/filters/","title":"IDS SAWPS","text":""},{"location":"user/manual/explore/filters/#filter-side-panel-documentation","title":"Filter Side Panel Documentation","text":"<p>The filter side panel allows users to refine and narrow down data based on specific criteria. There are different types of filters are available for customisation.</p> <p>Disclaimer: Please read the following information carefully. The screenshots may vary slightly due to various user roles on the platform. Some of the images in the manual may vary slightly from what you see on the platform due to continuous updates to the platform. On the platform you will see <code>green question mark</code>  buttons in the top right corner (underneath the <code>LOGOUT</code> button), you can click on these to access the help desk.</p>"},{"location":"user/manual/explore/filters/#map-tab-filter-panel-overview","title":"Map Tab Filter Panel Overview","text":"<p>The filter side panel enhances the user experience by allowing them to focus on specific subsets of data based on their preferences, making it easier to analyse and work with the dataset effectively.</p>"},{"location":"user/manual/explore/filters/#viewing-the-filters","title":"Viewing the filters","text":"<ol> <li>Explore: Open the Explore page by clicking on <code>EXPLORE</code> on the navigation bar.</li> <li>Filter: Open the filter side panel by clicking on the <code>FILTERS</code> option. Inside the side panel, the user will find all of the filters. For each filter, a user can interact with the available options or input fields to customise their filter criteria. The user can click on the dropdown and select the filter.</li> <li>Map: Click on the <code>MAP</code> tab to view the map.</li> <li>Clear All: Click on the <code>Clear All</code> button to clear all the filters. If you click <code>Clear All</code>, you will be required to select an organisation or property (or both) before you can view species.</li> </ol> <ul> <li>Layers: click here to view detailed documentation on layers.</li> </ul>"},{"location":"user/manual/explore/filters/#filter-side-panel-overview","title":"Filter side panel overview","text":""},{"location":"user/manual/explore/filters/#filter-types","title":"Filter Types","text":""},{"location":"user/manual/explore/filters/#1-search-place-filter","title":"1. Search place Filter","text":"<ul> <li>Filter Description: This filter allows users to search for places.</li> <li> <p>Usage: Click on the search place field and type letters to search for places.</p> <p></p> </li> </ul> <ol> <li>Search place: Click on the search place to filter places.</li> </ol>"},{"location":"user/manual/explore/filters/#2-species-filter","title":"2. Species Filter","text":"<ul> <li>Filter Description: The species filter allows users to filter data by species.</li> <li> <p>Usage: Choose a species from the list to view data specific to that species.</p> <p></p> </li> </ul> <ol> <li>Searching for Species: Click on the Species Filter dropdown. A user will see a list of available species. A user can start typing the name of the species they are looking for in the search box provided. As the user types, the list will dynamically filter to display matching species. The user can select the species that they want to filter from the list.</li> <li>Single-Select Functionality: The Species Filter allows the user to select only one species at a time. If the user selects a different species, the filter will replace the previous selection with the newly chosen species.</li> </ol>"},{"location":"user/manual/explore/filters/#3-organisation-filter","title":"3. Organisation Filter","text":"<ul> <li>Filter Description: This filter allows users to filter data according to the organisation. This filter allows users to make multiple selections for a more customised view.</li> <li>Usage: Select an organisation from the dropdown menu to filter data specific to that organisation.</li> <li> <p>Permission: Users associated with more than one organisation or those with <code>National data scientist</code> and <code>Regional data scientist</code> group permissions can view this filter.</p> <p></p> </li> </ul> <ol> <li>Selecting All Organisations: To view data from all organisations, simply check the \"Select All\" option within the Organisation Filter.</li> <li>Selecting Individual Organisations: To filter data for specific organisations, a user can follow these steps:<ul> <li>Uncheck the <code>Select All</code> option if it is selected.</li> <li>A list of available organisations will be displayed.</li> <li>Check the checkboxes next to the organisations the user wants to include in the filter.</li> </ul> </li> <li>Cross Icon: Click on the <code>Cross</code> icon to clear organisation filter.</li> </ol>"},{"location":"user/manual/explore/filters/#4-property-filter","title":"4. Property Filter","text":"<ul> <li>Filter Description: The property filter helps users filter data based on properties. This filter is dependent on the organisation filter, meaning the available options are influenced by the selected organisations. Users can make multiple selections for a more customised view.</li> <li>Usage: Select a property from the available options to view data related to that property.</li> <li> <p>Permission: The <code>can view property filter</code> permission must be added to the group on the admin page, to allow the user group (e.g. <code>National data scientist</code>) to see the property filter.</p> <p></p> </li> </ul> <ol> <li>Property Filter: In the property filter, all properties are initially selected as the default setting. Users have the freedom to hand-pick a property of their choice. If a user is associated with multiple organisations, the filter intelligently displays a list of properties aligned with the selected organisation, ensuring a tailored and organisation-specific selection experience.</li> </ol>"},{"location":"user/manual/explore/filters/#5-year-range-filter","title":"5. Year Range Filter","text":"<ul> <li>Filter Description: This filter allows users to narrow down data based on a specified year.</li> <li> <p>Usage: Enter the desired year to view data for that specific year.</p> <p></p> </li> </ul> <ol> <li>Input Year Field: Users can directly input a specific year to filter the data accordingly. An error will be displayed if the entered year falls outside the available range.</li> </ol>"},{"location":"user/manual/explore/filters/#6-activity-filter","title":"6. Activity Filter","text":"<ul> <li>Filter Description: This filter allows users to narrow down data based on an activity type. This filter allows users to make multiple selections for a more customised view.</li> <li> <p>Usage: Filter data based on an activity type.</p> <p></p> </li> </ul> <ol> <li>Selected Activity: Choose the activity type to filter the displayed data based on the selected activities.</li> </ol>"},{"location":"user/manual/explore/filters/#7-spatial-filter","title":"7. Spatial Filter","text":"<ul> <li>Filter Description: This filter allows users to filter data based on spatial information.</li> <li> <p>Usage: Specify spatial criteria to view data located within a specific geographical area.</p> <p></p> </li> </ul> <ol> <li> <p>Critical biodiversity type dropdown Using this, the user can filter the data according to the critical biodiversity areas.</p> <p></p> <ol> <li>Available Critical Biodiversity Areas: Choose a critical biodiversity area to view data specific to that area. This filter supports multiple selections, providing users with a more customised view.</li> </ol> </li> <li> <p>Ecosystem dropdown: Using this, the user can filter the data according to the ecosystem types.</p> <p></p> <ol> <li>Available Ecosystem: Choose an ecosystem to view data specific to that area. This filter supports multiple selections, providing users with a more customised view.</li> </ol> </li> </ol>"},{"location":"user/manual/explore/filters/#summary","title":"Summary","text":"<p>The filter side panel provides a robust toolset for users to refine and explore their datasets effectively. Whether it's searching for specific places, species, or filtering by activities, organisations, properties, years, or spatial criteria, this comprehensive manual ensures users can seamlessly navigate and utilise the filtering functionalities for a more tailored data analysis experience.</p>"},{"location":"user/manual/explore/filters/#reports-tab-filter-panel-overview","title":"Reports Tab Filter Panel Overview","text":"<p>Disclaimer: Please read the following information carefully. The screenshots may vary slightly due to various user roles on the platform.</p> <p></p> <ol> <li>Filter: Available filters on the reports tab.</li> <li>Reports: Click on the <code>REPORTS</code> tab to view the reports.</li> <li>Message: Instructive message to view the reports.</li> <li>Clear All: Click on the <code>Clear All</code> button to clear all the filters. If you click <code>Clear All</code>, you will be required to select an organisation or property (or both) before you can view species.</li> </ol>"},{"location":"user/manual/explore/filters/#1-species-filter","title":"1. Species Filter","text":"<ul> <li>Filter Description: The species filter allows users to filter data by species. This filter allows users to make multiple selections for a more customised view.</li> <li> <p>Usage: Choose a species from the list to view data specific to that species.</p> <p></p> </li> </ul> <ol> <li>Searching for Species: Click on the Species Filter dropdown. A user will see a list of available species. A user can start typing the name of the species they are looking for in the search box provided. As the user types, the list will dynamically filter to display matching species. The user can select the species that they want to filter from the list.</li> <li>Multi-Select Functionality: The Species Filter allows the user to select multiple species at a time.</li> </ol>"},{"location":"user/manual/explore/filters/#2-report-type-filter","title":"2. Report Type Filter","text":"<ul> <li>Filter Description: This filter allows users to filter data based on report types. This filter appears on the reports tab. This filter allows users to make multiple selections for a more customised view.</li> <li> <p>Usage: Choose a report type from the list to view data associated with that report type.</p> <p></p> </li> </ul> <ol> <li> <p>Selecting All: To view data of all reports, simply check the <code>Select All</code> option within the reports filter.</p> </li> <li> <p>Species report: The species report is selected by default. The user can choose the report type of their choice.</p> </li> <li> <p>Cross Icon: Click on the <code>Cross</code> icon to clear the report type filter.</p> </li> </ol>"},{"location":"user/manual/explore/filters/#3-organisation-filter_1","title":"3. Organisation Filter","text":"<ul> <li>Filter Description: This filter allows users to filter data according to the organisation. This filter allows users to make multiple selections for a more customised view.</li> <li>Usage: Select an organisation from the dropdown menu to filter data specific to that organisation.</li> <li> <p>Permission: Users associated with more than one organisation or those with <code>National data scientist</code> and <code>Regional data scientist</code> group permissions can view this filter.</p> <p></p> </li> </ul> <ol> <li>Organisation Filter: All organisation are selected by default. Users can choose the organisation of their choice.</li> </ol>"},{"location":"user/manual/explore/filters/#4-property-filter_1","title":"4. Property Filter","text":"<ul> <li>Filter Description: The property filter helps users filter data based on properties. This filter is dependent on the organisation filter, meaning the available options are influenced by the selected organisations. Users can make multiple selections for a more customised view.</li> <li> <p>Usage: Select a property from the available options to view data related to that property.</p> <p></p> </li> </ul> <ol> <li>Property Filter: In the property filter, all properties are initially selected as the default setting. Users have the freedom to hand-pick a property of their choice. If a user is associated with multiple organisations, the filter intelligently displays a list of properties aligned with the selected organisation, ensuring a tailored and organisation-specific selection experience.</li> </ol>"},{"location":"user/manual/explore/filters/#5-year-range-filter_1","title":"5. Year Range Filter","text":"<ul> <li>Filter Description: This filter allows users to narrow down data based on a specified year range.</li> <li> <p>Usage: Set a range of years to view data within that time frame. For example, selecting a range of \"2010-2020\" will display data recorded between 2010 and 2020.</p> <p></p> </li> </ul> <ol> <li>Year Range Bar: This is the bar that is used for setting the year range.</li> <li>From: This is where the user, can input the starting year value for the year range.</li> <li>To: This is where the user, can input the ending year value for the year range.</li> </ol>"},{"location":"user/manual/explore/filters/#6-activity-filter_1","title":"6. Activity Filter","text":"<ul> <li>Filter Description: This filter allows users to narrow down data based on an activity type. This filter allows users to make multiple selections for a more customised view.</li> <li> <p>Usage: Filter data based on an activity type.</p> <p></p> </li> </ul> <ol> <li>Activity Filter: Users can choose the activities of their choice.</li> </ol>"},{"location":"user/manual/explore/filters/#7-spatial-filter_1","title":"7. Spatial Filter","text":"<ul> <li>Filter Description: This filter allows users to filter data based on spatial information.</li> <li> <p>Usage: Specify spatial criteria to view data located within a specific geographical area.</p> <p></p> </li> </ul> <ol> <li> <p>Critical biodiversity type dropdown Using this, the user can filter the data according to the critical biodiversity areas.</p> <p></p> <ol> <li>Available Critical Biodiversity Areas: Choose a critical biodiversity area to view data specific to that area. This filter supports multiple selections, providing users with a more customised view.</li> </ol> </li> <li> <p>Ecosystem dropdown: Using this, the user can filter the data according to the ecosystem types.</p> <p></p> <ol> <li>Available Ecosystem: Choose an ecosystem to view data specific to that area. This filter supports multiple selections, providing users with a more customised view.</li> </ol> </li> </ol>"},{"location":"user/manual/explore/filters/#summary_1","title":"Summary","text":"<p>The filter side panel provides a robust toolset for users to refine and explore their datasets effectively. Whether it's searching for specific places, species, or filtering by activities, organisations, properties, years, or spatial criteria, this comprehensive manual ensures users can seamlessly navigate and utilise the filtering functionalities for a more tailored data analysis experience.</p>"},{"location":"user/manual/explore/filters/#charts-tab-filter-panel-overview","title":"Charts Tab Filter Panel Overview","text":"<p>Disclaimer: Please read the following information carefully. The screenshots may vary slightly due to various user roles on the platform.</p> <p></p> <ol> <li>Filter: Available filters on the charts tab.</li> <li>Charts: Click on the <code>CHARTS</code> tab to view the charts.</li> <li>Message: Instructive message to view the charts.</li> <li>Clear All: Click on the <code>Clear All</code> button to clear all the filters. If you click <code>Clear All</code>, you will be required to select an organisation or property (or both) before you can view species.</li> </ol>"},{"location":"user/manual/explore/filters/#1-species-filter_1","title":"1. Species Filter","text":"<ul> <li>Filter Description: The species filter allows users to filter data by species.</li> <li> <p>Usage: Choose a species from the list to view data specific to that species.</p> <p></p> </li> </ul> <ol> <li>Searching for Species: Click on the Species Filter dropdown. A user will see a list of available species. A user can start typing the name of the species they are looking for in the search box provided. As the user types, the list will dynamically filter to display matching species. The user can select the species that they want to filter from the list.</li> <li>Single-Select Functionality: The Species Filter allows the user to select only one species at a time. If the user selects a different species, the filter will replace the previous selection with the newly chosen species.</li> </ol>"},{"location":"user/manual/explore/filters/#2-organisation-filter","title":"2. Organisation Filter","text":"<ul> <li>Filter Description: This filter allows users to filter data according to the organisation. This filter allows users to make multiple selections for a more customised view.</li> <li>Usage: Select an organisation from the dropdown menu to filter data specific to that organisation.</li> <li> <p>Permission: Users associated with more than one organisation or those with <code>National data scientist</code> and <code>Regional data scientist</code> group permissions can view this filter.</p> <p></p> </li> </ul> <ol> <li>Organisation Filter: All organisation are selected by default. Users can choose the organisation of their choice.</li> </ol>"},{"location":"user/manual/explore/filters/#3-property-filter","title":"3. Property Filter","text":"<ul> <li>Filter Description: The property filter helps users filter data based on properties. This filter is dependent on the organisation filter, meaning the available options are influenced by the selected organisations. Users can make multiple selections for a more customised view.</li> <li> <p>Usage: Select a property from the available options to view data related to that property.</p> <p></p> </li> </ul> <ol> <li>Property Filter: In the property filter, all properties are initially selected as the default setting. Users have the freedom to hand-pick a property of their choice. If a user is associated with multiple organisations, the filter intelligently displays a list of properties aligned with the selected organisation, ensuring a tailored and organisation-specific selection experience.</li> </ol>"},{"location":"user/manual/explore/filters/#4-year-range-filter","title":"4. Year Range Filter","text":"<ul> <li>Filter Description: This filter allows users to narrow down data based on a specified year.</li> <li> <p>Usage: Enter the desired year to view data for that specific year.</p> <p></p> </li> </ul> <ol> <li>Input Year Field: Users can directly input a specific year to filter the data accordingly. An error will be displayed if the entered year falls outside the available range.</li> </ol>"},{"location":"user/manual/explore/filters/#5-activity-filter","title":"5. Activity Filter","text":"<ul> <li>Filter Description: This filter allows users to narrow down data based on an activity type. This filter allows users to make multiple selections for a more customised view.</li> <li> <p>Usage: Filter data based on an activity type.</p> <p></p> </li> </ul> <ol> <li>Activity Filter: Users can choose the activities of their choice.</li> </ol>"},{"location":"user/manual/explore/filters/#6-spatial-filter","title":"6. Spatial Filter","text":"<ul> <li>Filter Description: This filter allows users to filter data based on spatial information.</li> <li> <p>Usage: Specify spatial criteria to view data located within a specific geographical area.</p> <p></p> </li> </ul> <ol> <li> <p>Critical biodiversity type dropdown Using this, the user can filter the data according to the critical biodiversity areas.</p> <p></p> <ol> <li>Available Critical Biodiversity Areas: Choose a critical biodiversity area to view data specific to that area. This filter supports multiple selections, providing users with a more customised view.</li> </ol> </li> <li> <p>Ecosystem dropdown: Using this, the user can filter the data according to the ecosystem types.</p> <p></p> <ol> <li>Available Ecosystem: Choose an ecosystem to view data specific to that area. This filter supports multiple selections, providing users with a more customised view.</li> </ol> </li> </ol>"},{"location":"user/manual/explore/filters/#summary_2","title":"Summary","text":"<p>The filter panel empowers users to customise their data views efficiently, allowing for a focused exploration of charted information. Whether refining by species, activity, organisation, property, year range, or spatial criteria, users have a versatile toolkit at their disposal for a more tailored and insightful chart-viewing experience.</p>"},{"location":"user/manual/explore/filters/#trends-tab-filter-panel-overview","title":"Trends Tab Filter Panel Overview","text":"<p>Disclaimer: Please read the following information carefully. The screenshots may vary slightly due to various user roles on the platform.</p> <p></p> <ol> <li>Filter: Available filters on the trends tab.</li> <li>Trends: Click on the <code>TRENDS</code> tab to view the trends.</li> <li>Message: Instructive message to view the trends.</li> <li>Clear All: Click on the <code>Clear All</code> button to clear all the filters. If you click <code>Clear All</code>, you will be required to select an organisation or property (or both) before you can view species.</li> </ol>"},{"location":"user/manual/explore/filters/#1-species-filter_2","title":"1. Species Filter","text":"<ul> <li>Filter Description: The species filter allows users to filter data by species.</li> <li> <p>Usage: Choose a species from the list to view data specific to that species.</p> <p></p> </li> </ul> <ol> <li>Searching for Species: Click on the Species Filter dropdown. A user will see a list of available species. A user can start typing the name of the species they are looking for in the search box provided. As the user types, the list will dynamically filter to display matching species. The user can select the species that they want to filter from the list.</li> <li>Single-Select Functionality: The Species Filter allows the user to select only one species at a time. If the user selects a different species, the filter will replace the previous selection with the newly chosen species.</li> </ol>"},{"location":"user/manual/explore/filters/#2-organisation-filter_1","title":"2. Organisation Filter","text":"<ul> <li>Filter Description: This filter allows users to filter data according to the organisation. This filter allows users to make multiple selections for a more customised view.</li> <li>Usage: Select an organisation from the dropdown menu to filter data specific to that organisation.</li> <li> <p>Permission: Users associated with more than one organisation or those with <code>National data scientist</code> and <code>Regional data scientist</code> group permissions can view this filter.</p> <p></p> </li> </ul> <ol> <li>Organisation Filter: All organisation are selected by default. Users can choose the organisation of their choice.</li> </ol>"},{"location":"user/manual/explore/filters/#3-province-filter","title":"3. Province Filter","text":"<ul> <li>Filter Description: The province filter helps users filter data based on provinces. This filter allows users to make multiple selections for a more customised view.</li> <li> <p>Usage: Select a province from the available options to view data related to that province.</p> <p></p> </li> </ul> <ol> <li>Province Filter: In the province filter, all provinces are initially selected as the default setting. Users have the freedom to hand-pick a province of their choice.</li> </ol>"},{"location":"user/manual/explore/filters/#4-property-filter_2","title":"4. Property Filter","text":"<ul> <li>Filter Description: The property filter helps users filter data based on properties. This filter is dependent on the organisation filter, meaning the available options are influenced by the selected organisations. Users can make multiple selections for a more customised view.</li> <li> <p>Usage: Select a property from the available options to view data related to that property.</p> <p></p> </li> </ul> <ol> <li>Property Filter: In the property filter, all properties are initially selected as the default setting. Users have the freedom to hand-pick a property of their choice. If a user is associated with multiple organisations, the filter intelligently displays a list of properties aligned with the selected organisation, ensuring a tailored and organisation-specific selection experience.</li> </ol>"},{"location":"user/manual/explore/filters/#summary_3","title":"Summary","text":"<p>With these versatile filtering options, users can delve into trends with a focused and tailored approach, ensuring a more insightful and efficient chart-viewing experience. Please note that the provided screenshots serve as illustrative examples, and variations may occur based on user roles within the platform.</p>"},{"location":"user/manual/explore/layers/","title":"IDS SAWPS","text":""},{"location":"user/manual/explore/layers/#layers","title":"Layers","text":"<p>Welcome to the documentation for map layers available in the application. This document provides an overview of the map layers, how to access them, and how to interact with and customise their appearance.</p> <p>DISCLAIMER: Some of the images in the manual may vary slightly from what you see on the platform due to continuous updates to the platform. On the platform you will see <code>green question mark</code>  buttons in the top right corner (underneath the <code>LOGOUT</code> button), you can click on these to access the help desk. The user can view the layer description by hovering over the layer.</p> <p>Layers</p> <p></p> <ol> <li> <p>Layers: By clicking on the <code>LAYERS</code> user will able to see the available layers.</p> </li> <li> <p>Map: By clicking on the <code>MAP</code> user will able to see map visualisation.</p> </li> <li> <p>Available Layers: Available layers side panel, user can use these layers for better visualisation.</p> </li> </ol>"},{"location":"user/manual/explore/layers/#map-layers","title":"Map layers","text":"<ol> <li> <p>Rivers Layer: The <code>Rivers Layer</code> displays the major rivers and water bodies across South Africa. This layer is useful for understanding the hydrography of the region.</p> <p></p> <ol> <li> <p>Rivers: The <code>Rivers</code> layer allows the user to see the rivers on the map.</p> </li> <li> <p>Rivers On Map: The blue lines display the rivers on the map.</p> </li> </ol> <ul> <li>Layer Visibility: You can control the visibility of the Rivers layer using the checkbox provided. To show or hide the layer on the map, simply check or uncheck the box next to rivers.</li> </ul> </li> <li> <p>Roads Layer: The <code>Roads Layer</code> provides information about the road network in South Africa. It can be valuable for assessing how transportation infrastructure impacts species distribution and conservation efforts.</p> <p></p> <ol> <li> <p>Roads: The <code>Roads</code> layer allows the user to see the roads on the map.</p> </li> <li> <p>Roads On Map: The thin grey lines display the roads on the map.</p> </li> </ol> <ul> <li>Layer Visibility: The user can control the visibility of the road layer using the checkbox provided. To show or hide the layer on the map, simply check or uncheck the box next to roads.</li> </ul> </li> <li> <p>Biome Type Layer: The <code>Biome Type Layer</code> illustrates the various biomes and ecosystems in South Africa. This layer is essential for understanding the different habitats where species are found.</p> <p></p> <ol> <li> <p>Biome Type: The <code>Biome Type</code> layer allows users to visualise different biomes and ecosystems on the map.</p> </li> <li> <p>Biome Type Dropdown: The dropdown displays the names of biome types, with unique colors for easy identification.</p> </li> <li> <p>Ecosystem Type: The map displays the ecosystem type name.</p> </li> </ol> <ul> <li>Layer Visibility: The user can control the visibility of the biome-type layer using the checkbox provided. To show or hide the layer on the map, simply check or uncheck the box next to the biome type.</li> </ul> </li> <li> <p>Critical Biodiversity Areas Layer: The <code>Critical Biodiversity Areas</code> layer highlights regions of significant ecological importance and high species diversity. It aids in identifying key areas for conservation efforts.</p> <p></p> <ol> <li> <p>Critical Biodiversity Areas: The <code>Critical Biodiversity Areas</code> layer provides essential information about regions with high ecological importance and species diversity in South Africa.</p> </li> <li> <p>Biodiversity Areas Dropdown: The dropdown displays the names of critical biodiversity areas, with unique colors for easy identification.</p> </li> <li> <p>Ecosystem Type: The map highlights and labels specific ecosystem types found within the critical biodiversity areas.</p> </li> </ol> <ul> <li>Layer Visibility: You can control the visibility of the critical biodiversity areas layer using the checkbox provided. To show or hide the layer on the map, simply check or uncheck the box next to critical biodiversity areas.</li> </ul> </li> <li> <p>Protected Areas Layer: The <code>Protected Areas</code> layer displays locations of nature reserves, parks, and conservation areas. It's essential for identifying regions where species are under protection.</p> <p></p> <ol> <li> <p>Protected Areas: The <code>Protected Areas</code> layer provides information about designated areas that are under protection, including nature reserves, parks, and heritage sites in South Africa.</p> </li> <li> <p>Protection Areas Dropdown: The dropdown displays the names of various protected areas, often associated with unique colours for easy identification.</p> </li> <li> <p>Protected Area: The map highlights and labels the specific types of protected areas, such as national parks, wildlife reserves, or heritage sites.</p> </li> </ol> <ul> <li>Layer Visibility: You can control the visibility of the protected areas layer using the checkbox provided. To show or hide the layer on the map, simply check or uncheck the box next to protected areas.</li> </ul> </li> <li> <p>Cadastral Boundaries Layer: The <code>Cadastral Boundaries</code> layer outlines property boundaries and land divisions. It can be valuable for understanding land ownership and land use in relation to species habitats.</p> <p></p> <ol> <li> <p>Cadastral Boundaries: The <code>Cadastral Boundaries</code> layer provides information about property boundaries and land divisions in South Africa.</p> </li> <li> <p>Property Boundaries Display: White lines on the map indicate the property boundaries and land divisions.</p> </li> <li> <p>Cadastral Cname: Click on the map to view a cadastral's Cname. Depending on the zoom level this will be the Parent Farm, Farm Portion, Holding, or Erf.</p> <p></p> </li> </ol> <ul> <li>Layer Visibility: You can control the visibility of the Cadastral Boundaries layer using the checkbox provided. To show or hide the layer on the map, simply check or uncheck the box next to cadastral boundaries.</li> </ul> </li> <li> <p>Place Names Layer: The <code>Place Names</code> layer provides information on geographic place names and locations across South Africa. It helps users identify specific locations for their research or exploration.</p> <p></p> <ol> <li> <p>Place Names: The <code>Place Names</code> layer offers a comprehensive collection of geographic place names and locations throughout South Africa.</p> </li> <li> <p>Place Names on Map: This layer displays the names of towns, and various geographic points of interest on the map.</p> </li> </ol> <ul> <li>Layer Visibility: You can control the visibility of the place names layer using the checkbox provided. To show or hide the layer on the map, simply check or uncheck the box next to place names.</li> </ul> </li> <li> <p>Properties Layer: The Properties Layer displays information about properties or land parcels. Users can explore land attributes, ownership, and potential impacts on species populations.</p> <p></p> <ol> <li> <p>Properties: The <code>Properties</code> layer provides detailed information about land parcels and properties within South Africa.</p> </li> <li> <p>Property on Map: The red dots display the properties on the map. Until you zoom in more, then the properties are highlighted in red.</p> <p>Properties after zooming in</p> <p></p> </li> </ol> <ul> <li>Layer Visibility: You can control the visibility of the properties layer using the checkbox provided. To show or hide the layer on the map, simply check or uncheck the box next to properties.</li> </ul> </li> <li> <p>NGI Aerial Imagery Layer: The <code>NGI Aerial Imagery</code> layer provides high-resolution aerial imagery of South Africa. It is valuable for visualising the landscape and habitats in detail.</p> <p></p> <ol> <li> <p>NGI Aerial Imagery: The <code>NGI Aerial Imagery</code> layer offers high-resolution aerial imagery of South Africa, allowing users to view the landscape and habitats in fine detail.</p> </li> <li> <p>Aerial Imagery on Map: The map displays aerial imagery in high resolution, offering a clear and detailed view of the landscape.</p> </li> </ol> <ul> <li>Layer Visibility: You can control the visibility of the NGI aerial imagery layer using the checkbox provided. To show or hide the layer on the map, simply check or uncheck the box next to NGI aerial imagery.</li> </ul> </li> </ol> <ul> <li> <p>Displaying All Layers on the Map: The user can display multiple layers simultaneously to enhance the data exploration experience. To display all layers on the map just select all the layers from the side panel. Users can also select specific layers according to their needs.</p> <p></p> <ol> <li> <p>All Selected Layers: All the selected layers on the side panel.</p> </li> <li> <p>Map Visualisation: Map visualisation after selecting all layers.</p> </li> <li> <p>Names: Popup displaying names of ecosystem type, critical biodiversity area, and protected area of pointed property.</p> </li> </ol> </li> </ul>"},{"location":"user/manual/explore/layers/#summary","title":"Summary","text":"<p>This documentation provides a comprehensive overview of the map layers available in our application. These layers serve as essential tools for exploring South Africa's geography and ecological data. From rivers and roads to critical biodiversity areas, each layer offers unique insights into the region's natural and infrastructural features. Users can select and display multiple layers simultaneously, facilitating in-depth research and analysis. By leveraging these map layers, researchers, conservationists, environmentalists, and geospatial analysts can better understand and protect South Africa's diverse landscapes and ecosystems.</p>"},{"location":"user/manual/explore/map/","title":"IDS SAWPS","text":""},{"location":"user/manual/explore/map/#map-functionalities-documentation","title":"Map Functionalities Documentation","text":"<p>Disclaimer: The images on the map depict property locations represented as points. It's important to note that the map displays the location of the data on the map itself unless you are a data consumer. Some of the images in the manual may vary slightly from what you see on the platform due to continuous updates to the platform. On the platform you will see <code>green question mark</code>  buttons in the top right corner (underneath the <code>LOGOUT</code> button), you can click on these to access the help desk.</p> <p>This documentation outlines the functionalities available in the map view, including features that allow the user to interact with and customise the map display for their needs.</p>"},{"location":"user/manual/explore/map/#map","title":"Map","text":"<ol> <li> <p>Map: The <code>Map</code> tab.</p> </li> <li> <p>Question Mark Icon: Click on the <code>Question Mark Icon</code> to learn valuable insights into optimising the use of the Map page. Explore the helpful tips and guidelines provided in this sidebar to enhance the efficiency in navigating and utilising the map features. Click on the <code>visit our Documentation</code> link to visit the documentation.</p> <p></p> </li> <li> <p>Points: Upon landing on the page, users are greeted with a visual representation of property locations in the form of points, providing an immediate overview of the geographical distribution of properties (unless the user is designated as a data consumer).</p> </li> <li> <p>Zooming In Icon: The zooming-in icon is represented by a plus sign (+). Click on this icon to zoom in on the map, making features and details appear larger and more visible.</p> </li> <li> <p>Zooming Out Icon: The zooming-out icon is represented by a minus sign (-). Click on this icon to zoom out on the map, reducing the size of the displayed area and providing a broader view.</p> </li> <li> <p>3D Icon: The <code>3D Icon</code> serves as a visual guide within the map view, enhancing the user's ability to explore a 3D representation of the environment. Represented by a 3D symbol, this icon provides users with a quick reference to the cardinal directions, facilitating orientation while navigating the 3D map. The Compass Icon dynamically adjusts its orientation based on the user's movements, consistently pointing toward Geographic North. Users can interact with the icon to reset the map orientation to its default north-facing position.</p> <p></p> <ul> <li> <p>Species Population Choropleth Map on Provincial Level: When a user selects a species, the map automatically changes to a choropleth map showing the population of the species for the year, displaying it on a provincial level.</p> </li> <li> <p>Zooming In to Property Level: As the user zooms in, the choropleth map changes to a property level, providing more detailed insights into the population distribution.</p> </li> <li> <p>Switch Between 3D and 2D View: Users can seamlessly switch between 3D and 2D views, enhancing their exploration experience.</p> </li> </ul> </li> <li> <p>Toggle Between Dark and Light Mode: The map view offers the option to toggle between dark and light modes, enhancing the viewing experience based on the user's preference.</p> <p>Dark Mode</p> <p></p> <ul> <li>Dark Mode (Moon Icon): Click on the moon icon to switch to dark mode, which provides a darker color scheme suitable for low-light or night-time viewing.</li> </ul> <p>Light Mode</p> <p></p> <ul> <li>Light Mode (Sun Icon): Click on the sun icon to switch to light mode, offering a brighter color scheme for daytime or well-lit environments.</li> </ul> </li> <li> <p>Printing Out the Current Map Preview: The print icon allows the user to generate a physical or digital copy of the current map preview. When clicked, this icon initiates the printing process, enabling the user to obtain a hard copy or a digital image of the map for reference or sharing.</p> </li> </ol>"},{"location":"user/manual/explore/map/#choropleth-maps","title":"Choropleth Maps","text":"<ul> <li> <p>Species Population Range Indicator: The chart uses a gradient of colors to smoothly represent the varying population densities. Users can quickly assess the concentration of species in different regions based on the color intensity. Users can use this chart to analyse and interpret the population distribution of selected species across different geographical areas, distinguishing between low, moderate, and high population densities.</p> <p></p> </li> <li> <p>Highlighting The Most Populated Region: The map dynamically identifies and highlights the region with the population density for the selected species. This region is visually emphasised to draw the user's attention to the area with the most significant concentration of the chosen species.</p> <p></p> </li> </ul>"},{"location":"user/manual/explore/map/#summary","title":"Summary","text":"<p>The Map Functionalities provide users with a comprehensive set of tools for a flexible and tailored map exploration experience. Users can seamlessly adjust the view with zoom functionalities, allowing for detailed examinations or broader perspectives. The option to toggle between Dark and Light Modes ensures optimal visibility in diverse lighting conditions.</p> <p>Furthermore, the inclusion of a 3D view enriches the exploration possibilities, offering users an immersive and dynamic environment. The print functionality enables users to capture and share their preferred map views, in 2D or 3D. This suite of features empowers users with enhanced control and convenience, ensuring a versatile and enjoyable map interaction.</p>"},{"location":"user/manual/explore/reports/","title":"IDS SAWPS","text":""},{"location":"user/manual/explore/reports/#reports-table-page-documentation","title":"Reports Table Page Documentation","text":"<p>The Reports Table Page is the central hub for viewing and interacting with the user's data. This page offers a user-friendly interface for exploring and manipulating the user's dataset. Users can use a variety of features to customise their data view, including filters, column search, and data export options.</p> <p>DISCLAIMER: Some of the images in the manual may vary slightly from what you see on the platform due to continuous updates to the platform. On the platform you will see <code>green question mark</code>  buttons in the top right corner (underneath the <code>LOGOUT</code> button), you can click on these to access the help desk.</p>"},{"location":"user/manual/explore/reports/#reports-display","title":"Reports Display","text":"<p>The main area of the page displays the user's dataset in a tabular format. Each row represents a record, and each column represents a data attribute.</p>"},{"location":"user/manual/explore/reports/#reports-table","title":"Reports table","text":"<ol> <li>Explore: Click on the <code>EXPLORE</code> link available on the navigation bar to open the explore page.</li> <li>Reports: Click on the <code>REPORTS</code> link to view the data.</li> <li> <p>Filters: Utilise the filters provided on the page to refine the user's data view. These filters include:</p> <ul> <li>Species Filter: Filter data by species.</li> <li>Report Type Filter: Filter data by report type.</li> <li>Organisation Filter: Filter data by organisation.</li> <li>Property Filter: Filter data by property.</li> <li>Year Range Filter: Filter data by a specified year range.</li> <li>Activity Filter: Filter data by activity type.</li> <li> <p>Spatial Filter: Filter data by spatial criteria.</p> </li> <li> <p>Applying Filters:</p> <ul> <li>Click on the respective filter dropdowns.</li> <li>Set filter criteria.</li> <li>Click on the filter to update the data display based on the user's filter selections.</li> </ul> </li> <li>Each filter is designed to help the user narrow down their dataset to view only the data that's relevant to their analysis.</li> </ul> </li> <li> <p>Column Search: Users can search for specific values within columns by selecting the column. This feature is especially useful when the user needs to locate specific data points within a large dataset. The table will dynamically filter to display the selected column.</p> </li> <li> <p>DOWNLOAD DATA In the <code>DOWNLOAD DATA</code> dropdown, users can select the preferred file format for downloading.     </p> <ol> <li> <p>CSV Format: Click on the <code>DOWNLOAD DATA CSV</code> button to download the current dataset in CSV format. Each CSV download generates separate files for individual data entries, providing a comprehensive yet modular view of the dataset.</p> <p></p> </li> <li> <p>XLSX Format: Click on the <code>DOWNLOAD DATA XLSX</code> button to download the current dataset in XLSX format. This option consolidates all data into a single Excel file with different tabs, allowing users to conveniently navigate and analyze diverse aspects of the dataset within a unified document.</p> <p></p> <ul> <li>Sheet 1: Species report.</li> <li>Sheet 2: Property report.</li> </ul> </li> </ol> </li> <li> <p>DOWNLOAD DATA REPORT: Click on the <code>DOWNLOAD DATA REPORT</code> button to download the current dataset in PDF format. The downloaded PDF document encapsulates the entire dataset in a cohesive report, featuring a structured layout with a header that provides an overview of the data. This format is ideal for presenting a comprehensive snapshot of the dataset.</p> <p></p> </li> </ol>"},{"location":"user/manual/explore/reports/#report-type","title":"Report Type","text":"<ul> <li>Activity Report: Report on an activity basis.</li> <li>Property Report: Report on a property basis.</li> <li>Species Report: Report on a species basis.</li> <li>Province Report: Report on a province basis. Only members of <code>National data consumer</code> group can see this report.</li> <li>Sampling Report: Filter data by property. Members of <code>National data consumer</code> or <code>Provincial data consumer</code> CAN NOT see this report.</li> </ul> <p>The user group is configurable from the User Table in the Django Admin.</p>"},{"location":"user/manual/explore/reports/#reports-page-with-reports-filter","title":"Reports Page with Reports Filter","text":"<ol> <li> <p>Report Type: Report type filter with the reports type.</p> </li> <li> <p>Species: The species icon is displayed with the count of selected species.</p> </li> <li> <p>Organisation: The organisation icon is displayed with the count of selected organisations.</p> </li> <li> <p>Property: The property icon is displayed with the count of selected properties.</p> </li> <li> <p>Clock Icon: The clock icon serves as a visual indicator for the year range filter with year range.</p> </li> <li> <p>Activity: The activity icon is displayed with the count of selected activities.</p> </li> <li> <p>Species List: Displays the names of the selected species.</p> </li> <li> <p>Organisation List: Displays the names of the selected organisations.</p> </li> <li> <p>Property List: Displays the names of the selected properties.</p> </li> <li> <p>Activity List: Displays the names of the selected activities.</p> </li> </ol>"},{"location":"user/manual/explore/reports/#activity-report-filter","title":"Activity Report Filter","text":"<ol> <li>Activity Report: Selected <code>Activity report</code>.</li> </ol>"},{"location":"user/manual/explore/reports/#activity-report-tables","title":"Activity Report Tables","text":""},{"location":"user/manual/explore/reports/#activity-types","title":"Activity Types","text":"<p>The Activity Report includes information for the following activity types:</p> <ol> <li> <p>Translocation (Intake): This table provides details on translocation activities related to the intake of species, for properties per year.</p> </li> <li> <p>Translocation (Offtake): This table displays information about translocation activities related to off-take,  for properties per year.</p> </li> <li> <p>Planned Hunt/Cull: This table contains data related to planned hunting or culling activities,  for properties per year.</p> </li> <li> <p>Planned Euthanasia/DCA: This table presents information on planned euthanasia or disease control activities, for properties per year.</p> </li> <li> <p>Unplanned/Illegal Hunting: This table offers insights into unplanned or illegal hunting activities,  for properties per year.</p> <p>Table Columns</p> <p>Each of the tables associated with the activity types contains the following columns:</p> <ul> <li>Property Name: The name of the property where the activity took place.</li> <li>Scientific Name: The scientific name of the species involved in the activity.</li> <li>Common Name: The common name of the species.</li> <li>Year: The year in which the activity occurred.</li> <li>Total: The total count of the species involved in the activity.</li> <li>Adult Male: The count of adult male individuals.</li> <li>Adult Female: The count of adult female individuals.</li> <li>Juvenile Male: The count of juvenile male individuals.</li> <li>Juvenile Female: The count of juvenile female individuals.</li> </ul> </li> </ol>"},{"location":"user/manual/explore/reports/#summary","title":"Summary","text":"<p>The <code>Activity Report</code> is a valuable filter for generating detailed reports on a variety of wildlife management activities. It provides specific information for each activity type, including property details, species information, and counts related to the activities. This report allows for a comprehensive view of wildlife management efforts, enabling informed decision-making and analysis of data related to different activities.</p>"},{"location":"user/manual/explore/reports/#property-report","title":"Property Report","text":"<ol> <li> <p>Property Report: Selected <code>Property report</code>.</p> </li> <li> <p>Property Table: The property table displays data for the properties.</p> <p>Report Columns</p> <p>The Property Report includes the following columns:</p> <ul> <li> <p>Property Name: The name of the property being reported on.</p> </li> <li> <p>Scientific Name: The scientific name of the species associated with the property.</p> </li> <li> <p>Common Name: The common name of the species related to the property.</p> </li> <li> <p>Owner: The name of the owner of the property.</p> </li> <li> <p>Owner Email: The email address of the property owner.</p> </li> <li> <p>Property Type: The type of the property.</p> </li> <li> <p>Province: The province where the property is situated.</p> </li> <li> <p>Property Size (Ha): The size of the property in hectares.</p> </li> <li> <p>Area Available To Species: The portion of the property that is available for species habitat.</p> </li> <li> <p>Open/Close Systems: Indicates whether the property employs open or closed systems for wildlife management.</p> </li> </ul> </li> </ol>"},{"location":"user/manual/explore/reports/#summary_1","title":"Summary","text":"<p>The <code>Property Report</code> is a critical filter for reporting on various properties. It provides information on property details, ownership, type, location, and specific data related to species habitat and wildlife management systems. This report is essential for analysing and managing property-related information in an organised and structured manner.</p>"},{"location":"user/manual/explore/reports/#province-report","title":"Province Report","text":"<ol> <li> <p>Province Report: Select the <code>Province Report</code> option to generate a report specifically for provinces.</p> </li> <li> <p>Province Table: The Province report table displays data related to the provinces, including population information.</p> <p>Report Columns</p> <p>The Province Report includes the following columns:</p> <ul> <li> <p>Year: The specific year for which the data is recorded.</p> </li> <li> <p>Common Name: The common name of the species associated with the province.</p> </li> <li> <p>Scientific Name: The scientific name of the species.</p> </li> <li> <p>Total Population: The total population of the species within the province for the specified year.</p> </li> <li> <p>Total Population Province Name: The total population of the species within the respective province. This column is repeated for each province, and each entry represents the total population of the species in that specific province for the given year.</p> </li> </ul> </li> </ol>"},{"location":"user/manual/explore/reports/#summary_2","title":"Summary","text":"<p>The Province Report serves as a valuable filter for reporting on provincial data related to species. It provides essential information on the total population of species within each province, as well as details about the species' common name, scientific name, and the year of data collection. This report is indispensable for in-depth analysis and management of species-related information at the provincial level.</p>"},{"location":"user/manual/explore/reports/#sampling-report-documentation","title":"Sampling Report Documentation","text":"<ol> <li> <p>Sampling Report: Selected <code>Sampling report</code>.</p> </li> <li> <p>Sampling Table: The sampling report table displays data of the species for the property.</p> <p>Report Columns</p> <p>The Sampling Report includes the following columns:</p> <ul> <li> <p>Property Name: The name of the property where the sampling and population estimates were conducted.</p> </li> <li> <p>Scientific Name: The scientific name of the species under consideration.</p> </li> <li> <p>Common Name: The common name of the species.</p> </li> <li> <p>Population Status: Indicates the status of the species population such as <code>Migratory</code> or <code>Resident</code>.</p> </li> <li> <p>Population Estimate Category: Categorises the population estimate.</p> </li> <li> <p>Survey Method: Describes the method used for surveying and data collection.</p> </li> <li> <p>Sampling Effort Coverage: Indicates the extent to which the sampling effort covered the entire population or habitat.</p> </li> <li> <p>Population Estimate Certainty: This represents the level of certainty of the estimated population.</p> </li> </ul> </li> </ol>"},{"location":"user/manual/explore/reports/#summary_3","title":"Summary","text":"<p>The Sampling Report is a crucial tool for documenting and reporting on sampling efforts and population estimates for different species. It provides detailed information on property details, species information, and key metrics related to the population and the methods used for data collection. This report is essential for assessing population health and the effectiveness of conservation and management efforts.</p>"},{"location":"user/manual/explore/reports/#species-report","title":"Species Report","text":"<ol> <li> <p>Species Report: Selected <code>Species report</code>.</p> </li> <li> <p>Species Table: The species report table displays data of the species for the property.</p> </li> </ol> <p>Note: The users, based on their role, can edit or delete the species details. If the user is an organisational member, they can only edit or delete the records that they have submitted. However, if the user is an organisational manager,  they have the authority to edit or delete any data within that particular organisation. This clarification ensures that editing and deletion permissions align with the user's role within the organisation, promoting efficient and secure data management practices. Keep  in mind that the user can not update the <code>Scientific Name</code> and <code>Common Name</code> of the species. If the user want's to do that they need to delete the existing record or add new record.</p> <ol> <li> <p>Edit Icon: Click on the <code>Edit</code> icon, to update the species record. When the user clicks on the edit icon the online form step 1 opens. Users can update the species details here.</p> </li> <li> <p>Delete Icon: Click on the <code>Delete</code> icon to remove the species record. Upon clicking the delete icon, a confirmation popup will appear, seeking confirmation for the deletion of the species record.</p> <p></p> <p>Within the popup, two buttons are available.</p> <ol> <li> <p>Cancel: Click the <code>Cancel</code> button to abort the deletion process.</p> </li> <li> <p>Delete: Click the <code>Delete</code> button to confirm and proceed with the permanent deletion of the species record.</p> </li> </ol> <p>Exercise caution and ensure the accuracy of the users' decision before confirming the deletion. This two-step process is designed to prevent accidental deletions and provide users with an opportunity to reconsider their actions.</p> </li> </ol> <p></p>"},{"location":"user/manual/explore/reports/#report-columns","title":"Report Columns","text":"<p>The Species Report includes the following columns:</p> <ul> <li> <p>Property Name: The name of the property associated with the species data.</p> </li> <li> <p>Scientific Name: The scientific name of the species.</p> </li> <li> <p>Common Name: The common name of the species.</p> </li> <li> <p>Year: The specific year for which the data is recorded.</p> </li> <li> <p>Group: Information about the group to which the species belongs.</p> </li> <li> <p>Total: The total count of the species in the specified year.</p> </li> <li> <p>Adult Males: The count of adult male individuals within the species.</p> </li> <li> <p>Adult Females: The count of adult female individuals within the species.</p> </li> <li> <p>Juvenile Males: The count of juvenile male individuals within the species.</p> </li> <li> <p>Juvenile Females: The count of juvenile female individuals within the species.</p> </li> <li> <p>Sub-Adult Males: The count of sub-adult male individuals within the species.</p> </li> <li> <p>Sub-Adult Females: The count of sub-adult female individuals within the species.</p> </li> </ul>"},{"location":"user/manual/explore/reports/#summary_4","title":"Summary","text":"<p>The Species Report is a vital filter for reporting on various species. It provides comprehensive information on species-specific data, including counts, age groups, and associated property details. This report is essential for detailed analysis and management of species-related information.</p>"},{"location":"user/manual/explore/reports/#summary_5","title":"Summary","text":"<p>The reports table page is a comprehensive platform for exploring, analysing, and interacting with the user's data. With filters, column search, and data export options, the user has the tools necessary to customise their data view, find specific information, and export data in the format that suits their needs.</p>"},{"location":"user/manual/explore/trends/","title":"IDS SAWPS","text":""},{"location":"user/manual/explore/trends/#trends-tab-documentation","title":"Trends Tab Documentation","text":""},{"location":"user/manual/explore/trends/#overview","title":"Overview","text":"<p>The Trends Tab provides a comprehensive analysis of population dynamics at different geographical levels, offering valuable insights into demographic shifts and trends. This tab is designed to assist users in understanding the evolving landscape of population distribution across various strata.</p> <p>DISCLAIMER: Some of the images in the manual may vary slightly from what you see on the platform due to continuous updates to the platform. On the platform you will see <code>green question mark</code>  buttons in the top right corner (underneath the <code>LOGOUT</code> button), you can click on these to access the help desk.</p> <p>If there is less than 2 years of data for a particular species, the system will not generate trend charts for that species. Please keep in mind that if the user has recently added species information, it may not be immediately reflected in the trends tab. However, the data will be instantly available on all other tabs.</p> <p>This delay occurs because the system updates trend charts every hour. So, the user might experience a short wait before the trends tab shows the latest information. We appreciate your understanding and patience in this matter. If you have any questions or concerns, feel free to reach out to our support team. Thank you for using our platform!</p> <p></p> <ol> <li> <p>Explore: To access the Trends, click on the <code>EXPLORE</code> option in the navigation bar.</p> </li> <li> <p>Trends: Navigate to the <code>TRENDS</code> tab to explore a variety of trends available for data visualisation.</p> </li> <li> <p>Message: A helpful and informative message prompts users to explore and view trends.</p> </li> <li> <p>Filters: Enhance trends visualisation by utilising the available filters for more precise data representation.</p> </li> <li> <p>Clear All: Click on <code>Clear All</code> to remove all applied filters and reset the trends view. If you click <code>Clear All</code>, you will be required to select an organisation or property (or both) before you can view species.</p> </li> </ol>"},{"location":"user/manual/explore/trends/#trends-topper","title":"Trends Topper","text":"<ol> <li> <p>Selected Species: Indicates the currently chosen species.</p> </li> <li> <p>Species Icon: Displays the icon representing the selected species along with its scientific name.</p> </li> <li> <p>Lists: Presents a comprehensive list of the selected species, organisations, and properties. This section provides an overview of the elements currently chosen.</p> </li> <li> <p>DOWNLOAD JSON DOCUMENT: To download the trends data in JSON format, click on the <code>DOWNLOAD JSON DOCUMENT</code> button.</p> </li> </ol>"},{"location":"user/manual/explore/trends/#national-level-trends","title":"National Level Trends","text":"<p>At the national level, users can explore and analyse overarching population trends that span the entire country.</p>"},{"location":"user/manual/explore/trends/#species-national-population-trend","title":"Species National Population Trend","text":"<ol> <li> <p>Chart Title: The chart title presents the Species National Population Trend, showcasing data for a specific species.</p> </li> <li> <p>Trends:  This allows users to easily track and analyse population trends over time. The chart effectively presents a visual representation of how population dynamics fluctuate across the specified years, offering insights into patterns and variations.</p> </li> <li> <p>Year: Shows the years.</p> </li> <li> <p>Information Icon: Hover over the information icon to access details about the trends chart.</p> </li> <li> <p>Download Icon: Click the download icon to save the currently displayed trends chart.</p> <p></p> </li> </ol>"},{"location":"user/manual/explore/trends/#large-species-populations","title":"Large Species Populations","text":"<ol> <li> <p>Chart Title: The chart title displays the title of the chart with the selected species scientific name and range of individuals.</p> </li> <li> <p>Bars: These bars visually depict the distribution of percentages. The hover feature displays the percentage range calculated over specified time intervals, such as the last 10 years, last 5 years, and last 3 years. This information allows users to evaluate and understand the population trends for large species over different temporal scopes, providing a dynamic perspective on their changes and variations.</p> <p></p> </li> <li> <p>Tooltip: The tooltip feature provides additional details about each data point on the chart. It specifically shows the conditions, and percentage, along with corresponding colors. Users can interact with the chart by clicking on the condition in the Tooltip, enabling them to selectively remove bars from the chart. This interactive functionality allows users to focus on and explore specific conditions of their choice within the chart.</p> </li> <li> <p>Information Icon: Hover over the information icon to access details about the chart.</p> </li> <li> <p>Download Icon: Click the download icon to save the currently displayed chart.</p> <p></p> </li> </ol>"},{"location":"user/manual/explore/trends/#total-area-vs-area-available-to-species","title":"Total area vs area available to species","text":"<ol> <li> <p>Chart Title: The chart title displays the title of the chart with the selected species scientific name.</p> </li> <li> <p>Lines: The lines in this chart provide a visual representation of the distribution of area available to species in comparison to the total area of the property. Each line is distinctly coloured, adding a visual element to differentiate between various data series.</p> </li> <li> <p>Tooltip: The tooltip is designed to provide detailed information for each data point on the line chart. It specifically displays the comparison between the area available to species and the total area of the property. Users can interact with the chart by clicking on a specific area value in the tooltip. This interactive functionality allows users to selectively remove lines from the chart, enabling them to focus on and explore specific areas of interest within the context of the area available to species versus the total property area. The corresponding colors in the tooltip enhance visual association, aiding users in comprehending the data distribution on the line chart.</p> <p></p> </li> <li> <p>Information Icon: Hover over the information icon to access details about the chart.</p> </li> <li> <p>Download Icon: Click the download icon to save the currently displayed chart.</p> <p></p> </li> </ol>"},{"location":"user/manual/explore/trends/#medium-species-populations","title":"Medium Species Populations","text":"<ol> <li> <p>Chart Title: The chart title provides a clear identification of the chart, focusing on trends related to medium species populations with the selected species scientific name and range of individuals.</p> </li> <li> <p>Bars: These bars visually represent the distribution of percentages for medium species populations. The hover feature presents the percentage range calculated over specific time intervals, such as the last 10 years, last 5 years, and last 3 years. This functionality enables users to assess and comprehend the population trends for medium species over different temporal scopes, offering a dynamic perspective on their changes and variations.</p> <p></p> </li> <li> <p>Tooltip: The tooltip feature in this context provides additional insights into each data point on the chart. It specifically displays information about the conditions, percentage, and corresponding colors related to medium species populations. Users can interact with the chart by clicking on a condition in the tooltip, allowing them to selectively remove bars and focus on exploring specific conditions of their choice within the chart.</p> </li> <li> <p>Information Icon: Hover over the information icon to access details about the chart.</p> </li> <li> <p>Download Icon: Click the download icon to save the currently displayed chart.</p> <p></p> </li> </ol>"},{"location":"user/manual/explore/trends/#small-species-populations","title":"Small Species Populations","text":"<ol> <li> <p>Chart Title: The chart title provides a clear identification of the chart, emphasising trends related to small species populations with the selected species scientific name and range of individuals.</p> </li> <li> <p>Bars: These bars visually depict the distribution of percentages for small species populations. The hover feature reveals the percentage range calculated over specific time intervals, including the last 10 years, last 5 years, and last 3 years. Users can utilise this feature to assess and comprehend the population trends for small species across different temporal scopes, gaining a dynamic perspective on their changes and variations.</p> <p></p> </li> <li> <p>Tooltip: The tooltip feature offers additional insights into each data point on the chart. It specifically showcases information about conditions, percentages, and corresponding colors related to small species populations. Users can interact with the chart by clicking on a condition in the tooltip, facilitating the selective removal of bars and enabling a focused exploration of specific conditions within the chart.</p> </li> <li> <p>Information Icon: Hover over the information icon to access details about the chart.</p> </li> <li> <p>Download Icon: Click the download icon to save the currently displayed chart.</p> <p></p> </li> </ol>"},{"location":"user/manual/explore/trends/#provincial-level-trends","title":"Provincial Level Trends","text":"<p>Delving deeper, the Province Level Population Trends offer a regional breakdown of demographic patterns. Users can examine the population trends specific to each province.</p>"},{"location":"user/manual/explore/trends/#province-population-trend-charts","title":"Province Population Trend Charts","text":"<ul> <li> <p>Trends Charts for Provinces: Multiple charts are available, each representing the population trends for a specific province over the years.</p> </li> <li> <p>Population Over the Years: The charts allow users to easily track and analyse population trends at the province level over time. Each chart provides a visual representation of how the population dynamics fluctuate across the specified years, offering insights into patterns and variations unique to each province.</p> </li> <li> <p>Year: The X-axis indicates the years, providing a chronological reference for the population trends observed in each province.</p> </li> <li> <p>Information Icon: Hover over the information icon to access additional details about the trends chart, providing users with relevant context and insights.</p> </li> <li> <p>Download Icon: Each chart comes with a download icon, allowing users to save the currently displayed province-level population trends chart for further analysis or documentation.</p> </li> </ul>"},{"location":"user/manual/explore/trends/#province-population-percentage-charts","title":"Province Population Percentage Charts","text":"<ul> <li> <p>Chart Title: Each chart title displays the title of the chart along with the specific province name.</p> </li> <li> <p>Bars: These bars visually represent the distribution of percentages for the province population. The hover feature displays the percentage range calculated over specified time intervals, such as the last 10 years, last 5 years, and last 3 years. This functionality allows users to assess and comprehend the population trends for each province over different temporal scopes, providing a dynamic perspective on their changes and variations.</p> </li> <li> <p>Tooltip: The tooltip feature, consistent across all charts, provides additional details about each data point. It specifically shows information about conditions, percentages, and corresponding colors. Users can interact with the chart by clicking on a condition in the tooltip, enabling them to selectively remove bars from each province's population percentage chart. This interactive functionality allows users to focus on and explore specific conditions of their choice within each chart.</p> </li> <li> <p>Information Icon: Hovering over the information icon provides users with additional details about the specific province's population percentage chart.</p> </li> <li> <p>Download Icon: Each chart comes equipped with a download icon, allowing users to save the currently displayed province population percentage chart for further analysis or documentation.</p> </li> </ul> <p>All the charts in this set share the same user-friendly functionality, providing a consistent and comprehensive exploration of province population percentage trends. Users can easily compare and analyse the demographic dynamics of different provinces over various time intervals.</p>"},{"location":"user/manual/explore/trends/#property-population-trend-charts","title":"Property Population Trend Charts","text":"<ul> <li> <p>Trends Charts for Properties: Multiple charts are available, each representing the population trends for properties at a specific level over the years.</p> </li> <li> <p>Population Over the Years: These charts enable users to track and analyse population trends at the property level over time. Each chart offers a visual representation of how population dynamics fluctuate across the specified years, providing insights into patterns and variations unique to each property level.</p> </li> <li> <p>Year: The X-axis indicates the years, providing a chronological reference for the population trends observed in each property level.</p> </li> <li> <p>Information Icon: Hover over the information icon to access additional details about the trends chart, offering users relevant context and insights into property level trends.</p> </li> <li> <p>Download Icon: Each chart is equipped with a download icon, enabling users to save the currently displayed property-level population trends chart for further analysis or documentation.</p> </li> </ul> <p>These charts facilitate a detailed exploration of population trends at different property levels, empowering users to understand and compare demographic dynamics across various segments.</p>"},{"location":"user/manual/login-logout/","title":"IDS SAWPS","text":""},{"location":"user/manual/login-logout/#login-and-logout","title":"Login and logout","text":"<p>This section of documentation describes the various page elements of the login and logout pages. It consists of:</p> <ul> <li>Login: This page describes the login page.</li> <li>Forgot Password: This section explains the forgot password page.</li> <li>Logout: This document explains the logout page.</li> </ul>"},{"location":"user/manual/login-logout/forgot-password/","title":"IDS SAWPS","text":""},{"location":"user/manual/login-logout/forgot-password/#forgot-password-feature","title":"Forgot Password Feature","text":"<p>When the user has forgotten their password, they can use this feature to reset it. The steps involve:</p> <ul> <li>Providing the correct email for the user account.</li> <li>Clicking on the reset password link provided in their email.</li> <li>Resetting their password on the platform.</li> <li>Log in with their new password.</li> </ul>"},{"location":"user/manual/login-logout/forgot-password/#forgot-password","title":"Forgot password","text":"<ol> <li>Forgot Password Link: When clicked navigates to the password reset page.</li> </ol>"},{"location":"user/manual/login-logout/forgot-password/#reset-password","title":"Reset password","text":"<ol> <li>Reset Password Label</li> <li>Email Field: the user should enter their email address into this field.</li> <li>Reset Password button: when clicked sends the reset password email and notifies the user.</li> <li>Go back link: when clicked returns the user to the login page.</li> </ol> <ol> <li>The message: contains instructions the user should follow to be able to reset their password.</li> <li>Go back link: when clicked returns the user to the login page.</li> </ol>"},{"location":"user/manual/login-logout/forgot-password/#password-reset-email","title":"Password reset email","text":"<ul> <li>Email: has further instructions on completing the reset password process.</li> <li>Register button: When the user clicks the register link, they will be redirected to the platform to complete resetting their password.</li> </ul>"},{"location":"user/manual/login-logout/forgot-password/#password-reset-confirmation","title":"Password reset confirmation","text":"<ol> <li>New Password field: the user should enter their new password into this field.</li> <li>New password confirmation field: the user should re-enter their password to make sure they didn\u2019t make a mistake.</li> <li>Allowable Password characteristics: the new password for the user should include the characteristics described.</li> <li>Reset password button: when clicked sets the password the user provided as the new password for logging in and also shows a success message.</li> </ol>"},{"location":"user/manual/login-logout/forgot-password/#password-reset-success","title":"Password reset success","text":"<ul> <li>Password reset success: the user receives a success message when the reset is completed without any errors.</li> </ul>"},{"location":"user/manual/login-logout/login-2fa-page/","title":"IDS SAWPS","text":""},{"location":"user/manual/login-logout/login-2fa-page/#two-factor-authentication-page-documentation","title":"Two-Factor Authentication Page Documentation","text":"<p>The Two-Factor Authentication (2FA) Page is a critical security feature that adds an extra layer of protection to the user's account. With 2FA, the user will be required to enter an OTP (One-Time Password) code in addition to their regular login credentials. This documentation explains the 2FA page.</p> <p></p> <ol> <li> <p>OTP Code: In the centre of the page, the user will find the OTP (One Time Pin) Code field. This is where the user must enter the one-time password generated by their authentication app (Google Authenticator).</p> </li> <li> <p>Authenticate Button: Once the user has entered the OTP code, they can click the <code>Authenticate</code> button to verify their identity. If the OTP code is correct, the user will gain access to their account.</p> </li> <li> <p>Contact:  The <code>Contact</code> link provides access to the contact page where the SAWPS team is ready to assist with any inquiries or issues.</p> </li> </ol>"},{"location":"user/manual/login-logout/login-2fa-page/#two-factor-authentication-security","title":"Two-Factor Authentication Security","text":"<p>Two-factor authentication (2FA) is a critical security measure that significantly reduces the risk of unauthorised access to the user's account. It is highly recommended to enable and use 2FA to protect a user's data and ensure the integrity of their account.</p>"},{"location":"user/manual/login-logout/login-2fa-page/#summary","title":"Summary","text":"<p>Users can effectively use the 2FA page to enhance the security of their accounts and maintain control, even in the event of a lost device.</p>"},{"location":"user/manual/login-logout/login-page/","title":"IDS SAWPS","text":""},{"location":"user/manual/login-logout/login-page/#login-page-documentation","title":"Login Page Documentation","text":"<p>The Login Page is the entry point to access the user's account within the application. This page provides a secure way for users to log in using their credentials. It offers a straightforward interface for entering the user's email address, and password, and includes an optional <code>Remember Me</code> checkbox for convenience.</p>"},{"location":"user/manual/login-logout/login-page/#login-form","title":"Login Form","text":"<ol> <li> <p>Email: Enter a user's registered email address in this field. This is the email associated with the user's account.</p> </li> <li> <p>Password: Input the user's password in this field. Passwords are case-sensitive, so users must ensure that they enter it correctly.</p> </li> <li> <p>Remember Me: Users should check this box if they want the application to remember their login credentials for future sessions. This feature is optional and can be useful for quick and convenient access.</p> </li> <li> <p>Login Button: Click the <code>LOGIN</code> button to submit the user's credentials and access their account. Upon clicking this button, the user will be redirected to the Two-Factor Authentication (2FA) page, where they need to enter the authentication code. If the user does not have the token generator, they can follow the documentation provided to install it. For detailed information on 2FA, please refer to the documentation here.</p> </li> <li> <p>Register Here: The <code>Register Here</code> link opens the registration page for registration.</p> </li> <li> <p>Forgot Password: The <code>Forgot Password</code> link opens the forgot password for reset password.</p> </li> </ol>"},{"location":"user/manual/login-logout/login-page/#remember-me","title":"Remember Me","text":"<p>The <code>Remember Me</code> checkbox allows users to opt for the application to remember the user's login information. When checked, users won't need to re-enter their email and password each time they visit the login page. This is particularly convenient for returning users who want a seamless login experience.</p>"},{"location":"user/manual/login-logout/login-page/#security","title":"Security","text":"<p>The <code>Login Page</code> is designed with security in mind to protect user accounts and sensitive information. It uses encryption protocols and best practices to ensure that users' login credentials are kept secure.</p>"},{"location":"user/manual/login-logout/login-page/#logging-in","title":"Logging In","text":"<p>Please ensure that users enter their email and password correctly to access their accounts. After clicking the <code>LOGIN</code> button, users will be redirected to the two-factor authentication page within the application.</p>"},{"location":"user/manual/login-logout/login-page/#summary","title":"Summary","text":"<p>The Login Page serves as the gateway to users' accounts, providing a secure and user-friendly way to access the application's features and functionality.</p>"},{"location":"user/manual/login-logout/logout/","title":"IDS SAWPS","text":""},{"location":"user/manual/login-logout/logout/#logout-page-documentation","title":"Logout Page Documentation","text":"<p>The Logout Page is a secure and straightforward feature designed to allow users to log out of their account or session within the users' application. This page provides a clean and intuitive interface for users to initiate the logout process, ensuring that their account remains protected and their session ends securely.</p>"},{"location":"user/manual/login-logout/logout/#logout-page","title":"Logout page","text":"<ol> <li>Logout Button: To log out of the current user session, users should click the <code>LOG OUT</code> button. This action will terminate the user's session, ensuring they are securely logged out of the application.</li> </ol>"},{"location":"user/manual/login-logout/logout/#logout-process","title":"Logout Process","text":"<p>When the user clicks the <code>LOG OUT</code> button, the following actions occur:</p> <ol> <li>The system securely terminates the user's current session.</li> <li>The user will be logged out of their account, and any temporary data related to the user's session will be cleared.</li> </ol>"},{"location":"user/manual/register/","title":"IDS SAWPS","text":""},{"location":"user/manual/register/#register","title":"Register","text":"<p>This section of documentation describes the various elements of registering on the platform. It consists of:</p> <ul> <li>Registration Page: This section describes the registration page.</li> <li>Set up Two Factor Authentication: This page explains the two factor authentication set up page.</li> </ul>"},{"location":"user/manual/register/register-page/","title":"IDS SAWPS","text":""},{"location":"user/manual/register/register-page/#registration-page-documentation","title":"Registration Page Documentation","text":"<p>The Registration Page is a critical component of the platform, allowing users to create their accounts and gain access to the system. This page provides a straightforward and secure registration form for new users to sign up. It collects essential user information, including first name, last name, email address, password, and confirmation of the password.</p>"},{"location":"user/manual/register/register-page/#registration-form","title":"Registration Form","text":"<p>The Registration Form is designed to gather the necessary information for creating a user account.</p> <p></p> <ol> <li>First Name: Enter the user's first name in this field. This is a required field and should contain the user's legal first name.</li> <li>Last Name: Provide the user's last name in this field. Similar to the first name, this is also a required field.</li> <li>Email Address: Input the user's valid email address. It must be a unique and valid email that the user has access to. This email address will be used for communication and account recovery.</li> <li>Password: Create a strong and secure password for the user's account. Users' passwords should consist of a minimum of twelve characters, including at least one lowercase letter, one uppercase letter, one numeric character, and one special character.</li> <li>Confirm Password: Re-enter the password the user provided in the previous field to ensure accuracy.</li> <li>Register Button: Click this button to submit the registration form and create the user's account.</li> </ol>"},{"location":"user/manual/register/register-page/#password-guidelines","title":"Password Guidelines","text":"<p>To ensure the security of the user's account, we recommend the following password guidelines:</p> <ul> <li>Use a minimum of 12 characters.</li> <li>Include an uppercase (A-Z).</li> <li>Include a lowercase (a-z).</li> <li>Use at least one number (0-9).</li> <li>Include at least one special character (e.g., !, @, #, $, %, etc.).</li> </ul>"},{"location":"user/manual/register/register-page/#creating-a-user-account","title":"Creating a User Account","text":"<ol> <li>Fill out all the required fields in the registration form.</li> <li>Double-check the user's provided information to ensure accuracy, especially the user's email and password.</li> <li>Click on the <code>REGISTER</code> button to submit the form.</li> </ol>"},{"location":"user/manual/register/register-page/#account-confirmation","title":"Account Confirmation","text":"<p>After successfully registering, the user should receive an email confirmation to verify their email address. Please follow the instructions in the email to complete the registration process.</p>"},{"location":"user/manual/register/register-page/#security-and-privacy","title":"Security and Privacy","text":"<p>We take user security and privacy seriously. User information is encrypted and stored securely, and we do not share the user's personal data with third parties without the user's consent.</p>"},{"location":"user/manual/register/register-page/#summary","title":"Summary","text":"<p>The Registration Page is the user's gateway to becoming a registered user, providing the user with access to the platform's features and functionalities. If the user encounters any issues during the registration process, they should contact the support team for assistance.</p>"},{"location":"user/manual/register/setup-2fa/","title":"IDS SAWPS","text":""},{"location":"user/manual/register/setup-2fa/#two-factor-authentication-2fa-setup-page","title":"Two-Factor Authentication (2FA) Setup Page","text":"<p>Two-factor authentication (2FA) is an added layer of security designed to ensure the security of people utilising the online platform. SAWPS values the security of the user's account and data. This page is an explanation of the various elements of the 2FA page users see when they register on the platform.</p>"},{"location":"user/manual/register/setup-2fa/#prerequisites","title":"Prerequisites","text":"<p>Before beginning to set up 2FA, users should ensure that they have the following:</p> <ul> <li>A smartphone or tablet with a compatible authenticator app installed (e.g., Google Authenticator).</li> </ul> <p></p> <ol> <li> <p>Two-Factor Authentication: Users can generate and verify the token on this page.</p> </li> <li> <p>Step 1: Users will see a QR code displayed on the screen that they can scan using their preferred authenticator application.</p> </li> <li>Step 2: The <code>Token</code> field is where users should type in the 6-digit token (generated by their authenticator application) that is associated with the account they are registering.</li> <li>VERIFY: Users can verify the token using the <code>VERIFY</code> button. Upon successful verification, Two-Factor Authentication will be enabled for the SAWPS account and the user will be redirected to continue registering.</li> </ol>"},{"location":"user/manual/register/setup-2fa/#two-factor-authentication-2fa-once-verified","title":"Two-Factor Authentication (2FA) Once Verified","text":"<p>Once users have successfully verified the 2FA, they will be able to add devices, delete devices and generate backup tokens.</p> <p></p> <ol> <li> <p>Two-factor authentication method: Displays the method used for the 2FA.</p> </li> <li> <p>Two-factor authentication devices: The two-factor authentication devices table displays the names of devices and the delete icon to delete the specific device.</p> <p></p> <ol> <li> <p>Device Name: Displays the name of added devices.</p> </li> <li> <p>Delete Icon: Users can delete a specific device by clicking on the delete icon.</p> <p>By clicking on the delete icon users will see a popup for confirming the deletion of a device.</p> <p></p> <ol> <li> <p>The <code>CANCEL</code> button is used to cancel the device deletion.</p> </li> <li> <p>The <code>DELETE</code> button is used to delete the device.</p> </li> </ol> </li> </ol> </li> <li> <p>Click on the <code>ADD DEVICE</code> button to add a new device. By clicking on the button users will see the popup to add new device.</p> <p></p> <ol> <li> <p>Device Name: Input field to add device name.</p> </li> <li> <p>*By clicking on the <code>ADD</code> button users will be shown a popup for scanning the QR code. Users can scan the QR code to generate a token for a newly added device.</p> <p></p> <ol> <li> <p>QR Code: to be scanned to generate a token.</p> </li> <li> <p><code>CLOSE</code> button to close the popup.</p> </li> </ol> </li> <li> <p>Cancel: <code>CANCEL</code> button to cancel the process of adding a new device.</p> </li> </ol> </li> <li> <p>Two-factor authentication recovery tokens: Information text for token generation.</p> </li> <li> <p><code>GENERATE BACKUP TOKENS</code>: By clicking on this button users can generate their recovery tokens.</p> </li> <li> <p>The <code>PROFILE</code> navigation link navigates to the profile page.</p> </li> <li> <p>The <code>REMINDERS</code> navigation link navigates to the reminders page.</p> </li> <li> <p>The <code>NOTIFICATIONS</code> navigation link navigates to the notification page.</p> </li> <li> <p>The <code>ORGANISATIONS</code> navigation link navigates to the organisation page for registered users.</p> </li> </ol>"},{"location":"user/manual/register/setup-2fa/#using-two-factor-authentication","title":"Using Two-Factor Authentication","text":"<p>When users log in to their SAWPS account, they will be prompted to enter the six-digit token generated by the user's authenticator application in addition to their regular login credentials. This extra layer of security will help protect the user's account from unauthorized access.</p> <p>If users encounter any issues during the setup process, they should reach out to the support team for assistance.</p>"},{"location":"user/manual/user-profile/","title":"IDS SAWPS","text":""},{"location":"user/manual/user-profile/#user-profile","title":"User profile","text":"<p>This section of documentation describes the various page elements of the User profile page and its sub-pages. It consists of:</p> <ul> <li>The Profile Page: Explains the various components of the profile page.</li> <li>Reminders: Explains the various components of the reminders feature.</li> <li>Notifications: Explains the various components of notifications.</li> <li>Two-factor Authentication: Explains the various components of two-factor authentication.</li> <li>Organisations: Explains the various components of the organisations tab.</li> <li>Request Organisation: Explains the various components of requesting an organisation.</li> </ul>"},{"location":"user/manual/user-profile/2fa/","title":"IDS SAWPS","text":""},{"location":"user/manual/user-profile/2fa/#two-factor-authentication-settings","title":"Two Factor Authentication Settings","text":"<p>The Two factor authentication page handles the user\u2019s two factor authentication settings.</p> <p>These include:</p> <ul> <li>Backup tokens</li> <li>Two factor authentication devices</li> </ul>"},{"location":"user/manual/user-profile/2fa/#two-factor-authentication-tab","title":"Two Factor Authentication Tab","text":"<ol> <li>Two Factor Authentication Tab of the profile page, where a user will find the settings.</li> <li>Current 2FA Method: This shows the current 2FA method the user uses to log on to the platform.</li> <li>Add Device: Clicking this button will evoke a popup modal requiring the user to enter the new device details before saving.</li> <li>2FA Devices: This is the table that shows the current 2FA devices the user uses to log on to the platform.</li> <li>Delete Icon: Clicking this will evoke a popup modal prompting the user if they are sure they want to remove the device before proceeding to remove it.</li> <li>Recovery Options: Under this header is a list of the backup tokens the user can use to log on to the platform in case they have lost their device.</li> <li>Generate Backup Token: The user can refresh their backup tokens as well as create new ones when they have just registered onto the platform.</li> </ol>"},{"location":"user/manual/user-profile/2fa/#add-device-popup-modal","title":"Add device popup modal","text":"<ol> <li>Device Name: Label indicating the value that is required in the field below it.</li> <li>Add button: When clicked will save the new device and return a QR Code Image.</li> </ol> <ol> <li>QR Image Code: Label indicating the success result when the device is added.</li> <li>QR Code: The user should scan this QR code with the authenticator app of their choice on their new device.</li> </ol>"},{"location":"user/manual/user-profile/2fa/#delete-device-modal","title":"Delete device modal","text":"<ol> <li>Cancel: This will prevent the device from being removed. This is in case the user is not sure or clicked the icon by accident.</li> <li>Delete button: will remove the device from the platform therefore the user will no longer be able to login using that device.</li> </ol>"},{"location":"user/manual/user-profile/notifications/","title":"IDS SAWPS","text":""},{"location":"user/manual/user-profile/notifications/#notifications-feature","title":"Notifications Feature","text":"<ul> <li>The notifications feature allows the user to receive push notifications of the reminders they have set via the platform.</li> <li>When a notification comes in, a small bell icon appears on the user profile icon.</li> <li>Also, a navigation link for notifications becomes available in the main navigation dropdown. This allows for the user to view the notifications from any page on the system.</li> <li>Clicking on the notification will lead the user to the notifications page where they can review more details about the notifications.</li> <li>On the profile pages, a small notification badge appears showing the number of notifications the user has.</li> </ul> <ol> <li>When a notification comes in, a small bell icon appears on the user profile icon showing the number of notifications the user has.</li> <li>A navigation link for notifications becomes available in the main navigation dropdown. This allows the user to view the notifications from any page on the system.</li> <li>Clicking on a notification will lead the user to the notifications page where they can review more details about the notifications.</li> </ol>"},{"location":"user/manual/user-profile/notifications/#notifications-tab","title":"Notifications tab","text":"<ol> <li>Navigation Link: Under the profile section a tab for notifications is available. When clicked renders the notifications page.</li> <li>Search box: Allows the user to search for a specific notification. The search looks for keywords within the notification and the title columns.</li> <li>Filter: The user can filter by title or notification. This refines the search to only return notifications containing the providing keywords specifically by the filter selected.</li> <li>Notification: Clicking on any notification will cause the popup modal with notification information to appear.</li> <li> <p>Delete icon:</p> <ul> <li>The user can delete their notifications.</li> <li>Organisation Managers can delete organisation notifications.</li> <li>When the delete icon is clicked a popup modal is evoked prompting if the user is sure of the actions they wish to take.</li> </ul> </li> <li> <p>Rows per page: The user can choose the number of notifications they prefer to see on a page (The minimum is 5).</p> </li> <li>Pagination Link: The user can see the current page they are on. They are also able to navigate to previous and next pages using the navigation links.</li> </ol>"},{"location":"user/manual/user-profile/notifications/#notification-information-popup-modal","title":"Notification information popup modal","text":""},{"location":"user/manual/user-profile/notifications/#delete-notification-popup-modal","title":"Delete notification popup modal","text":"<ol> <li>Delete Confirmation Title: Title pointing to what the modal is.</li> <li>Delete Button: when clicked deletes the reminder.</li> </ol>"},{"location":"user/manual/user-profile/organisation-page/","title":"IDS SAWPS","text":""},{"location":"user/manual/user-profile/organisation-page/#organisation-page","title":"Organisation page","text":"<ol> <li> <p>Dropdown: Click on the dropdown to view the organisation options.</p> </li> <li> <p>Organisation Name: Click on the name of the organisation to open organisation home page.</p> </li> </ol> <p>Every organisation can manage its organisation members via this page.</p> <p>This page offers the following functionality:</p> <ul> <li>Viewing organisation members.</li> <li>Inviting new members to the organisation provided the user has the right permissions.</li> <li>Deleting organisation members provided the user has the right permissions.</li> <li>Searching to see if a member exists within an organisation.</li> </ul>"},{"location":"user/manual/user-profile/organisation-page/#my-profile-organisation-tab","title":"My Profile Organisation Tab","text":"<ol> <li>My Profile: Click on the My Profile link to access the profile configuration page.</li> </ol> <ol> <li> <p>Organisations: Click on the <code>ORGANISATIONS</code> tab to perform actions related to organisations.</p> </li> <li> <p>Active: The <code>Active</code> button indicates the currently active organisation.</p> </li> <li> <p>Set Active: Click on the <code>Set Active</code> button to designate the selected organisation as the current active organisation.</p> </li> <li> <p>Organisation Name: Click on the name of the organisation to navigate to its home page.</p> <p></p> </li> <li> <p>Read More: Click on the Read More link to explore data use permissions. Users can adjust data use permissions by toggling the provided buttons.</p> <p></p> <ol> <li>Update Button: After setting up new data use permissions, click the update button to save changes.</li> </ol> <ul> <li> <p>Upon clicking on any of the toggle buttons, the user will see the message <code>Making changes here will not affect data that you have previously published and agreed to share under a different regime.</code></p> <p></p> </li> </ul> </li> <li> <p>Pagination: Click on the number to go to the preferred page.</p> <p></p> <ol> <li>Numbers: Shows the page numbers.</li> </ol> </li> </ol>"},{"location":"user/manual/user-profile/organisation-page/#profile-dropdown","title":"Profile Dropdown","text":"<ol> <li> <p>Dropdown: Click on the dropdown to view the organisation options.</p> </li> <li> <p>Organisation Name: Click on the name of the organisation to open organisation home page.</p> </li> </ol>"},{"location":"user/manual/user-profile/organisation-page/#organisation-home-page","title":"Organisation home page","text":"<ol> <li>Organisation name: This is a heading that indicates to the user the current organisation they are viewing.</li> <li>Add people button: When clicked will evoke a popup modal.</li> <li>Members title: Shows what the section of the page contains</li> <li>Search box: This allows the user to search for a specific member within the members table.</li> <li>Rows per page: This allows the user to determine how many rows they prefer to see on a single page. This can help on smaller devices for example.</li> <li>Pagination: Indicates the current page the user is on. As well as the nav links to manoeuvre to the previous or next page.</li> <li>Invitations Table Label: This indicates to the user that the table below contains invites.</li> <li>Status: The invitations table has a status role that shows whether the individual who has been invited has joined that organisation yet.</li> </ol>"},{"location":"user/manual/user-profile/organisation-page/#add-people-popup-modal","title":"Add people popup modal","text":"<ol> <li>Email address field: the user should provide the email address of the individual they wish to invite to the organisation.</li> <li>Invite as field: the user should specify if the individual they\u2019re inviting will have a manager or member role within the organisation.</li> <li>Invite button: when clicked will send the invitation to the individual being invited to the organisation. A success message (example below) will show if the email has been sent.</li> </ol>"},{"location":"user/manual/user-profile/organisation-page/#email-invitation","title":"Email invitation","text":"<p>Email Invitation Email: The individual being invited to the organisation will receive this email.</p> <p></p> <ol> <li>Register button: The individual being invited should click the register button, and they will be redirected to the website to complete their registration.</li> </ol>"},{"location":"user/manual/user-profile/organisation-page/#new-member-registration-page","title":"New member registration page","text":"<ul> <li>New member on platform: If the individual is a new member on the platform, they will be taken through the normal registration and added to the organisation.</li> <li>Member already registered on platform: If the individual is not new on the platform they will just be registered on to the organisation they are being invited.</li> <li>Registration Complete: Once the registration is complete the individual invited will be able to log in and see their new organisation under accessible organisations.</li> </ul>"},{"location":"user/manual/user-profile/profile-page/","title":"IDS SAWPS","text":""},{"location":"user/manual/user-profile/profile-page/#sawps-profile-page","title":"SAWPS profile page","text":"<p>The Profile tab is the first tab on the profile configuration page. The page consists of the following components with the following functionality.</p> <p></p> <ol> <li>The profile tab: A tab that displays the user profile information.</li> <li>Profile picture: An area that displays the uploaded profile image.</li> <li>Upload profile picture link: Opens the upload profile picture popup (see profile picture popup).</li> <li>Update password button: Opens the update password form for the user to make a new password for the platform (see update password form).</li> <li>First name field: A text field for the user to add their first name which is saved to the database.</li> <li>Last name field: A text field for the user to add their last name which is saved to the database.</li> <li>Title dropdown: A drop-down for the user to select their title which is saved to the database.</li> <li>Email address field: A text field for the user to add their email address which is saved to the database.</li> <li>Update button: When clicked all changes made to the profile page field are saved to the database.</li> </ol>"},{"location":"user/manual/user-profile/profile-page/#profile-picture-popup","title":"Profile picture popup","text":"<p>The profile picture popup appears when the Upload profile picture link is clicked in the profile tab of the profile configuration page.</p> <p></p> <ol> <li>Popup title: Shows what the popup is for</li> <li>Upload file button: This goes to the system file browser for the user to select an image for the profile picture.</li> <li>Upload button: Uploads the image to the platform associated with that user.</li> </ol>"},{"location":"user/manual/user-profile/profile-page/#update-password-form","title":"Update password form","text":"<p>The update password form opens when the update password button is clicked on the profile tab in the profile configuration page.</p> <p></p> <ol> <li>Current Password: The field where the user must input their current password.</li> <li>New Password: The field where the user must input their new password.</li> <li>Confirm New Password: The field where the user must confirm their new password.</li> <li><code>SAVE</code> Button: The button that the user must click to save their updated password.</li> </ol>"},{"location":"user/manual/user-profile/reminders/","title":"IDS SAWPS","text":""},{"location":"user/manual/user-profile/reminders/#reminders-feature","title":"Reminders Feature","text":"<p>The Reminders feature enables a user or organisation to do the following:</p> <ul> <li>Organisation: Set a reminder for everyone within the organisation.</li> <li>User: Set a personal reminder</li> <li>Edit a reminder: Changing its state from active, draft and passed or altering other details etc.</li> <li>Delete a reminder.</li> <li>The reminder set is sent via email and also the user is notified via the platform.</li> </ul> <p>Other functionalities offered on the Reminders Page:</p> <ul> <li>Search for specific reminders.</li> <li>Search by filtering reminders.</li> <li>Pagination.</li> <li>Organisation: View all reminders set by different users who have the role of creating reminders for all members of that specific organisation.</li> <li>User: View personal reminders.</li> </ul>"},{"location":"user/manual/user-profile/reminders/#reminders-page","title":"Reminders page","text":"<ol> <li>Navigation Link: Under the profile section a tab for reminders is available. When clicked renders the reminders page.</li> <li>Add Reminder: When clicked will present the user with the form to fill for the reminder they intend to create.</li> <li>Search box: Allows the user to search for a specific reminder. The search looks for keywords within the reminder and the title.</li> <li>Filter: The user is able to filter by title or reminder. This refines the search to only return reminders containing the providing keywords specifically by the filter selected.</li> <li>Reminder: Clicking on any reminder will cause the popup modal for editing the reminder to appear.</li> <li> <p>Delete icon:</p> <ul> <li>The user can delete their reminders.</li> <li>Organisation Managers can delete organisation reminders.</li> <li>When the delete icon is clicked a popup modal is evoked prompting if the user is sure of the actions they wish to take.</li> </ul> </li> <li> <p>Rows per page: The user is able to choose the number of reminders they prefer to see on a page (The minimum is 5).</p> </li> <li>Pagination Link: The user is able to see the current page they are on. They are also able to navigate to previous and next pages using the navigation links.</li> </ol>"},{"location":"user/manual/user-profile/reminders/#add-reminder-form","title":"Add reminder form","text":"<ol> <li>Title: The user should provide the reminder title.</li> <li>Date and Time: The user should schedule the reminder.</li> <li>Reminder: The user should provide the description of the reminder.</li> <li>Reminder Type: Based on the user role within that specific organisation the user is able to specify if the reminder is for all organisation members or if it is a personal reminder.</li> <li>Add button: When clicked creates the reminder.</li> </ol>"},{"location":"user/manual/user-profile/reminders/#reminder-popup-modal","title":"Reminder popup modal","text":"<ol> <li>Title: the user can change the reminder title.</li> <li>Date and Time: the user can change scheduled time for the reminder.</li> <li>Reminder: the user can change the description of the reminder.</li> <li>Reminder Type: Based on the user role within that specific organisation the user is able to specify if the reminder is for all organisation members or if it is a personal reminder.</li> <li>Reminder Status: the user is able to change the state of the reminder. If set to active the reminder is still scheduled, if set to draft the reminder is on pause, if set to passed the reminder will be moved to the notifications section but no email is sent.</li> <li>Save button: when clicked saves the new edited details.</li> </ol>"},{"location":"user/manual/user-profile/reminders/#delete-reminder-popup-modal","title":"Delete reminder popup modal","text":"<ol> <li>Delete Confirmation Title: Title pointing to what the modal is.</li> <li>Delete Button: when clicked deletes the reminder.</li> </ol>"},{"location":"user/manual/user-profile/request-organisation/","title":"IDS SAWPS","text":""},{"location":"user/manual/user-profile/request-organisation/#request-organisation-feature","title":"Request organisation feature","text":"<ul> <li>When a user on the platform wishes to have an organisation. They can request for one.</li> <li>The SANBI administrator will review the request and if they approve will create the organisation for the user and notify them via email.</li> </ul> <ol> <li> <p>Request Organisation Button:</p> <ul> <li>The <code>REQUEST ORGANISATION</code> button is located in the <code>ORGANISATION</code> tab of the <code>My Profile</code> page.</li> <li>This button is only visible to users who do not currently have an assigned organisation. If the user already has an organisation and would like to request another one, they can contact the SANBI team. Click here to get in touch with the SANBI team.</li> <li>Clicking the Request Organisation button will evoke a popup modal for further actions.</li> </ul> </li> </ol>"},{"location":"user/manual/user-profile/request-organisation/#request-organisation-popup-modal","title":"Request organisation popup modal","text":"<ol> <li>Organisation Name: In this field, the user should provide the name/s of the organisation they wish to have created.</li> <li>Message to Administrator: The user requesting to have an organisation should provide a message providing a description of the organisation etc.</li> <li>Send button: When the user clicks the send button, a confirmation (example below) will be returned to the user to let them know their invitation has been sent.</li> </ol>"},{"location":"user/quickstart/","title":"IDS SAWPS","text":""},{"location":"user/quickstart/#sanbi-sawps-quickstart","title":"SANBI SAWPS Quickstart","text":""},{"location":"user/quickstart/#accessing-the-platform","title":"Accessing the Platform","text":"<p>Navigate to the Home Page of the site, where you will be greeted by the landing page.</p> <p></p>"},{"location":"user/quickstart/#registration-and-logging-in","title":"Registration and Logging In","text":"<p>Navigate to the <code>REGISTER</code> button on the home page and fill in your details in the space provided.</p> <p></p> <p>You will be redirected to the registration page where you will be prompted to fill in some information. Namely; your first name, Last name (surname), Email address you'd like associated with your account, and the password you will use to log in to the platform. Once you have filled in all of the information click on the <code>REGISTER</code> button at the bottom of the registration window.</p> <p></p> <p>A popup will appear letting you know that a verification email will then be sent to the address you have provided.</p> <p></p> <p>Login to your email account and click on the green <code>VERIFICATION LINK</code> button attached in the mail.</p> <p></p> <p>This will redirect you to a profile configuration page.</p> <p></p> <p>This step will require you to download and install a token generator, such as the Google Authenticator from the Google Play store. You can install the token generator on your preferred device (i.e. cellphone, laptop, etc.)</p> <p></p> <p>You will use this app to scan the QR code and input the token generated. Keep in mind that for security purposes, you will have 30-60 seconds to type in the generated code before a new one is generated.</p> <p></p> <p>Once you type in the OTP (one time pin) successfully, you be logged in and will, once again, be redirected to <code>Profile Configuration</code> page. Here you can click on the <code>GENERATE BACKUP TOKENS</code> button to generate <code>Two-Factor Recovery Tokens</code> for your account.</p> <p></p> <p>You can use these in future to login to your profile. Additional devices can also be added as needed.</p> <p></p> <p>The next step is to request to be added to the \u2018Organisation\u2019 in which you belong. Navigate to the <code>ORGANISATIONS</code> tab on the <code>Profile COnfiguration</code> page. Then click on the <code>+REQUEST ORGANISATION</code> button, this will cause a popup to appear.</p> <p></p> <p>In the pop up, you need to fill in the name of the organisation that you would like to be added to (or have created for you) and a message to the administrator with any additional information you think is necessary. Once you have filled in everything, click on the <code>SEND</code> button.</p> <p></p> <p>This will send your request to the admin team for verification.</p> <p></p>"},{"location":"user/quickstart/#logging-in","title":"Logging in","text":"<p>Navigate to the home page of the platform and click on either of the two <code>LOGIN</code> buttons.</p> <p></p> <p>You will then be redirected to the Login page. Fill in the email address you used for registration and your password. Then click on <code>LOGIN</code>.</p> <p></p> <p>You will then be prompted for your Two-Factor Authentication OTP code. Enter the code from your relevant authenticator app (e.g. Google Authenticator), and click on <code>AUTHENTICATE</code>.</p> <p></p> <p>You will then be redirected back to the logged in landing page, from there you can navigate around the platform.</p> <p></p>"},{"location":"videos/","title":"Training Videos","text":""},{"location":"videos/#training-videos","title":"Training Videos","text":"<p>The <code>Training Videos</code> provide a valuable resource for users to access instructional and educational content in video format. This section houses a diverse range of training videos covering various topics, functionalities, and best practices within the system.</p> <p>Note: These should be used in conjunction with the written guides and should not be used as a substitution.</p> <ul> <li>To view a playlist of all of the training videos, users can click on the image below.     </li> </ul> <p>Or users can watch the videos individually by navigating to the relative heading.</p>"},{"location":"videos/#organisational-members","title":"Organisational Members","text":""},{"location":"videos/#organisational-managers","title":"Organisational Managers","text":""},{"location":"videos/#data-consumers","title":"Data Consumers","text":""},{"location":"videos/#data-scientists","title":"Data Scientists","text":""},{"location":"videos/#system-administrator","title":"System Administrator","text":""}]}