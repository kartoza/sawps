name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version:
          - 3.10.4
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
      - name: Test installing development dependencies
        working-directory: deployment/docker
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Run Flake8 test
        run: flake8 .

  django_test:
    needs: lint
    name: 'Django Test'
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version:
          - 3.10.4
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build test image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: deployment/docker/Dockerfile
          push: false
          load: true
          target: test
          tags: kartoza/sanbi:test
          cache-from: |
            type=gha,scope=test
            type=gha,scope=dev
          cache-to: type=gha,scope=test
      - name: Run docker-compose services
        working-directory: deployment
        run: |
          echo "Override docker-compose for testing purposes"
          cp docker-compose.override.test.yml docker-compose.override.yml
          cp .template.test.env .env
          cd ../
          make dev
          make wait-db
          make sleep
          make migrate
          make npm-install
          make build-react
          make dev-runserver
          make sleep
      - name: Test django endpoint
        run: |
          curl http://localhost:61100/
          if [ $? -ne 0 ]; then
            echo "Curl command failed"
            exit 1
          fi
      - name: Run Coverage test
        working-directory: deployment
        run: |
          cat << EOF | docker-compose exec -T dev bash
          python manage.py makemigrations
          python manage.py migrate
          python manage.py collectstatic --noinput --verbosity 0
          export DJANGO_SETTINGS_MODULE=core.settings.dev && coverage run manage.py test && coverage xml
          EOF
          docker cp sanbi_dev_1:/home/web/django_project/coverage.xml ../coverage.xml
      - name: Create superuser
        working-directory: deployment
        run: |
          cat << EOF | docker-compose exec -T dev bash
          export DJANGO_SUPERUSER_PASSWORD=admin
          python manage.py createsuperuser --no-input --username admin --email 'admin@example.com'
          python manage.py loaddata fixtures/*.json
          EOF
      - name: Update dependencies
        working-directory: ./playwright/ci-test
        run: npm install
      - name: Install exact dependencies
        working-directory: ./playwright/ci-test
        run: npm ci
      - name: Install Playwright Browsers
        working-directory: ./playwright/ci-test
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        working-directory: ./playwright/ci-test
        run: npx playwright test
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright/ci-test/playwright-report/
          retention-days: 30
      - name: Show Coverage
        if: ${{ github.event_name == 'pull_request' }}
        uses: orgoro/coverage@v3
        with:
          coverageFile: coverage.xml
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload coverage to codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
